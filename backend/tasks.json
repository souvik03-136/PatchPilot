{"pull_requests": {"3248a1cd-f5e2-47dd-8d3f-94a66fa7a639": {"id": "3248a1cd-f5e2-47dd-8d3f-94a66fa7a639", "type": "pr", "pr_url": "https://github.com/virattt/ai-hedge-fund/pull/376", "status": "completed", "mode": "deep", "created_at": "2025-07-27T08:02:11.142027", "started_at": "2025-07-27T08:02:11.369013", "completed_at": "2025-07-27T08:03:58.355132", "results": {"security_issues": [], "quality_issues": [], "logic_issues": [], "decision": {}, "pr_details": {"id": 2624612235, "number": 376, "title": "Add trading module and Alpaca broker", "body": "Hi,\r\n\r\nthis MR adds trading module and implementation for Alpaca (https://alpaca.markets) broker. ", "state": "open", "created_at": "2025-06-27 14:39:06+00:00", "updated_at": "2025-06-30 13:45:30+00:00", "closed_at": null, "merged_at": null, "merge_commit_sha": "5840c478e71cd576576d20736ae06ddf25a3688f", "author": "amalysh", "assignees": [], "reviewers": [], "labels": [], "milestone": null, "base_branch": "main", "head_branch": "alpaca-trading", "base_sha": "b725e61484bbcfbeb6339b9659fd95e7164847ac", "head_sha": "626e4d48a5c47b47f10d0a878b82471fc14bddf5", "mergeable": true, "mergeable_state": "clean", "merged": false, "comments": 0, "review_comments": 0, "commits": 6, "additions": 1788, "deletions": 28, "changed_files": 8, "files": [{"filename": ".env.example", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "patch": "@@ -21,3 +21,8 @@ FINANCIAL_DATASETS_API_KEY=your-financial-datasets-api-key\n # For running LLMs hosted by openai (gpt-4o, gpt-4o-mini, etc.)\n # Get your OpenAI API key from https://platform.openai.com/\n OPENAI_API_KEY=your-openai-api-key\n+\n+# Alpaca (required)\n+ALPACA_API_KEY=your-alpaca-api-key\n+ALPACA_SECRET_KEY=your-alpaca-secret-key\n+ALPACA_PAPER=true  # Set to false for live trading", "blob_url": "https://github.com/virattt/ai-hedge-fund/blob/626e4d48a5c47b47f10d0a878b82471fc14bddf5/.env.example", "raw_url": "https://github.com/virattt/ai-hedge-fund/raw/626e4d48a5c47b47f10d0a878b82471fc14bddf5/.env.example", "contents_url": "https://api.github.com/repos/virattt/ai-hedge-fund/contents/.env.example?ref=626e4d48a5c47b47f10d0a878b82471fc14bddf5"}, {"filename": "poetry.lock", "status": "modified", "additions": 250, "deletions": 28, "changes": 278, "patch": "@@ -1,11 +1,12 @@\n-# This file is automatically @generated by Poetry 1.8.5 and should not be changed by hand.\n+# This file is automatically @generated by Poetry 2.1.3 and should not be changed by hand.\n \n [[package]]\n name = \"aiohappyeyeballs\"\n version = \"2.6.1\"\n description = \"Happy Eyeballs for asyncio\"\n optional = false\n python-versions = \">=3.9\"\n+groups = [\"main\"]\n files = [\n     {file = \"aiohappyeyeballs-2.6.1-py3-none-any.whl\", hash = \"sha256:f349ba8f4b75cb25c99c5c2d84e997e485204d2902a9597802b0371f09331fb8\"},\n     {file = \"aiohappyeyeballs-2.6.1.tar.gz\", hash = \"sha256:c3f9d0113123803ccadfdf3f0faa505bc78e6a72d1cc4806cbd719826e943558\"},\n@@ -17,6 +18,7 @@ version = \"3.11.18\"\n description = \"Async http client/server framework (asyncio)\"\n optional = false\n python-versions = \">=3.9\"\n+groups = [\"main\"]\n files = [\n     {file = \"aiohttp-3.11.18-cp310-cp310-macosx_10_9_universal2.whl\", hash = \"sha256:96264854fedbea933a9ca4b7e0c745728f01380691687b7365d18d9e977179c4\"},\n     {file = \"aiohttp-3.11.18-cp310-cp310-macosx_10_9_x86_64.whl\", hash = \"sha256:9602044ff047043430452bc3a2089743fa85da829e6fc9ee0025351d66c332b6\"},\n@@ -111,14 +113,15 @@ propcache = \">=0.2.0\"\n yarl = \">=1.17.0,<2.0\"\n \n [package.extras]\n-speedups = [\"Brotli\", \"aiodns (>=3.2.0)\", \"brotlicffi\"]\n+speedups = [\"Brotli ; platform_python_implementation == \\\"CPython\\\"\", \"aiodns (>=3.2.0) ; sys_platform == \\\"linux\\\" or sys_platform == \\\"darwin\\\"\", \"brotlicffi ; platform_python_implementation != \\\"CPython\\\"\"]\n \n [[package]]\n name = \"aiosignal\"\n version = \"1.3.2\"\n description = \"aiosignal: a list of registered asynchronous callbacks\"\n optional = false\n python-versions = \">=3.9\"\n+groups = [\"main\"]\n files = [\n     {file = \"aiosignal-1.3.2-py2.py3-none-any.whl\", hash = \"sha256:45cde58e409a301715980c2b01d0c28bdde3770d8290b5eb2173759d9acb31a5\"},\n     {file = \"aiosignal-1.3.2.tar.gz\", hash = \"sha256:a8c255c66fafb1e499c9351d0bf32ff2d8a0321595ebac3b93713656d2436f54\"},\n@@ -133,6 +136,7 @@ version = \"1.15.2\"\n description = \"A database migration tool for SQLAlchemy.\"\n optional = false\n python-versions = \">=3.9\"\n+groups = [\"main\"]\n files = [\n     {file = \"alembic-1.15.2-py3-none-any.whl\", hash = \"sha256:2e76bd916d547f6900ec4bb5a90aeac1485d2c92536923d0b138c02b126edc53\"},\n     {file = \"alembic-1.15.2.tar.gz\", hash = \"sha256:1c72391bbdeffccfe317eefba686cb9a3c078005478885413b95c3b26c57a8a7\"},\n@@ -146,12 +150,33 @@ typing-extensions = \">=4.12\"\n [package.extras]\n tz = [\"tzdata\"]\n \n+[[package]]\n+name = \"alpaca-py\"\n+version = \"0.40.2\"\n+description = \"The Official Python SDK for Alpaca APIs\"\n+optional = false\n+python-versions = \"<4.0.0,>=3.8.0\"\n+groups = [\"main\"]\n+files = [\n+    {file = \"alpaca_py-0.40.2-py3-none-any.whl\", hash = \"sha256:bd21a5d290051d28ff4811b0cda2a1b45a4c6bb80f49b037c7bc2fe15302f035\"},\n+    {file = \"alpaca_py-0.40.2.tar.gz\", hash = \"sha256:d1e63b628cff4d9935a0c24c3a4419a985d4216a531c5c7b2d9fcd49e3c5fb70\"},\n+]\n+\n+[package.dependencies]\n+msgpack = \">=1.0.3,<2.0.0\"\n+pandas = \">=1.5.3\"\n+pydantic = \">=2.0.3,<3.0.0\"\n+requests = \">=2.30.0,<3.0.0\"\n+sseclient-py = \">=1.7.2,<2.0.0\"\n+websockets = \">=10.4\"\n+\n [[package]]\n name = \"annotated-types\"\n version = \"0.7.0\"\n description = \"Reusable constraint types to use with typing.Annotated\"\n optional = false\n python-versions = \">=3.8\"\n+groups = [\"main\"]\n files = [\n     {file = \"annotated_types-0.7.0-py3-none-any.whl\", hash = \"sha256:1f02e8b43a8fbbc3f3e0d4f0f4bfc8131bcb4eebe8849b8e5c773f3a1c582a53\"},\n     {file = \"annotated_types-0.7.0.tar.gz\", hash = \"sha256:aff07c09a53a08bc8cfccb9c85b05f1aa9a2a6f23728d790723543408344ce89\"},\n@@ -163,6 +188,7 @@ version = \"0.50.0\"\n description = \"The official Python library for the anthropic API\"\n optional = false\n python-versions = \">=3.8\"\n+groups = [\"main\"]\n files = [\n     {file = \"anthropic-0.50.0-py3-none-any.whl\", hash = \"sha256:defbd79327ca2fa61fd7b9eb2f1627dfb1f69c25d49288c52e167ddb84574f80\"},\n     {file = \"anthropic-0.50.0.tar.gz\", hash = \"sha256:42175ec04ce4ff2fa37cd436710206aadff546ee99d70d974699f59b49adc66f\"},\n@@ -187,6 +213,7 @@ version = \"3.7.1\"\n description = \"High level compatibility layer for multiple asynchronous event loop implementations\"\n optional = false\n python-versions = \">=3.7\"\n+groups = [\"main\"]\n files = [\n     {file = \"anyio-3.7.1-py3-none-any.whl\", hash = \"sha256:91dee416e570e92c64041bd18b900d1d6fa78dff7048769ce5ac5ddad004fbb5\"},\n     {file = \"anyio-3.7.1.tar.gz\", hash = \"sha256:44a3c9aba0f5defa43261a8b3efb97891f2bd7d804e0e1f56419befa1adfc780\"},\n@@ -198,7 +225,7 @@ sniffio = \">=1.1\"\n \n [package.extras]\n doc = [\"Sphinx\", \"packaging\", \"sphinx-autodoc-typehints (>=1.2.0)\", \"sphinx-rtd-theme (>=1.2.2)\", \"sphinxcontrib-jquery\"]\n-test = [\"anyio[trio]\", \"coverage[toml] (>=4.5)\", \"hypothesis (>=4.0)\", \"mock (>=4)\", \"psutil (>=5.9)\", \"pytest (>=7.0)\", \"pytest-mock (>=3.6.1)\", \"trustme\", \"uvloop (>=0.17)\"]\n+test = [\"anyio[trio]\", \"coverage[toml] (>=4.5)\", \"hypothesis (>=4.0)\", \"mock (>=4) ; python_version < \\\"3.8\\\"\", \"psutil (>=5.9)\", \"pytest (>=7.0)\", \"pytest-mock (>=3.6.1)\", \"trustme\", \"uvloop (>=0.17) ; python_version < \\\"3.12\\\" and platform_python_implementation == \\\"CPython\\\" and platform_system != \\\"Windows\\\"\"]\n trio = [\"trio (<0.22)\"]\n \n [[package]]\n@@ -207,25 +234,27 @@ version = \"25.3.0\"\n description = \"Classes Without Boilerplate\"\n optional = false\n python-versions = \">=3.8\"\n+groups = [\"main\"]\n files = [\n     {file = \"attrs-25.3.0-py3-none-any.whl\", hash = \"sha256:427318ce031701fea540783410126f03899a97ffc6f61596ad581ac2e40e3bc3\"},\n     {file = \"attrs-25.3.0.tar.gz\", hash = \"sha256:75d7cefc7fb576747b2c81b4442d4d4a1ce0900973527c011d1030fd3bf4af1b\"},\n ]\n \n [package.extras]\n-benchmark = [\"cloudpickle\", \"hypothesis\", \"mypy (>=1.11.1)\", \"pympler\", \"pytest (>=4.3.0)\", \"pytest-codspeed\", \"pytest-mypy-plugins\", \"pytest-xdist[psutil]\"]\n-cov = [\"cloudpickle\", \"coverage[toml] (>=5.3)\", \"hypothesis\", \"mypy (>=1.11.1)\", \"pympler\", \"pytest (>=4.3.0)\", \"pytest-mypy-plugins\", \"pytest-xdist[psutil]\"]\n-dev = [\"cloudpickle\", \"hypothesis\", \"mypy (>=1.11.1)\", \"pre-commit-uv\", \"pympler\", \"pytest (>=4.3.0)\", \"pytest-mypy-plugins\", \"pytest-xdist[psutil]\"]\n+benchmark = [\"cloudpickle ; platform_python_implementation == \\\"CPython\\\"\", \"hypothesis\", \"mypy (>=1.11.1) ; platform_python_implementation == \\\"CPython\\\" and python_version >= \\\"3.10\\\"\", \"pympler\", \"pytest (>=4.3.0)\", \"pytest-codspeed\", \"pytest-mypy-plugins ; platform_python_implementation == \\\"CPython\\\" and python_version >= \\\"3.10\\\"\", \"pytest-xdist[psutil]\"]\n+cov = [\"cloudpickle ; platform_python_implementation == \\\"CPython\\\"\", \"coverage[toml] (>=5.3)\", \"hypothesis\", \"mypy (>=1.11.1) ; platform_python_implementation == \\\"CPython\\\" and python_version >= \\\"3.10\\\"\", \"pympler\", \"pytest (>=4.3.0)\", \"pytest-mypy-plugins ; platform_python_implementation == \\\"CPython\\\" and python_version >= \\\"3.10\\\"\", \"pytest-xdist[psutil]\"]\n+dev = [\"cloudpickle ; platform_python_implementation == \\\"CPython\\\"\", \"hypothesis\", \"mypy (>=1.11.1) ; platform_python_implementation == \\\"CPython\\\" and python_version >= \\\"3.10\\\"\", \"pre-commit-uv\", \"pympler\", \"pytest (>=4.3.0)\", \"pytest-mypy-plugins ; platform_python_implementation == \\\"CPython\\\" and python_version >= \\\"3.10\\\"\", \"pytest-xdist[psutil]\"]\n docs = [\"cogapp\", \"furo\", \"myst-parser\", \"sphinx\", \"sphinx-notfound-page\", \"sphinxcontrib-towncrier\", \"towncrier\"]\n-tests = [\"cloudpickle\", \"hypothesis\", \"mypy (>=1.11.1)\", \"pympler\", \"pytest (>=4.3.0)\", \"pytest-mypy-plugins\", \"pytest-xdist[psutil]\"]\n-tests-mypy = [\"mypy (>=1.11.1)\", \"pytest-mypy-plugins\"]\n+tests = [\"cloudpickle ; platform_python_implementation == \\\"CPython\\\"\", \"hypothesis\", \"mypy (>=1.11.1) ; platform_python_implementation == \\\"CPython\\\" and python_version >= \\\"3.10\\\"\", \"pympler\", \"pytest (>=4.3.0)\", \"pytest-mypy-plugins ; platform_python_implementation == \\\"CPython\\\" and python_version >= \\\"3.10\\\"\", \"pytest-xdist[psutil]\"]\n+tests-mypy = [\"mypy (>=1.11.1) ; platform_python_implementation == \\\"CPython\\\" and python_version >= \\\"3.10\\\"\", \"pytest-mypy-plugins ; platform_python_implementation == \\\"CPython\\\" and python_version >= \\\"3.10\\\"\"]\n \n [[package]]\n name = \"black\"\n version = \"23.12.1\"\n description = \"The uncompromising code formatter.\"\n optional = false\n python-versions = \">=3.8\"\n+groups = [\"dev\"]\n files = [\n     {file = \"black-23.12.1-cp310-cp310-macosx_10_9_x86_64.whl\", hash = \"sha256:e0aaf6041986767a5e0ce663c7a2f0e9eaf21e6ff87a5f95cbf3675bfd4c41d2\"},\n     {file = \"black-23.12.1-cp310-cp310-macosx_11_0_arm64.whl\", hash = \"sha256:c88b3711d12905b74206227109272673edce0cb29f27e1385f33b0163c414bba\"},\n@@ -260,7 +289,7 @@ platformdirs = \">=2\"\n \n [package.extras]\n colorama = [\"colorama (>=0.4.3)\"]\n-d = [\"aiohttp (>=3.7.4)\", \"aiohttp (>=3.7.4,!=3.9.0)\"]\n+d = [\"aiohttp (>=3.7.4) ; sys_platform != \\\"win32\\\" or implementation_name != \\\"pypy\\\"\", \"aiohttp (>=3.7.4,!=3.9.0) ; sys_platform == \\\"win32\\\" and implementation_name == \\\"pypy\\\"\"]\n jupyter = [\"ipython (>=7.8.0)\", \"tokenize-rt (>=3.2.0)\"]\n uvloop = [\"uvloop (>=0.15.2)\"]\n \n@@ -270,6 +299,7 @@ version = \"5.5.2\"\n description = \"Extensible memoizing collections and decorators\"\n optional = false\n python-versions = \">=3.7\"\n+groups = [\"main\"]\n files = [\n     {file = \"cachetools-5.5.2-py3-none-any.whl\", hash = \"sha256:d26a22bcc62eb95c3beabd9f1ee5e820d3d2704fe2967cbe350e20c8ffcd3f0a\"},\n     {file = \"cachetools-5.5.2.tar.gz\", hash = \"sha256:1a661caa9175d26759571b2e19580f9d6393969e5dfca11fdb1f947a23e640d4\"},\n@@ -281,6 +311,7 @@ version = \"2025.4.26\"\n description = \"Python package for providing Mozilla's CA Bundle.\"\n optional = false\n python-versions = \">=3.6\"\n+groups = [\"main\"]\n files = [\n     {file = \"certifi-2025.4.26-py3-none-any.whl\", hash = \"sha256:30350364dfe371162649852c63336a15c70c6510c2ad5015b21c2345311805f3\"},\n     {file = \"certifi-2025.4.26.tar.gz\", hash = \"sha256:0a816057ea3cdefcef70270d2c515e4506bbc954f417fa5ade2021213bb8f0c6\"},\n@@ -292,6 +323,7 @@ version = \"3.4.1\"\n description = \"The Real First Universal Charset Detector. Open, modern and actively maintained alternative to Chardet.\"\n optional = false\n python-versions = \">=3.7\"\n+groups = [\"main\"]\n files = [\n     {file = \"charset_normalizer-3.4.1-cp310-cp310-macosx_10_9_universal2.whl\", hash = \"sha256:91b36a978b5ae0ee86c394f5a54d6ef44db1de0815eb43de826d41d21e4af3de\"},\n     {file = \"charset_normalizer-3.4.1-cp310-cp310-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:7461baadb4dc00fd9e0acbe254e3d7d2112e7f92ced2adc96e54ef6501c5f176\"},\n@@ -393,6 +425,7 @@ version = \"8.1.8\"\n description = \"Composable command line interface toolkit\"\n optional = false\n python-versions = \">=3.7\"\n+groups = [\"main\", \"dev\"]\n files = [\n     {file = \"click-8.1.8-py3-none-any.whl\", hash = \"sha256:63c132bbbed01578a06712a2d1f497bb62d9c1c0d329b7903a866228027263b2\"},\n     {file = \"click-8.1.8.tar.gz\", hash = \"sha256:ed53c9d8990d83c2a27deae68e4ee337473f6330c040a31d4225c9574d16096a\"},\n@@ -407,6 +440,7 @@ version = \"0.4.6\"\n description = \"Cross-platform colored terminal text.\"\n optional = false\n python-versions = \"!=3.0.*,!=3.1.*,!=3.2.*,!=3.3.*,!=3.4.*,!=3.5.*,!=3.6.*,>=2.7\"\n+groups = [\"main\", \"dev\"]\n files = [\n     {file = \"colorama-0.4.6-py2.py3-none-any.whl\", hash = \"sha256:4f1d9991f5acc0ca119f9d443620b77f9d6b33703e51011c16baf57afb285fc6\"},\n     {file = \"colorama-0.4.6.tar.gz\", hash = \"sha256:08695f5cb7ed6e0531a20572697297273c47b8cae5a63ffc6d6ed5c201be6e44\"},\n@@ -418,6 +452,7 @@ version = \"1.3.2\"\n description = \"Python library for calculating contours of 2D quadrilateral grids\"\n optional = false\n python-versions = \">=3.10\"\n+groups = [\"main\"]\n files = [\n     {file = \"contourpy-1.3.2-cp310-cp310-macosx_10_9_x86_64.whl\", hash = \"sha256:ba38e3f9f330af820c4b27ceb4b9c7feee5fe0493ea53a8720f4792667465934\"},\n     {file = \"contourpy-1.3.2-cp310-cp310-macosx_11_0_arm64.whl\", hash = \"sha256:dc41ba0714aa2968d1f8674ec97504a8f7e334f48eeacebcaa6256213acb0989\"},\n@@ -494,6 +529,7 @@ version = \"0.12.1\"\n description = \"Composable style cycles\"\n optional = false\n python-versions = \">=3.8\"\n+groups = [\"main\"]\n files = [\n     {file = \"cycler-0.12.1-py3-none-any.whl\", hash = \"sha256:85cef7cff222d8644161529808465972e51340599459b8ac3ccbac5a854e0d30\"},\n     {file = \"cycler-0.12.1.tar.gz\", hash = \"sha256:88bb128f02ba341da8ef447245a9e138fae777f6a23943da4540077d3601eb1c\"},\n@@ -509,6 +545,7 @@ version = \"0.7.1\"\n description = \"XML bomb protection for Python stdlib modules\"\n optional = false\n python-versions = \">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*\"\n+groups = [\"main\"]\n files = [\n     {file = \"defusedxml-0.7.1-py2.py3-none-any.whl\", hash = \"sha256:a352e7e428770286cc899e2542b6cdaedb2b4953ff269a210103ec58f6198a61\"},\n     {file = \"defusedxml-0.7.1.tar.gz\", hash = \"sha256:1bb3032db185915b62d7c6209c5a8792be6a32ab2fedacc84e01b52c51aa3e69\"},\n@@ -520,6 +557,7 @@ version = \"1.9.0\"\n description = \"Distro - an OS platform information API\"\n optional = false\n python-versions = \">=3.6\"\n+groups = [\"main\"]\n files = [\n     {file = \"distro-1.9.0-py3-none-any.whl\", hash = \"sha256:7bffd925d65168f85027d8da9af6bddab658135b840670a223589bc0c8ef02b2\"},\n     {file = \"distro-1.9.0.tar.gz\", hash = \"sha256:2fa77c6fd8940f116ee1d6b94a2f90b13b5ea8d019b98bc8bafdcabcdd9bdbed\"},\n@@ -531,6 +569,7 @@ version = \"0.104.1\"\n description = \"FastAPI framework, high performance, easy to learn, fast to code, ready for production\"\n optional = false\n python-versions = \">=3.8\"\n+groups = [\"main\"]\n files = [\n     {file = \"fastapi-0.104.1-py3-none-any.whl\", hash = \"sha256:752dc31160cdbd0436bb93bad51560b57e525cbb1d4bbf6f4904ceee75548241\"},\n     {file = \"fastapi-0.104.1.tar.gz\", hash = \"sha256:e5e4540a7c5e1dcfbbcf5b903c234feddcdcd881f191977a1c5dfd917487e7ae\"},\n@@ -551,6 +590,7 @@ version = \"0.0.7\"\n description = \"Run and manage FastAPI apps from the command line with FastAPI CLI. \ud83d\ude80\"\n optional = false\n python-versions = \">=3.8\"\n+groups = [\"main\"]\n files = [\n     {file = \"fastapi_cli-0.0.7-py3-none-any.whl\", hash = \"sha256:d549368ff584b2804336c61f192d86ddea080c11255f375959627911944804f4\"},\n     {file = \"fastapi_cli-0.0.7.tar.gz\", hash = \"sha256:02b3b65956f526412515907a0793c9094abd4bfb5457b389f645b0ea6ba3605e\"},\n@@ -570,6 +610,7 @@ version = \"1.2.0\"\n description = \"Infer file type and MIME type of any file/buffer. No external dependencies.\"\n optional = false\n python-versions = \"*\"\n+groups = [\"main\"]\n files = [\n     {file = \"filetype-1.2.0-py2.py3-none-any.whl\", hash = \"sha256:7ce71b6880181241cf7ac8697a2f1eb6a8bd9b429f7ad6d27b8db9ba5f1c2d25\"},\n     {file = \"filetype-1.2.0.tar.gz\", hash = \"sha256:66b56cd6474bf41d8c54660347d37afcc3f7d1970648de365c102ef77548aadb\"},\n@@ -581,6 +622,7 @@ version = \"6.1.0\"\n description = \"the modular source code checker: pep8 pyflakes and co\"\n optional = false\n python-versions = \">=3.8.1\"\n+groups = [\"dev\"]\n files = [\n     {file = \"flake8-6.1.0-py2.py3-none-any.whl\", hash = \"sha256:ffdfce58ea94c6580c77888a86506937f9a1a227dfcd15f245d694ae20a6b6e5\"},\n     {file = \"flake8-6.1.0.tar.gz\", hash = \"sha256:d5b3857f07c030bdb5bf41c7f53799571d75c4491748a3adcd47de929e34cd23\"},\n@@ -597,6 +639,7 @@ version = \"4.57.0\"\n description = \"Tools to manipulate font files\"\n optional = false\n python-versions = \">=3.8\"\n+groups = [\"main\"]\n files = [\n     {file = \"fonttools-4.57.0-cp310-cp310-macosx_10_9_universal2.whl\", hash = \"sha256:babe8d1eb059a53e560e7bf29f8e8f4accc8b6cfb9b5fd10e485bde77e71ef41\"},\n     {file = \"fonttools-4.57.0-cp310-cp310-macosx_10_9_x86_64.whl\", hash = \"sha256:81aa97669cd726349eb7bd43ca540cf418b279ee3caba5e2e295fb4e8f841c02\"},\n@@ -651,25 +694,26 @@ files = [\n ]\n \n [package.extras]\n-all = [\"brotli (>=1.0.1)\", \"brotlicffi (>=0.8.0)\", \"fs (>=2.2.0,<3)\", \"lxml (>=4.0)\", \"lz4 (>=1.7.4.2)\", \"matplotlib\", \"munkres\", \"pycairo\", \"scipy\", \"skia-pathops (>=0.5.0)\", \"sympy\", \"uharfbuzz (>=0.23.0)\", \"unicodedata2 (>=15.1.0)\", \"xattr\", \"zopfli (>=0.1.4)\"]\n+all = [\"brotli (>=1.0.1) ; platform_python_implementation == \\\"CPython\\\"\", \"brotlicffi (>=0.8.0) ; platform_python_implementation != \\\"CPython\\\"\", \"fs (>=2.2.0,<3)\", \"lxml (>=4.0)\", \"lz4 (>=1.7.4.2)\", \"matplotlib\", \"munkres ; platform_python_implementation == \\\"PyPy\\\"\", \"pycairo\", \"scipy ; platform_python_implementation != \\\"PyPy\\\"\", \"skia-pathops (>=0.5.0)\", \"sympy\", \"uharfbuzz (>=0.23.0)\", \"unicodedata2 (>=15.1.0) ; python_version <= \\\"3.12\\\"\", \"xattr ; sys_platform == \\\"darwin\\\"\", \"zopfli (>=0.1.4)\"]\n graphite = [\"lz4 (>=1.7.4.2)\"]\n-interpolatable = [\"munkres\", \"pycairo\", \"scipy\"]\n+interpolatable = [\"munkres ; platform_python_implementation == \\\"PyPy\\\"\", \"pycairo\", \"scipy ; platform_python_implementation != \\\"PyPy\\\"\"]\n lxml = [\"lxml (>=4.0)\"]\n pathops = [\"skia-pathops (>=0.5.0)\"]\n plot = [\"matplotlib\"]\n repacker = [\"uharfbuzz (>=0.23.0)\"]\n symfont = [\"sympy\"]\n-type1 = [\"xattr\"]\n+type1 = [\"xattr ; sys_platform == \\\"darwin\\\"\"]\n ufo = [\"fs (>=2.2.0,<3)\"]\n-unicode = [\"unicodedata2 (>=15.1.0)\"]\n-woff = [\"brotli (>=1.0.1)\", \"brotlicffi (>=0.8.0)\", \"zopfli (>=0.1.4)\"]\n+unicode = [\"unicodedata2 (>=15.1.0) ; python_version <= \\\"3.12\\\"\"]\n+woff = [\"brotli (>=1.0.1) ; platform_python_implementation == \\\"CPython\\\"\", \"brotlicffi (>=0.8.0) ; platform_python_implementation != \\\"CPython\\\"\", \"zopfli (>=0.1.4)\"]\n \n [[package]]\n name = \"frozenlist\"\n version = \"1.6.0\"\n description = \"A list-like structure which implements collections.abc.MutableSequence\"\n optional = false\n python-versions = \">=3.9\"\n+groups = [\"main\"]\n files = [\n     {file = \"frozenlist-1.6.0-cp310-cp310-macosx_10_9_universal2.whl\", hash = \"sha256:e6e558ea1e47fd6fa8ac9ccdad403e5dd5ecc6ed8dda94343056fa4277d5c65e\"},\n     {file = \"frozenlist-1.6.0-cp310-cp310-macosx_10_9_x86_64.whl\", hash = \"sha256:f4b3cd7334a4bbc0c472164f3744562cb72d05002cc6fcf58adb104630bbc352\"},\n@@ -783,6 +827,7 @@ version = \"0.6.18\"\n description = \"Google Ai Generativelanguage API client library\"\n optional = false\n python-versions = \">=3.7\"\n+groups = [\"main\"]\n files = [\n     {file = \"google_ai_generativelanguage-0.6.18-py3-none-any.whl\", hash = \"sha256:13d8174fea90b633f520789d32df7b422058fd5883b022989c349f1017db7fcf\"},\n     {file = \"google_ai_generativelanguage-0.6.18.tar.gz\", hash = \"sha256:274ba9fcf69466ff64e971d565884434388e523300afd468fc8e3033cd8e606e\"},\n@@ -792,7 +837,7 @@ files = [\n google-api-core = {version = \">=1.34.1,<2.0.dev0 || >=2.11.dev0,<3.0.0\", extras = [\"grpc\"]}\n google-auth = \">=2.14.1,<2.24.0 || >2.24.0,<2.25.0 || >2.25.0,<3.0.0\"\n proto-plus = [\n-    {version = \">=1.22.3,<2.0.0\", markers = \"python_version < \\\"3.13\\\"\"},\n+    {version = \">=1.22.3,<2.0.0\"},\n     {version = \">=1.25.0,<2.0.0\", markers = \"python_version >= \\\"3.13\\\"\"},\n ]\n protobuf = \">=3.20.2,<4.21.0 || >4.21.0,<4.21.1 || >4.21.1,<4.21.2 || >4.21.2,<4.21.3 || >4.21.3,<4.21.4 || >4.21.4,<4.21.5 || >4.21.5,<7.0.0\"\n@@ -803,6 +848,7 @@ version = \"2.24.2\"\n description = \"Google API client core library\"\n optional = false\n python-versions = \">=3.7\"\n+groups = [\"main\"]\n files = [\n     {file = \"google_api_core-2.24.2-py3-none-any.whl\", hash = \"sha256:810a63ac95f3c441b7c0e43d344e372887f62ce9071ba972eacf32672e072de9\"},\n     {file = \"google_api_core-2.24.2.tar.gz\", hash = \"sha256:81718493daf06d96d6bc76a91c23874dbf2fac0adbbf542831b805ee6e974696\"},\n@@ -814,15 +860,15 @@ googleapis-common-protos = \">=1.56.2,<2.0.0\"\n grpcio = {version = \">=1.49.1,<2.0dev\", optional = true, markers = \"python_version >= \\\"3.11\\\" and extra == \\\"grpc\\\"\"}\n grpcio-status = {version = \">=1.49.1,<2.0.dev0\", optional = true, markers = \"python_version >= \\\"3.11\\\" and extra == \\\"grpc\\\"\"}\n proto-plus = [\n-    {version = \">=1.22.3,<2.0.0\", markers = \"python_version < \\\"3.13\\\"\"},\n+    {version = \">=1.22.3,<2.0.0\"},\n     {version = \">=1.25.0,<2.0.0\", markers = \"python_version >= \\\"3.13\\\"\"},\n ]\n protobuf = \">=3.19.5,<3.20.0 || >3.20.0,<3.20.1 || >3.20.1,<4.21.0 || >4.21.0,<4.21.1 || >4.21.1,<4.21.2 || >4.21.2,<4.21.3 || >4.21.3,<4.21.4 || >4.21.4,<4.21.5 || >4.21.5,<7.0.0\"\n requests = \">=2.18.0,<3.0.0\"\n \n [package.extras]\n async-rest = [\"google-auth[aiohttp] (>=2.35.0,<3.0.dev0)\"]\n-grpc = [\"grpcio (>=1.33.2,<2.0dev)\", \"grpcio (>=1.49.1,<2.0dev)\", \"grpcio-status (>=1.33.2,<2.0.dev0)\", \"grpcio-status (>=1.49.1,<2.0.dev0)\"]\n+grpc = [\"grpcio (>=1.33.2,<2.0dev)\", \"grpcio (>=1.49.1,<2.0dev) ; python_version >= \\\"3.11\\\"\", \"grpcio-status (>=1.33.2,<2.0.dev0)\", \"grpcio-status (>=1.49.1,<2.0.dev0) ; python_version >= \\\"3.11\\\"\"]\n grpcgcp = [\"grpcio-gcp (>=0.2.2,<1.0.dev0)\"]\n grpcio-gcp = [\"grpcio-gcp (>=0.2.2,<1.0.dev0)\"]\n \n@@ -832,6 +878,7 @@ version = \"2.39.0\"\n description = \"Google Authentication Library\"\n optional = false\n python-versions = \">=3.7\"\n+groups = [\"main\"]\n files = [\n     {file = \"google_auth-2.39.0-py2.py3-none-any.whl\", hash = \"sha256:0150b6711e97fb9f52fe599f55648950cc4540015565d8fbb31be2ad6e1548a2\"},\n     {file = \"google_auth-2.39.0.tar.gz\", hash = \"sha256:73222d43cdc35a3aeacbfdcaf73142a97839f10de930550d89ebfe1d0a00cde7\"},\n@@ -845,11 +892,11 @@ rsa = \">=3.1.4,<5\"\n [package.extras]\n aiohttp = [\"aiohttp (>=3.6.2,<4.0.0)\", \"requests (>=2.20.0,<3.0.0)\"]\n enterprise-cert = [\"cryptography\", \"pyopenssl\"]\n-pyjwt = [\"cryptography (<39.0.0)\", \"cryptography (>=38.0.3)\", \"pyjwt (>=2.0)\"]\n-pyopenssl = [\"cryptography (<39.0.0)\", \"cryptography (>=38.0.3)\", \"pyopenssl (>=20.0.0)\"]\n+pyjwt = [\"cryptography (<39.0.0) ; python_version < \\\"3.8\\\"\", \"cryptography (>=38.0.3)\", \"pyjwt (>=2.0)\"]\n+pyopenssl = [\"cryptography (<39.0.0) ; python_version < \\\"3.8\\\"\", \"cryptography (>=38.0.3)\", \"pyopenssl (>=20.0.0)\"]\n reauth = [\"pyu2f (>=0.1.5)\"]\n requests = [\"requests (>=2.20.0,<3.0.0)\"]\n-testing = [\"aiohttp (<3.10.0)\", \"aiohttp (>=3.6.2,<4.0.0)\", \"aioresponses\", \"cryptography (<39.0.0)\", \"cryptography (>=38.0.3)\", \"flask\", \"freezegun\", \"grpcio\", \"mock\", \"oauth2client\", \"packaging\", \"pyjwt (>=2.0)\", \"pyopenssl (<24.3.0)\", \"pyopenssl (>=20.0.0)\", \"pytest\", \"pytest-asyncio\", \"pytest-cov\", \"pytest-localserver\", \"pyu2f (>=0.1.5)\", \"requests (>=2.20.0,<3.0.0)\", \"responses\", \"urllib3\"]\n+testing = [\"aiohttp (<3.10.0)\", \"aiohttp (>=3.6.2,<4.0.0)\", \"aioresponses\", \"cryptography (<39.0.0) ; python_version < \\\"3.8\\\"\", \"cryptography (>=38.0.3)\", \"flask\", \"freezegun\", \"grpcio\", \"mock\", \"oauth2client\", \"packaging\", \"pyjwt (>=2.0)\", \"pyopenssl (<24.3.0)\", \"pyopenssl (>=20.0.0)\", \"pytest\", \"pytest-asyncio\", \"pytest-cov\", \"pytest-localserver\", \"pyu2f (>=0.1.5)\", \"requests (>=2.20.0,<3.0.0)\", \"responses\", \"urllib3\"]\n urllib3 = [\"packaging\", \"urllib3\"]\n \n [[package]]\n@@ -858,6 +905,7 @@ version = \"1.70.0\"\n description = \"Common protobufs used in Google APIs\"\n optional = false\n python-versions = \">=3.7\"\n+groups = [\"main\"]\n files = [\n     {file = \"googleapis_common_protos-1.70.0-py3-none-any.whl\", hash = \"sha256:b8bfcca8c25a2bb253e0e0b0adaf8c00773e5e6af6fd92397576680b807e0fd8\"},\n     {file = \"googleapis_common_protos-1.70.0.tar.gz\", hash = \"sha256:0e1b44e0ea153e6594f9f394fef15193a68aaaea2d843f83e2742717ca753257\"},\n@@ -875,6 +923,8 @@ version = \"3.2.1\"\n description = \"Lightweight in-process concurrent programming\"\n optional = false\n python-versions = \">=3.9\"\n+groups = [\"main\"]\n+markers = \"python_version < \\\"3.14\\\" and (platform_machine == \\\"aarch64\\\" or platform_machine == \\\"ppc64le\\\" or platform_machine == \\\"x86_64\\\" or platform_machine == \\\"amd64\\\" or platform_machine == \\\"AMD64\\\" or platform_machine == \\\"win32\\\" or platform_machine == \\\"WIN32\\\")\"\n files = [\n     {file = \"greenlet-3.2.1-cp310-cp310-macosx_11_0_universal2.whl\", hash = \"sha256:777c1281aa7c786738683e302db0f55eb4b0077c20f1dc53db8852ffaea0a6b0\"},\n     {file = \"greenlet-3.2.1-cp310-cp310-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:3059c6f286b53ea4711745146ffe5a5c5ff801f62f6c56949446e0f6461f8157\"},\n@@ -943,6 +993,7 @@ version = \"0.23.1\"\n description = \"The official Python library for the groq API\"\n optional = false\n python-versions = \">=3.8\"\n+groups = [\"main\"]\n files = [\n     {file = \"groq-0.23.1-py3-none-any.whl\", hash = \"sha256:05fa38c3d0ad03c19c6185f98f6a73901c2a463e844fd067b79f7b05c8346946\"},\n     {file = \"groq-0.23.1.tar.gz\", hash = \"sha256:952e34895f9bfb78ab479e495d77b32180262e5c42f531ce3a1722d6e5a04dfb\"},\n@@ -962,6 +1013,7 @@ version = \"1.71.0\"\n description = \"HTTP/2-based RPC framework\"\n optional = false\n python-versions = \">=3.9\"\n+groups = [\"main\"]\n files = [\n     {file = \"grpcio-1.71.0-cp310-cp310-linux_armv7l.whl\", hash = \"sha256:c200cb6f2393468142eb50ab19613229dcc7829b5ccee8b658a36005f6669fdd\"},\n     {file = \"grpcio-1.71.0-cp310-cp310-macosx_12_0_universal2.whl\", hash = \"sha256:b2266862c5ad664a380fbbcdbdb8289d71464c42a8c29053820ee78ba0119e5d\"},\n@@ -1025,6 +1077,7 @@ version = \"1.62.3\"\n description = \"Status proto mapping for gRPC\"\n optional = false\n python-versions = \">=3.6\"\n+groups = [\"main\"]\n files = [\n     {file = \"grpcio-status-1.62.3.tar.gz\", hash = \"sha256:289bdd7b2459794a12cf95dc0cb727bd4a1742c37bd823f760236c937e53a485\"},\n     {file = \"grpcio_status-1.62.3-py3-none-any.whl\", hash = \"sha256:f9049b762ba8de6b1086789d8315846e094edac2c50beaf462338b301a8fd4b8\"},\n@@ -1041,6 +1094,7 @@ version = \"0.16.0\"\n description = \"A pure-Python, bring-your-own-I/O implementation of HTTP/1.1\"\n optional = false\n python-versions = \">=3.8\"\n+groups = [\"main\"]\n files = [\n     {file = \"h11-0.16.0-py3-none-any.whl\", hash = \"sha256:63cf8bbe7522de3bf65932fda1d9c2772064ffb3dae62d55932da54b31cb6c86\"},\n     {file = \"h11-0.16.0.tar.gz\", hash = \"sha256:4e35b956cf45792e4caa5885e69fba00bdbc6ffafbfa020300e549b208ee5ff1\"},\n@@ -1052,6 +1106,7 @@ version = \"1.0.9\"\n description = \"A minimal low-level HTTP client.\"\n optional = false\n python-versions = \">=3.8\"\n+groups = [\"main\"]\n files = [\n     {file = \"httpcore-1.0.9-py3-none-any.whl\", hash = \"sha256:2d400746a40668fc9dec9810239072b40b4484b640a8c38fd654a024c7a1bf55\"},\n     {file = \"httpcore-1.0.9.tar.gz\", hash = \"sha256:6e34463af53fd2ab5d807f399a9b45ea31c3dfa2276f15a2c3f00afff6e176e8\"},\n@@ -1073,6 +1128,7 @@ version = \"0.6.4\"\n description = \"A collection of framework independent HTTP protocol utils.\"\n optional = false\n python-versions = \">=3.8.0\"\n+groups = [\"main\"]\n files = [\n     {file = \"httptools-0.6.4-cp310-cp310-macosx_10_9_universal2.whl\", hash = \"sha256:3c73ce323711a6ffb0d247dcd5a550b8babf0f757e86a52558fe5b86d6fefcc0\"},\n     {file = \"httptools-0.6.4-cp310-cp310-macosx_11_0_arm64.whl\", hash = \"sha256:345c288418f0944a6fe67be8e6afa9262b18c7626c3ef3c28adc5eabc06a68da\"},\n@@ -1128,6 +1184,7 @@ version = \"0.27.2\"\n description = \"The next generation HTTP client.\"\n optional = false\n python-versions = \">=3.8\"\n+groups = [\"main\"]\n files = [\n     {file = \"httpx-0.27.2-py3-none-any.whl\", hash = \"sha256:7bb2708e112d8fdd7829cd4243970f0c223274051cb35ee80c03301ee29a3df0\"},\n     {file = \"httpx-0.27.2.tar.gz\", hash = \"sha256:f7c2be1d2f3c3c3160d441802406b206c2b76f5947b11115e6df10c6c65e66c2\"},\n@@ -1141,7 +1198,7 @@ idna = \"*\"\n sniffio = \"*\"\n \n [package.extras]\n-brotli = [\"brotli\", \"brotlicffi\"]\n+brotli = [\"brotli ; platform_python_implementation == \\\"CPython\\\"\", \"brotlicffi ; platform_python_implementation != \\\"CPython\\\"\"]\n cli = [\"click (==8.*)\", \"pygments (==2.*)\", \"rich (>=10,<14)\"]\n http2 = [\"h2 (>=3,<5)\"]\n socks = [\"socksio (==1.*)\"]\n@@ -1153,6 +1210,7 @@ version = \"3.10\"\n description = \"Internationalized Domain Names in Applications (IDNA)\"\n optional = false\n python-versions = \">=3.6\"\n+groups = [\"main\"]\n files = [\n     {file = \"idna-3.10-py3-none-any.whl\", hash = \"sha256:946d195a0d259cbba61165e88e65941f16e9b36ea6ddb97f00452bae8b1287d3\"},\n     {file = \"idna-3.10.tar.gz\", hash = \"sha256:12f65c9b470abda6dc35cf8e63cc574b1c52b11df2c86030af0ac09b01b13ea9\"},\n@@ -1167,6 +1225,7 @@ version = \"2.1.0\"\n description = \"brain-dead simple config-ini parsing\"\n optional = false\n python-versions = \">=3.8\"\n+groups = [\"dev\"]\n files = [\n     {file = \"iniconfig-2.1.0-py3-none-any.whl\", hash = \"sha256:9deba5723312380e77435581c6bf4935c94cbfab9b1ed33ef8d238ea168eb760\"},\n     {file = \"iniconfig-2.1.0.tar.gz\", hash = \"sha256:3abbd2e30b36733fee78f9c7f7308f2d0050e88f0087fd25c2645f63c773e1c7\"},\n@@ -1178,6 +1237,7 @@ version = \"5.13.2\"\n description = \"A Python utility / library to sort Python imports.\"\n optional = false\n python-versions = \">=3.8.0\"\n+groups = [\"dev\"]\n files = [\n     {file = \"isort-5.13.2-py3-none-any.whl\", hash = \"sha256:8ca5e72a8d85860d5a3fa69b8745237f2939afe12dbf656afbcb47fe72d947a6\"},\n     {file = \"isort-5.13.2.tar.gz\", hash = \"sha256:48fdfcb9face5d58a4f6dde2e72a1fb8dcaf8ab26f95ab49fab84c2ddefb0109\"},\n@@ -1192,6 +1252,7 @@ version = \"0.9.0\"\n description = \"Fast iterable JSON parser.\"\n optional = false\n python-versions = \">=3.8\"\n+groups = [\"main\"]\n files = [\n     {file = \"jiter-0.9.0-cp310-cp310-macosx_10_12_x86_64.whl\", hash = \"sha256:816ec9b60fdfd1fec87da1d7ed46c66c44ffec37ab2ef7de5b147b2fce3fd5ad\"},\n     {file = \"jiter-0.9.0-cp310-cp310-macosx_11_0_arm64.whl\", hash = \"sha256:9b1d3086f8a3ee0194ecf2008cf81286a5c3e540d977fa038ff23576c023c0ea\"},\n@@ -1277,6 +1338,7 @@ version = \"1.33\"\n description = \"Apply JSON-Patches (RFC 6902)\"\n optional = false\n python-versions = \">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*, !=3.5.*, !=3.6.*\"\n+groups = [\"main\"]\n files = [\n     {file = \"jsonpatch-1.33-py2.py3-none-any.whl\", hash = \"sha256:0ae28c0cd062bbd8b8ecc26d7d164fbbea9652a1a3693f3b956c1eae5145dade\"},\n     {file = \"jsonpatch-1.33.tar.gz\", hash = \"sha256:9fcd4009c41e6d12348b4a0ff2563ba56a2923a7dfee731d004e212e1ee5030c\"},\n@@ -1291,6 +1353,7 @@ version = \"3.0.0\"\n description = \"Identify specific nodes in a JSON document (RFC 6901)\"\n optional = false\n python-versions = \">=3.7\"\n+groups = [\"main\"]\n files = [\n     {file = \"jsonpointer-3.0.0-py2.py3-none-any.whl\", hash = \"sha256:13e088adc14fca8b6aa8177c044e12701e6ad4b28ff10e65f2267a90109c9942\"},\n     {file = \"jsonpointer-3.0.0.tar.gz\", hash = \"sha256:2b2d729f2091522d61c3b31f82e11870f60b68f43fbc705cb76bf4b832af59ef\"},\n@@ -1302,6 +1365,7 @@ version = \"1.4.8\"\n description = \"A fast implementation of the Cassowary constraint solver\"\n optional = false\n python-versions = \">=3.10\"\n+groups = [\"main\"]\n files = [\n     {file = \"kiwisolver-1.4.8-cp310-cp310-macosx_10_9_universal2.whl\", hash = \"sha256:88c6f252f6816a73b1f8c904f7bbe02fd67c09a69f7cb8a0eecdbf5ce78e63db\"},\n     {file = \"kiwisolver-1.4.8-cp310-cp310-macosx_10_9_x86_64.whl\", hash = \"sha256:c72941acb7b67138f35b879bbe85be0f6c6a70cab78fe3ef6db9c024d9223e5b\"},\n@@ -1391,6 +1455,7 @@ version = \"0.3.0\"\n description = \"Building applications with LLMs through composability\"\n optional = false\n python-versions = \"<4.0,>=3.9\"\n+groups = [\"main\"]\n files = [\n     {file = \"langchain-0.3.0-py3-none-any.whl\", hash = \"sha256:59a75a6a1eb7bfd2a6bf0c7a5816409a8fdc9046187b07af287b23b9899617af\"},\n     {file = \"langchain-0.3.0.tar.gz\", hash = \"sha256:a7c23892440bd1f5b9e029ff0dd709dd881ae927c4c0a3210ac64dba9bbf3f7f\"},\n@@ -1417,6 +1482,7 @@ version = \"0.3.5\"\n description = \"An integration package connecting AnthropicMessages and LangChain\"\n optional = false\n python-versions = \"<4.0,>=3.9\"\n+groups = [\"main\"]\n files = [\n     {file = \"langchain_anthropic-0.3.5-py3-none-any.whl\", hash = \"sha256:bad34b02d7b4bdca9a9471bc391b01269fd8dc4600b83ca2a3e76925b7c27fe6\"},\n     {file = \"langchain_anthropic-0.3.5.tar.gz\", hash = \"sha256:2aa1673511056061680492871f386d68a8b62947e0eb1f15303ef10db16c8357\"},\n@@ -1434,6 +1500,7 @@ version = \"0.3.56\"\n description = \"Building applications with LLMs through composability\"\n optional = false\n python-versions = \"<4.0,>=3.9\"\n+groups = [\"main\"]\n files = [\n     {file = \"langchain_core-0.3.56-py3-none-any.whl\", hash = \"sha256:a20c6aca0fa0da265d96d3b14a5a01828ac5d2d9d27516434873d76f2d4839ed\"},\n     {file = \"langchain_core-0.3.56.tar.gz\", hash = \"sha256:de896585bc56e12652327dcd195227c3739a07e86e587c91a07101e0df11dffe\"},\n@@ -1457,6 +1524,7 @@ version = \"0.1.3\"\n description = \"An integration package connecting DeepSeek and LangChain\"\n optional = false\n python-versions = \"<4.0,>=3.9\"\n+groups = [\"main\"]\n files = [\n     {file = \"langchain_deepseek-0.1.3-py3-none-any.whl\", hash = \"sha256:8588e826371b417fca65c02f4273b4061eb9815a7bfcd5eb05acaa40d603aa89\"},\n     {file = \"langchain_deepseek-0.1.3.tar.gz\", hash = \"sha256:89dd6aa120fb50dcfcd3d593626d34c1c40deefe4510710d0807fcc19481adf5\"},\n@@ -1472,6 +1540,7 @@ version = \"2.1.3\"\n description = \"An integration package connecting Google's genai package and LangChain\"\n optional = false\n python-versions = \"<4.0,>=3.9\"\n+groups = [\"main\"]\n files = [\n     {file = \"langchain_google_genai-2.1.3-py3-none-any.whl\", hash = \"sha256:adf222931ac7af543f4013751a9b7dbd9ed637fb4eb3e4e0cd7e1d5d7e066d36\"},\n     {file = \"langchain_google_genai-2.1.3.tar.gz\", hash = \"sha256:0d4e2abf01a7594a9420d3569cf2cd4239a01cc24c6698d3c2c92a072b9b7b4a\"},\n@@ -1489,6 +1558,7 @@ version = \"0.2.3\"\n description = \"An integration package connecting Groq and LangChain\"\n optional = false\n python-versions = \"<4.0,>=3.9\"\n+groups = [\"main\"]\n files = [\n     {file = \"langchain_groq-0.2.3-py3-none-any.whl\", hash = \"sha256:3572c812acc1478ab0670c48eb9a135c95f47631190da750e48408267462a12d\"},\n     {file = \"langchain_groq-0.2.3.tar.gz\", hash = \"sha256:f94810fe734c9402b36273ddc3509eaa67f12a7d06b666c6ca472ab0bfdf37b7\"},\n@@ -1504,6 +1574,7 @@ version = \"0.2.3\"\n description = \"An integration package connecting Ollama and LangChain\"\n optional = false\n python-versions = \"<4.0,>=3.9\"\n+groups = [\"main\"]\n files = [\n     {file = \"langchain_ollama-0.2.3-py3-none-any.whl\", hash = \"sha256:c47700ca68b013358b1e954493ecafb3bd10fa2cda71a9f15ba7897587a9aab2\"},\n     {file = \"langchain_ollama-0.2.3.tar.gz\", hash = \"sha256:d13fe8735176b652ca6e6656d7902c1265e8c0601097569f7c95433f3d034b38\"},\n@@ -1519,6 +1590,7 @@ version = \"0.3.14\"\n description = \"An integration package connecting OpenAI and LangChain\"\n optional = false\n python-versions = \"<4.0,>=3.9\"\n+groups = [\"main\"]\n files = [\n     {file = \"langchain_openai-0.3.14-py3-none-any.whl\", hash = \"sha256:b8e648d2d7678a5540818199d141ff727c6f1514294b3e1e999a95357c9d66a0\"},\n     {file = \"langchain_openai-0.3.14.tar.gz\", hash = \"sha256:0662db78620c2e5c3ccfc1c36dc959c0ddc80e6bdf7ef81632cbf4b2cc9b9461\"},\n@@ -1535,6 +1607,7 @@ version = \"0.3.8\"\n description = \"LangChain text splitting utilities\"\n optional = false\n python-versions = \"<4.0,>=3.9\"\n+groups = [\"main\"]\n files = [\n     {file = \"langchain_text_splitters-0.3.8-py3-none-any.whl\", hash = \"sha256:e75cc0f4ae58dcf07d9f18776400cf8ade27fadd4ff6d264df6278bb302f6f02\"},\n     {file = \"langchain_text_splitters-0.3.8.tar.gz\", hash = \"sha256:116d4b9f2a22dda357d0b79e30acf005c5518177971c66a9f1ab0edfdb0f912e\"},\n@@ -1549,6 +1622,7 @@ version = \"0.2.56\"\n description = \"Building stateful, multi-actor applications with LLMs\"\n optional = false\n python-versions = \"<4.0,>=3.9.0\"\n+groups = [\"main\"]\n files = [\n     {file = \"langgraph-0.2.56-py3-none-any.whl\", hash = \"sha256:ad8a4b772e34dc0137e890bb6ced596a39a1e684af66250c1e7c8150dbe90e9c\"},\n     {file = \"langgraph-0.2.56.tar.gz\", hash = \"sha256:af10b1ffd10d52fd4072a73f154b8c2513c0b22e5bd5d20f4567dfeecab98d1e\"},\n@@ -1565,6 +1639,7 @@ version = \"2.0.25\"\n description = \"Library with base interfaces for LangGraph checkpoint savers.\"\n optional = false\n python-versions = \"<4.0.0,>=3.9.0\"\n+groups = [\"main\"]\n files = [\n     {file = \"langgraph_checkpoint-2.0.25-py3-none-any.whl\", hash = \"sha256:23416a0f5bc9dd712ac10918fc13e8c9c4530c419d2985a441df71a38fc81602\"},\n     {file = \"langgraph_checkpoint-2.0.25.tar.gz\", hash = \"sha256:77a63cab7b5f84dec1d49db561326ec28bdd48bcefb7fe4ac372069d2609287b\"},\n@@ -1580,6 +1655,7 @@ version = \"0.1.63\"\n description = \"SDK for interacting with LangGraph API\"\n optional = false\n python-versions = \"<4.0.0,>=3.9.0\"\n+groups = [\"main\"]\n files = [\n     {file = \"langgraph_sdk-0.1.63-py3-none-any.whl\", hash = \"sha256:6fb78a7fc6a30eea43bd0d6401dbc9e3263d0d4c03f63c04035980da7e586b05\"},\n     {file = \"langgraph_sdk-0.1.63.tar.gz\", hash = \"sha256:62bf2cc31e5aa6c5b9011ee1702bcf1e36e67e142a60bd97af2611162fb58e18\"},\n@@ -1595,6 +1671,7 @@ version = \"0.1.147\"\n description = \"Client library to connect to the LangSmith LLM Tracing and Evaluation Platform.\"\n optional = false\n python-versions = \"<4.0,>=3.8.1\"\n+groups = [\"main\"]\n files = [\n     {file = \"langsmith-0.1.147-py3-none-any.whl\", hash = \"sha256:7166fc23b965ccf839d64945a78e9f1157757add228b086141eb03a60d699a15\"},\n     {file = \"langsmith-0.1.147.tar.gz\", hash = \"sha256:2e933220318a4e73034657103b3b1a3a6109cc5db3566a7e8e03be8d6d7def7a\"},\n@@ -1619,6 +1696,7 @@ version = \"1.3.10\"\n description = \"A super-fast templating language that borrows the best ideas from the existing templating languages.\"\n optional = false\n python-versions = \">=3.8\"\n+groups = [\"main\"]\n files = [\n     {file = \"mako-1.3.10-py3-none-any.whl\", hash = \"sha256:baef24a52fc4fc514a0887ac600f9f1cff3d82c61d4d700a1fa84d597b88db59\"},\n     {file = \"mako-1.3.10.tar.gz\", hash = \"sha256:99579a6f39583fa7e5630a28c3c1f440e4e97a414b80372649c0ce338da2ea28\"},\n@@ -1638,6 +1716,7 @@ version = \"3.0.0\"\n description = \"Python port of markdown-it. Markdown parsing, done right!\"\n optional = false\n python-versions = \">=3.8\"\n+groups = [\"main\"]\n files = [\n     {file = \"markdown-it-py-3.0.0.tar.gz\", hash = \"sha256:e3f60a94fa066dc52ec76661e37c851cb232d92f9886b15cb560aaada2df8feb\"},\n     {file = \"markdown_it_py-3.0.0-py3-none-any.whl\", hash = \"sha256:355216845c60bd96232cd8d8c40e8f9765cc86f46880e43a8fd22dc1a1a8cab1\"},\n@@ -1662,6 +1741,7 @@ version = \"3.0.2\"\n description = \"Safely add untrusted strings to HTML/XML markup.\"\n optional = false\n python-versions = \">=3.9\"\n+groups = [\"main\"]\n files = [\n     {file = \"MarkupSafe-3.0.2-cp310-cp310-macosx_10_9_universal2.whl\", hash = \"sha256:7e94c425039cde14257288fd61dcfb01963e658efbc0ff54f5306b06054700f8\"},\n     {file = \"MarkupSafe-3.0.2-cp310-cp310-macosx_11_0_arm64.whl\", hash = \"sha256:9e2d922824181480953426608b81967de705c3cef4d1af983af849d7bd619158\"},\n@@ -1732,6 +1812,7 @@ version = \"3.10.1\"\n description = \"Python plotting package\"\n optional = false\n python-versions = \">=3.10\"\n+groups = [\"main\"]\n files = [\n     {file = \"matplotlib-3.10.1-cp310-cp310-macosx_10_12_x86_64.whl\", hash = \"sha256:ff2ae14910be903f4a24afdbb6d7d3a6c44da210fc7d42790b87aeac92238a16\"},\n     {file = \"matplotlib-3.10.1-cp310-cp310-macosx_11_0_arm64.whl\", hash = \"sha256:0721a3fd3d5756ed593220a8b86808a36c5031fce489adb5b31ee6dbb47dd5b2\"},\n@@ -1789,6 +1870,7 @@ version = \"0.7.0\"\n description = \"McCabe checker, plugin for flake8\"\n optional = false\n python-versions = \">=3.6\"\n+groups = [\"dev\"]\n files = [\n     {file = \"mccabe-0.7.0-py2.py3-none-any.whl\", hash = \"sha256:6c2d30ab6be0e4a46919781807b4f0d834ebdd6c6e3dca0bda5a15f863427b6e\"},\n     {file = \"mccabe-0.7.0.tar.gz\", hash = \"sha256:348e0240c33b60bbdf4e523192ef919f28cb2c3d7d5c7794f74009290f236325\"},\n@@ -1800,17 +1882,88 @@ version = \"0.1.2\"\n description = \"Markdown URL utilities\"\n optional = false\n python-versions = \">=3.7\"\n+groups = [\"main\"]\n files = [\n     {file = \"mdurl-0.1.2-py3-none-any.whl\", hash = \"sha256:84008a41e51615a49fc9966191ff91509e3c40b939176e643fd50a5c2196b8f8\"},\n     {file = \"mdurl-0.1.2.tar.gz\", hash = \"sha256:bb413d29f5eea38f31dd4754dd7377d4465116fb207585f97bf925588687c1ba\"},\n ]\n \n+[[package]]\n+name = \"msgpack\"\n+version = \"1.1.1\"\n+description = \"MessagePack serializer\"\n+optional = false\n+python-versions = \">=3.8\"\n+groups = [\"main\"]\n+files = [\n+    {file = \"msgpack-1.1.1-cp310-cp310-macosx_10_9_x86_64.whl\", hash = \"sha256:353b6fc0c36fde68b661a12949d7d49f8f51ff5fa019c1e47c87c4ff34b080ed\"},\n+    {file = \"msgpack-1.1.1-cp310-cp310-macosx_11_0_arm64.whl\", hash = \"sha256:79c408fcf76a958491b4e3b103d1c417044544b68e96d06432a189b43d1215c8\"},\n+    {file = \"msgpack-1.1.1-cp310-cp310-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:78426096939c2c7482bf31ef15ca219a9e24460289c00dd0b94411040bb73ad2\"},\n+    {file = \"msgpack-1.1.1-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:8b17ba27727a36cb73aabacaa44b13090feb88a01d012c0f4be70c00f75048b4\"},\n+    {file = \"msgpack-1.1.1-cp310-cp310-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:7a17ac1ea6ec3c7687d70201cfda3b1e8061466f28f686c24f627cae4ea8efd0\"},\n+    {file = \"msgpack-1.1.1-cp310-cp310-musllinux_1_2_aarch64.whl\", hash = \"sha256:88d1e966c9235c1d4e2afac21ca83933ba59537e2e2727a999bf3f515ca2af26\"},\n+    {file = \"msgpack-1.1.1-cp310-cp310-musllinux_1_2_i686.whl\", hash = \"sha256:f6d58656842e1b2ddbe07f43f56b10a60f2ba5826164910968f5933e5178af75\"},\n+    {file = \"msgpack-1.1.1-cp310-cp310-musllinux_1_2_x86_64.whl\", hash = \"sha256:96decdfc4adcbc087f5ea7ebdcfd3dee9a13358cae6e81d54be962efc38f6338\"},\n+    {file = \"msgpack-1.1.1-cp310-cp310-win32.whl\", hash = \"sha256:6640fd979ca9a212e4bcdf6eb74051ade2c690b862b679bfcb60ae46e6dc4bfd\"},\n+    {file = \"msgpack-1.1.1-cp310-cp310-win_amd64.whl\", hash = \"sha256:8b65b53204fe1bd037c40c4148d00ef918eb2108d24c9aaa20bc31f9810ce0a8\"},\n+    {file = \"msgpack-1.1.1-cp311-cp311-macosx_10_9_x86_64.whl\", hash = \"sha256:71ef05c1726884e44f8b1d1773604ab5d4d17729d8491403a705e649116c9558\"},\n+    {file = \"msgpack-1.1.1-cp311-cp311-macosx_11_0_arm64.whl\", hash = \"sha256:36043272c6aede309d29d56851f8841ba907a1a3d04435e43e8a19928e243c1d\"},\n+    {file = \"msgpack-1.1.1-cp311-cp311-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:a32747b1b39c3ac27d0670122b57e6e57f28eefb725e0b625618d1b59bf9d1e0\"},\n+    {file = \"msgpack-1.1.1-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:8a8b10fdb84a43e50d38057b06901ec9da52baac6983d3f709d8507f3889d43f\"},\n+    {file = \"msgpack-1.1.1-cp311-cp311-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:ba0c325c3f485dc54ec298d8b024e134acf07c10d494ffa24373bea729acf704\"},\n+    {file = \"msgpack-1.1.1-cp311-cp311-musllinux_1_2_aarch64.whl\", hash = \"sha256:88daaf7d146e48ec71212ce21109b66e06a98e5e44dca47d853cbfe171d6c8d2\"},\n+    {file = \"msgpack-1.1.1-cp311-cp311-musllinux_1_2_i686.whl\", hash = \"sha256:d8b55ea20dc59b181d3f47103f113e6f28a5e1c89fd5b67b9140edb442ab67f2\"},\n+    {file = \"msgpack-1.1.1-cp311-cp311-musllinux_1_2_x86_64.whl\", hash = \"sha256:4a28e8072ae9779f20427af07f53bbb8b4aa81151054e882aee333b158da8752\"},\n+    {file = \"msgpack-1.1.1-cp311-cp311-win32.whl\", hash = \"sha256:7da8831f9a0fdb526621ba09a281fadc58ea12701bc709e7b8cbc362feabc295\"},\n+    {file = \"msgpack-1.1.1-cp311-cp311-win_amd64.whl\", hash = \"sha256:5fd1b58e1431008a57247d6e7cc4faa41c3607e8e7d4aaf81f7c29ea013cb458\"},\n+    {file = \"msgpack-1.1.1-cp312-cp312-macosx_10_13_x86_64.whl\", hash = \"sha256:ae497b11f4c21558d95de9f64fff7053544f4d1a17731c866143ed6bb4591238\"},\n+    {file = \"msgpack-1.1.1-cp312-cp312-macosx_11_0_arm64.whl\", hash = \"sha256:33be9ab121df9b6b461ff91baac6f2731f83d9b27ed948c5b9d1978ae28bf157\"},\n+    {file = \"msgpack-1.1.1-cp312-cp312-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:6f64ae8fe7ffba251fecb8408540c34ee9df1c26674c50c4544d72dbf792e5ce\"},\n+    {file = \"msgpack-1.1.1-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:a494554874691720ba5891c9b0b39474ba43ffb1aaf32a5dac874effb1619e1a\"},\n+    {file = \"msgpack-1.1.1-cp312-cp312-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:cb643284ab0ed26f6957d969fe0dd8bb17beb567beb8998140b5e38a90974f6c\"},\n+    {file = \"msgpack-1.1.1-cp312-cp312-musllinux_1_2_aarch64.whl\", hash = \"sha256:d275a9e3c81b1093c060c3837e580c37f47c51eca031f7b5fb76f7b8470f5f9b\"},\n+    {file = \"msgpack-1.1.1-cp312-cp312-musllinux_1_2_i686.whl\", hash = \"sha256:4fd6b577e4541676e0cc9ddc1709d25014d3ad9a66caa19962c4f5de30fc09ef\"},\n+    {file = \"msgpack-1.1.1-cp312-cp312-musllinux_1_2_x86_64.whl\", hash = \"sha256:bb29aaa613c0a1c40d1af111abf025f1732cab333f96f285d6a93b934738a68a\"},\n+    {file = \"msgpack-1.1.1-cp312-cp312-win32.whl\", hash = \"sha256:870b9a626280c86cff9c576ec0d9cbcc54a1e5ebda9cd26dab12baf41fee218c\"},\n+    {file = \"msgpack-1.1.1-cp312-cp312-win_amd64.whl\", hash = \"sha256:5692095123007180dca3e788bb4c399cc26626da51629a31d40207cb262e67f4\"},\n+    {file = \"msgpack-1.1.1-cp313-cp313-macosx_10_13_x86_64.whl\", hash = \"sha256:3765afa6bd4832fc11c3749be4ba4b69a0e8d7b728f78e68120a157a4c5d41f0\"},\n+    {file = \"msgpack-1.1.1-cp313-cp313-macosx_11_0_arm64.whl\", hash = \"sha256:8ddb2bcfd1a8b9e431c8d6f4f7db0773084e107730ecf3472f1dfe9ad583f3d9\"},\n+    {file = \"msgpack-1.1.1-cp313-cp313-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:196a736f0526a03653d829d7d4c5500a97eea3648aebfd4b6743875f28aa2af8\"},\n+    {file = \"msgpack-1.1.1-cp313-cp313-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:9d592d06e3cc2f537ceeeb23d38799c6ad83255289bb84c2e5792e5a8dea268a\"},\n+    {file = \"msgpack-1.1.1-cp313-cp313-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:4df2311b0ce24f06ba253fda361f938dfecd7b961576f9be3f3fbd60e87130ac\"},\n+    {file = \"msgpack-1.1.1-cp313-cp313-musllinux_1_2_aarch64.whl\", hash = \"sha256:e4141c5a32b5e37905b5940aacbc59739f036930367d7acce7a64e4dec1f5e0b\"},\n+    {file = \"msgpack-1.1.1-cp313-cp313-musllinux_1_2_i686.whl\", hash = \"sha256:b1ce7f41670c5a69e1389420436f41385b1aa2504c3b0c30620764b15dded2e7\"},\n+    {file = \"msgpack-1.1.1-cp313-cp313-musllinux_1_2_x86_64.whl\", hash = \"sha256:4147151acabb9caed4e474c3344181e91ff7a388b888f1e19ea04f7e73dc7ad5\"},\n+    {file = \"msgpack-1.1.1-cp313-cp313-win32.whl\", hash = \"sha256:500e85823a27d6d9bba1d057c871b4210c1dd6fb01fbb764e37e4e8847376323\"},\n+    {file = \"msgpack-1.1.1-cp313-cp313-win_amd64.whl\", hash = \"sha256:6d489fba546295983abd142812bda76b57e33d0b9f5d5b71c09a583285506f69\"},\n+    {file = \"msgpack-1.1.1-cp38-cp38-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:bba1be28247e68994355e028dcd668316db30c1f758d3241a7b903ac78dcd285\"},\n+    {file = \"msgpack-1.1.1-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:b8f93dcddb243159c9e4109c9750ba5b335ab8d48d9522c5308cd05d7e3ce600\"},\n+    {file = \"msgpack-1.1.1-cp38-cp38-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:2fbbc0b906a24038c9958a1ba7ae0918ad35b06cb449d398b76a7d08470b0ed9\"},\n+    {file = \"msgpack-1.1.1-cp38-cp38-musllinux_1_2_aarch64.whl\", hash = \"sha256:61e35a55a546a1690d9d09effaa436c25ae6130573b6ee9829c37ef0f18d5e78\"},\n+    {file = \"msgpack-1.1.1-cp38-cp38-musllinux_1_2_i686.whl\", hash = \"sha256:1abfc6e949b352dadf4bce0eb78023212ec5ac42f6abfd469ce91d783c149c2a\"},\n+    {file = \"msgpack-1.1.1-cp38-cp38-musllinux_1_2_x86_64.whl\", hash = \"sha256:996f2609ddf0142daba4cefd767d6db26958aac8439ee41db9cc0db9f4c4c3a6\"},\n+    {file = \"msgpack-1.1.1-cp38-cp38-win32.whl\", hash = \"sha256:4d3237b224b930d58e9d83c81c0dba7aacc20fcc2f89c1e5423aa0529a4cd142\"},\n+    {file = \"msgpack-1.1.1-cp38-cp38-win_amd64.whl\", hash = \"sha256:da8f41e602574ece93dbbda1fab24650d6bf2a24089f9e9dbb4f5730ec1e58ad\"},\n+    {file = \"msgpack-1.1.1-cp39-cp39-macosx_10_9_x86_64.whl\", hash = \"sha256:f5be6b6bc52fad84d010cb45433720327ce886009d862f46b26d4d154001994b\"},\n+    {file = \"msgpack-1.1.1-cp39-cp39-macosx_11_0_arm64.whl\", hash = \"sha256:3a89cd8c087ea67e64844287ea52888239cbd2940884eafd2dcd25754fb72232\"},\n+    {file = \"msgpack-1.1.1-cp39-cp39-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:1d75f3807a9900a7d575d8d6674a3a47e9f227e8716256f35bc6f03fc597ffbf\"},\n+    {file = \"msgpack-1.1.1-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:d182dac0221eb8faef2e6f44701812b467c02674a322c739355c39e94730cdbf\"},\n+    {file = \"msgpack-1.1.1-cp39-cp39-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:1b13fe0fb4aac1aa5320cd693b297fe6fdef0e7bea5518cbc2dd5299f873ae90\"},\n+    {file = \"msgpack-1.1.1-cp39-cp39-musllinux_1_2_aarch64.whl\", hash = \"sha256:435807eeb1bc791ceb3247d13c79868deb22184e1fc4224808750f0d7d1affc1\"},\n+    {file = \"msgpack-1.1.1-cp39-cp39-musllinux_1_2_i686.whl\", hash = \"sha256:4835d17af722609a45e16037bb1d4d78b7bdf19d6c0128116d178956618c4e88\"},\n+    {file = \"msgpack-1.1.1-cp39-cp39-musllinux_1_2_x86_64.whl\", hash = \"sha256:a8ef6e342c137888ebbfb233e02b8fbd689bb5b5fcc59b34711ac47ebd504478\"},\n+    {file = \"msgpack-1.1.1-cp39-cp39-win32.whl\", hash = \"sha256:61abccf9de335d9efd149e2fff97ed5974f2481b3353772e8e2dd3402ba2bd57\"},\n+    {file = \"msgpack-1.1.1-cp39-cp39-win_amd64.whl\", hash = \"sha256:40eae974c873b2992fd36424a5d9407f93e97656d999f43fca9d29f820899084\"},\n+    {file = \"msgpack-1.1.1.tar.gz\", hash = \"sha256:77b79ce34a2bdab2594f490c8e80dd62a02d650b91a75159a63ec413b8d104cd\"},\n+]\n+\n [[package]]\n name = \"multidict\"\n version = \"6.4.3\"\n description = \"multidict implementation\"\n optional = false\n python-versions = \">=3.9\"\n+groups = [\"main\"]\n files = [\n     {file = \"multidict-6.4.3-cp310-cp310-macosx_10_9_universal2.whl\", hash = \"sha256:32a998bd8a64ca48616eac5a8c1cc4fa38fb244a3facf2eeb14abe186e0f6cc5\"},\n     {file = \"multidict-6.4.3-cp310-cp310-macosx_10_9_x86_64.whl\", hash = \"sha256:a54ec568f1fc7f3c313c2f3b16e5db346bf3660e1309746e7fccbbfded856188\"},\n@@ -1924,6 +2077,7 @@ version = \"1.1.0\"\n description = \"Type system extensions for programs checked with the mypy type checker.\"\n optional = false\n python-versions = \">=3.8\"\n+groups = [\"dev\"]\n files = [\n     {file = \"mypy_extensions-1.1.0-py3-none-any.whl\", hash = \"sha256:1be4cccdb0f2482337c4743e60421de3a356cd97508abadd57d47403e94f5505\"},\n     {file = \"mypy_extensions-1.1.0.tar.gz\", hash = \"sha256:52e68efc3284861e772bbcd66823fde5ae21fd2fdb51c62a211403730b916558\"},\n@@ -1935,6 +2089,7 @@ version = \"1.26.4\"\n description = \"Fundamental package for array computing in Python\"\n optional = false\n python-versions = \">=3.9\"\n+groups = [\"main\"]\n files = [\n     {file = \"numpy-1.26.4-cp310-cp310-macosx_10_9_x86_64.whl\", hash = \"sha256:9ff0f4f29c51e2803569d7a51c2304de5554655a60c5d776e35b4a41413830d0\"},\n     {file = \"numpy-1.26.4-cp310-cp310-macosx_11_0_arm64.whl\", hash = \"sha256:2e4ee3380d6de9c9ec04745830fd9e2eccb3e6cf790d39d7b98ffd19b0dd754a\"},\n@@ -1980,6 +2135,7 @@ version = \"0.4.8\"\n description = \"The official Python client for Ollama.\"\n optional = false\n python-versions = \"<4.0,>=3.8\"\n+groups = [\"main\"]\n files = [\n     {file = \"ollama-0.4.8-py3-none-any.whl\", hash = \"sha256:04312af2c5e72449aaebac4a2776f52ef010877c554103419d3f36066fe8af4c\"},\n     {file = \"ollama-0.4.8.tar.gz\", hash = \"sha256:1121439d49b96fa8339842965d0616eba5deb9f8c790786cdf4c0b3df4833802\"},\n@@ -1995,6 +2151,7 @@ version = \"1.76.2\"\n description = \"The official Python library for the openai API\"\n optional = false\n python-versions = \">=3.8\"\n+groups = [\"main\"]\n files = [\n     {file = \"openai-1.76.2-py3-none-any.whl\", hash = \"sha256:9c1d9ad59e6e3bea7205eedc9ca66eeebae18d47b527e505a2b0d2fb1538e26e\"},\n     {file = \"openai-1.76.2.tar.gz\", hash = \"sha256:f430c8b848775907405c6eff54621254c96f6444c593c097e0cc3a9f8fdda96f\"},\n@@ -2021,6 +2178,7 @@ version = \"3.10.17\"\n description = \"Fast, correct Python JSON library supporting dataclasses, datetimes, and numpy\"\n optional = false\n python-versions = \">=3.9\"\n+groups = [\"main\"]\n files = [\n     {file = \"orjson-3.10.17-cp310-cp310-macosx_10_15_x86_64.macosx_11_0_arm64.macosx_10_15_universal2.whl\", hash = \"sha256:bc399cf138a0201d0bf2399b44195d33a0a5aee149dab114340da0d766c88b95\"},\n     {file = \"orjson-3.10.17-cp310-cp310-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:59225b27b72e0e1626d869f7b987da6c74f9b6026cf9a87c1cdaf74ca9f7b8c0\"},\n@@ -2102,6 +2260,7 @@ version = \"1.9.1\"\n description = \"Fast, correct Python msgpack library supporting dataclasses, datetimes, and numpy\"\n optional = false\n python-versions = \">=3.9\"\n+groups = [\"main\"]\n files = [\n     {file = \"ormsgpack-1.9.1-cp310-cp310-macosx_10_12_x86_64.macosx_11_0_arm64.macosx_10_12_universal2.whl\", hash = \"sha256:f1f804fd9c0fd84213a6022c34172f82323b34afa7052a4af18797582cf56365\"},\n     {file = \"ormsgpack-1.9.1-cp310-cp310-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:eab5cec99c46276b37071d570aab98603f3d0309b3818da3247eb64bb95e5cfc\"},\n@@ -2152,6 +2311,7 @@ version = \"24.2\"\n description = \"Core utilities for Python packages\"\n optional = false\n python-versions = \">=3.8\"\n+groups = [\"main\", \"dev\"]\n files = [\n     {file = \"packaging-24.2-py3-none-any.whl\", hash = \"sha256:09abb1bccd265c01f4a3aa3f7a7db064b36514d2cba19a2f694fe6150451a759\"},\n     {file = \"packaging-24.2.tar.gz\", hash = \"sha256:c228a6dc5e932d346bc5739379109d49e8853dd8223571c7c5b55260edc0b97f\"},\n@@ -2163,6 +2323,7 @@ version = \"2.2.3\"\n description = \"Powerful data structures for data analysis, time series, and statistics\"\n optional = false\n python-versions = \">=3.9\"\n+groups = [\"main\"]\n files = [\n     {file = \"pandas-2.2.3-cp310-cp310-macosx_10_9_x86_64.whl\", hash = \"sha256:1948ddde24197a0f7add2bdc4ca83bf2b1ef84a1bc8ccffd95eda17fd836ecb5\"},\n     {file = \"pandas-2.2.3-cp310-cp310-macosx_11_0_arm64.whl\", hash = \"sha256:381175499d3802cde0eabbaf6324cce0c4f5d52ca6f8c377c29ad442f50f6348\"},\n@@ -2248,6 +2409,7 @@ version = \"0.12.1\"\n description = \"Utility library for gitignore style pattern matching of file paths.\"\n optional = false\n python-versions = \">=3.8\"\n+groups = [\"dev\"]\n files = [\n     {file = \"pathspec-0.12.1-py3-none-any.whl\", hash = \"sha256:a0d503e138a4c123b27490a4f7beda6a01c6f288df0e4a8b79c7eb0dc7b4cc08\"},\n     {file = \"pathspec-0.12.1.tar.gz\", hash = \"sha256:a482d51503a1ab33b1c67a6c3813a26953dbdc71c31dacaef9a838c4e29f5712\"},\n@@ -2259,6 +2421,7 @@ version = \"11.2.1\"\n description = \"Python Imaging Library (Fork)\"\n optional = false\n python-versions = \">=3.9\"\n+groups = [\"main\"]\n files = [\n     {file = \"pillow-11.2.1-cp310-cp310-macosx_10_10_x86_64.whl\", hash = \"sha256:d57a75d53922fc20c165016a20d9c44f73305e67c351bbc60d1adaf662e74047\"},\n     {file = \"pillow-11.2.1-cp310-cp310-macosx_11_0_arm64.whl\", hash = \"sha256:127bf6ac4a5b58b3d32fc8289656f77f80567d65660bc46f72c0d77e6600cc95\"},\n@@ -2349,7 +2512,7 @@ fpx = [\"olefile\"]\n mic = [\"olefile\"]\n test-arrow = [\"pyarrow\"]\n tests = [\"check-manifest\", \"coverage (>=7.4.2)\", \"defusedxml\", \"markdown2\", \"olefile\", \"packaging\", \"pyroma\", \"pytest\", \"pytest-cov\", \"pytest-timeout\", \"trove-classifiers (>=2024.10.12)\"]\n-typing = [\"typing-extensions\"]\n+typing = [\"typing-extensions ; python_version < \\\"3.10\\\"\"]\n xmp = [\"defusedxml\"]\n \n [[package]]\n@@ -2358,6 +2521,7 @@ version = \"4.3.7\"\n description = \"A small Python package for determining appropriate platform-specific dirs, e.g. a `user data dir`.\"\n optional = false\n python-versions = \">=3.9\"\n+groups = [\"dev\"]\n files = [\n     {file = \"platformdirs-4.3.7-py3-none-any.whl\", hash = \"sha256:a03875334331946f13c549dbd8f4bac7a13a50a895a0eb1e8c6a8ace80d40a94\"},\n     {file = \"platformdirs-4.3.7.tar.gz\", hash = \"sha256:eb437d586b6a0986388f0d6f74aa0cde27b48d0e3d66843640bfb6bdcdb6e351\"},\n@@ -2374,6 +2538,7 @@ version = \"1.5.0\"\n description = \"plugin and hook calling mechanisms for python\"\n optional = false\n python-versions = \">=3.8\"\n+groups = [\"dev\"]\n files = [\n     {file = \"pluggy-1.5.0-py3-none-any.whl\", hash = \"sha256:44e1ad92c8ca002de6377e165f3e0f1be63266ab4d554740532335b9d75ea669\"},\n     {file = \"pluggy-1.5.0.tar.gz\", hash = \"sha256:2cffa88e94fdc978c4c574f15f9e59b7f4201d439195c3715ca9e2486f1d0cf1\"},\n@@ -2389,6 +2554,7 @@ version = \"3.0.51\"\n description = \"Library for building powerful interactive command lines in Python\"\n optional = false\n python-versions = \">=3.8\"\n+groups = [\"main\"]\n files = [\n     {file = \"prompt_toolkit-3.0.51-py3-none-any.whl\", hash = \"sha256:52742911fde84e2d423e2f9a4cf1de7d7ac4e51958f648d9540e0fb8db077b07\"},\n     {file = \"prompt_toolkit-3.0.51.tar.gz\", hash = \"sha256:931a162e3b27fc90c86f1b48bb1fb2c528c2761475e57c9c06de13311c7b54ed\"},\n@@ -2403,6 +2569,7 @@ version = \"0.3.1\"\n description = \"Accelerated property cache\"\n optional = false\n python-versions = \">=3.9\"\n+groups = [\"main\"]\n files = [\n     {file = \"propcache-0.3.1-cp310-cp310-macosx_10_9_universal2.whl\", hash = \"sha256:f27785888d2fdd918bc36de8b8739f2d6c791399552333721b58193f68ea3e98\"},\n     {file = \"propcache-0.3.1-cp310-cp310-macosx_10_9_x86_64.whl\", hash = \"sha256:d4e89cde74154c7b5957f87a355bb9c8ec929c167b59c83d90654ea36aeb6180\"},\n@@ -2510,6 +2677,7 @@ version = \"1.26.1\"\n description = \"Beautiful, Pythonic protocol buffers\"\n optional = false\n python-versions = \">=3.7\"\n+groups = [\"main\"]\n files = [\n     {file = \"proto_plus-1.26.1-py3-none-any.whl\", hash = \"sha256:13285478c2dcf2abb829db158e1047e2f1e8d63a077d94263c2b88b043c75a66\"},\n     {file = \"proto_plus-1.26.1.tar.gz\", hash = \"sha256:21a515a4c4c0088a773899e23c7bbade3d18f9c66c73edd4c7ee3816bc96a012\"},\n@@ -2527,6 +2695,7 @@ version = \"6.30.2\"\n description = \"\"\n optional = false\n python-versions = \">=3.9\"\n+groups = [\"main\"]\n files = [\n     {file = \"protobuf-6.30.2-cp310-abi3-win32.whl\", hash = \"sha256:b12ef7df7b9329886e66404bef5e9ce6a26b54069d7f7436a0853ccdeb91c103\"},\n     {file = \"protobuf-6.30.2-cp310-abi3-win_amd64.whl\", hash = \"sha256:7653c99774f73fe6b9301b87da52af0e69783a2e371e8b599b3e9cb4da4b12b9\"},\n@@ -2545,6 +2714,7 @@ version = \"0.6.1\"\n description = \"Pure-Python implementation of ASN.1 types and DER/BER/CER codecs (X.208)\"\n optional = false\n python-versions = \">=3.8\"\n+groups = [\"main\"]\n files = [\n     {file = \"pyasn1-0.6.1-py3-none-any.whl\", hash = \"sha256:0d632f46f2ba09143da3a8afe9e33fb6f92fa2320ab7e886e2d0f7672af84629\"},\n     {file = \"pyasn1-0.6.1.tar.gz\", hash = \"sha256:6f580d2bdd84365380830acf45550f2511469f673cb4a5ae3857a3170128b034\"},\n@@ -2556,6 +2726,7 @@ version = \"0.4.2\"\n description = \"A collection of ASN.1-based protocols modules\"\n optional = false\n python-versions = \">=3.8\"\n+groups = [\"main\"]\n files = [\n     {file = \"pyasn1_modules-0.4.2-py3-none-any.whl\", hash = \"sha256:29253a9207ce32b64c3ac6600edc75368f98473906e8fd1043bd6b5b1de2c14a\"},\n     {file = \"pyasn1_modules-0.4.2.tar.gz\", hash = \"sha256:677091de870a80aae844b1ca6134f54652fa2c8c5a52aa396440ac3106e941e6\"},\n@@ -2570,6 +2741,7 @@ version = \"2.11.1\"\n description = \"Python style guide checker\"\n optional = false\n python-versions = \">=3.8\"\n+groups = [\"dev\"]\n files = [\n     {file = \"pycodestyle-2.11.1-py2.py3-none-any.whl\", hash = \"sha256:44fe31000b2d866f2e41841b18528a505fbd7fef9017b04eff4e2648a0fadc67\"},\n     {file = \"pycodestyle-2.11.1.tar.gz\", hash = \"sha256:41ba0e7afc9752dfb53ced5489e89f8186be00e599e712660695b7a75ff2663f\"},\n@@ -2581,6 +2753,7 @@ version = \"2.11.4\"\n description = \"Data validation using Python type hints\"\n optional = false\n python-versions = \">=3.9\"\n+groups = [\"main\"]\n files = [\n     {file = \"pydantic-2.11.4-py3-none-any.whl\", hash = \"sha256:d9615eaa9ac5a063471da949c8fc16376a84afb5024688b3ff885693506764eb\"},\n     {file = \"pydantic-2.11.4.tar.gz\", hash = \"sha256:32738d19d63a226a52eed76645a98ee07c1f410ee41d93b4afbfa85ed8111c2d\"},\n@@ -2594,14 +2767,15 @@ typing-inspection = \">=0.4.0\"\n \n [package.extras]\n email = [\"email-validator (>=2.0.0)\"]\n-timezone = [\"tzdata\"]\n+timezone = [\"tzdata ; python_version >= \\\"3.9\\\" and platform_system == \\\"Windows\\\"\"]\n \n [[package]]\n name = \"pydantic-core\"\n version = \"2.33.2\"\n description = \"Core functionality for Pydantic validation and serialization\"\n optional = false\n python-versions = \">=3.9\"\n+groups = [\"main\"]\n files = [\n     {file = \"pydantic_core-2.33.2-cp310-cp310-macosx_10_12_x86_64.whl\", hash = \"sha256:2b3d326aaef0c0399d9afffeb6367d5e26ddc24d351dbc9c636840ac355dc5d8\"},\n     {file = \"pydantic_core-2.33.2-cp310-cp310-macosx_11_0_arm64.whl\", hash = \"sha256:0e5b2671f05ba48b94cb90ce55d8bdcaaedb8ba00cc5359f6810fc918713983d\"},\n@@ -2713,6 +2887,7 @@ version = \"3.1.0\"\n description = \"passive checker of Python programs\"\n optional = false\n python-versions = \">=3.8\"\n+groups = [\"dev\"]\n files = [\n     {file = \"pyflakes-3.1.0-py2.py3-none-any.whl\", hash = \"sha256:4132f6d49cb4dae6819e5379898f2b8cce3c5f23994194c24b77d5da2e36f774\"},\n     {file = \"pyflakes-3.1.0.tar.gz\", hash = \"sha256:a0aae034c444db0071aa077972ba4768d40c830d9539fd45bf4cd3f8f6992efc\"},\n@@ -2724,6 +2899,7 @@ version = \"2.19.1\"\n description = \"Pygments is a syntax highlighting package written in Python.\"\n optional = false\n python-versions = \">=3.8\"\n+groups = [\"main\"]\n files = [\n     {file = \"pygments-2.19.1-py3-none-any.whl\", hash = \"sha256:9ea1544ad55cecf4b8242fab6dd35a93bbce657034b0611ee383099054ab6d8c\"},\n     {file = \"pygments-2.19.1.tar.gz\", hash = \"sha256:61c16d2a8576dc0649d9f39e089b5f02bcd27fba10d8fb4dcc28173f7a45151f\"},\n@@ -2738,6 +2914,7 @@ version = \"3.2.3\"\n description = \"pyparsing module - Classes and methods to define and execute parsing grammars\"\n optional = false\n python-versions = \">=3.9\"\n+groups = [\"main\"]\n files = [\n     {file = \"pyparsing-3.2.3-py3-none-any.whl\", hash = \"sha256:a749938e02d6fd0b59b356ca504a24982314bb090c383e3cf201c95ef7e2bfcf\"},\n     {file = \"pyparsing-3.2.3.tar.gz\", hash = \"sha256:b9c13f1ab8b3b542f72e28f634bad4de758ab3ce4546e4301970ad6fa77c38be\"},\n@@ -2752,6 +2929,7 @@ version = \"7.4.4\"\n description = \"pytest: simple powerful testing with Python\"\n optional = false\n python-versions = \">=3.7\"\n+groups = [\"dev\"]\n files = [\n     {file = \"pytest-7.4.4-py3-none-any.whl\", hash = \"sha256:b090cdf5ed60bf4c45261be03239c2c1c22df034fbffe691abe93cd80cea01d8\"},\n     {file = \"pytest-7.4.4.tar.gz\", hash = \"sha256:2cf0005922c6ace4a3e2ec8b4080eb0d9753fdc93107415332f50ce9e7994280\"},\n@@ -2772,6 +2950,7 @@ version = \"2.9.0.post0\"\n description = \"Extensions to the standard Python datetime module\"\n optional = false\n python-versions = \"!=3.0.*,!=3.1.*,!=3.2.*,>=2.7\"\n+groups = [\"main\"]\n files = [\n     {file = \"python-dateutil-2.9.0.post0.tar.gz\", hash = \"sha256:37dd54208da7e1cd875388217d5e00ebd4179249f90fb72437e91a35459a0ad3\"},\n     {file = \"python_dateutil-2.9.0.post0-py2.py3-none-any.whl\", hash = \"sha256:a8b2bc7bffae282281c8140a97d3aa9c14da0b136dfe83f850eea9a5f7470427\"},\n@@ -2786,6 +2965,7 @@ version = \"1.0.0\"\n description = \"Read key-value pairs from a .env file and set them as environment variables\"\n optional = false\n python-versions = \">=3.8\"\n+groups = [\"main\"]\n files = [\n     {file = \"python-dotenv-1.0.0.tar.gz\", hash = \"sha256:a8df96034aae6d2d50a4ebe8216326c61c3eb64836776504fcca410e5937a3ba\"},\n     {file = \"python_dotenv-1.0.0-py3-none-any.whl\", hash = \"sha256:f5971a9226b701070a4bf2c38c89e5a3f0d64de8debda981d1db98583009122a\"},\n@@ -2800,6 +2980,7 @@ version = \"2025.2\"\n description = \"World timezone definitions, modern and historical\"\n optional = false\n python-versions = \"*\"\n+groups = [\"main\"]\n files = [\n     {file = \"pytz-2025.2-py2.py3-none-any.whl\", hash = \"sha256:5ddf76296dd8c44c26eb8f4b6f35488f3ccbf6fbbd7adee0b7262d43f0ec2f00\"},\n     {file = \"pytz-2025.2.tar.gz\", hash = \"sha256:360b9e3dbb49a209c21ad61809c7fb453643e048b38924c765813546746e81c3\"},\n@@ -2811,6 +2992,7 @@ version = \"6.0.2\"\n description = \"YAML parser and emitter for Python\"\n optional = false\n python-versions = \">=3.8\"\n+groups = [\"main\"]\n files = [\n     {file = \"PyYAML-6.0.2-cp310-cp310-macosx_10_9_x86_64.whl\", hash = \"sha256:0a9a2848a5b7feac301353437eb7d5957887edbf81d56e903999a75a3d743086\"},\n     {file = \"PyYAML-6.0.2-cp310-cp310-macosx_11_0_arm64.whl\", hash = \"sha256:29717114e51c84ddfba879543fb232a6ed60086602313ca38cce623c1d62cfbf\"},\n@@ -2873,6 +3055,7 @@ version = \"2.1.0\"\n description = \"Python library to build pretty command line user prompts \u2b50\ufe0f\"\n optional = false\n python-versions = \">=3.8\"\n+groups = [\"main\"]\n files = [\n     {file = \"questionary-2.1.0-py3-none-any.whl\", hash = \"sha256:44174d237b68bc828e4878c763a9ad6790ee61990e0ae72927694ead57bab8ec\"},\n     {file = \"questionary-2.1.0.tar.gz\", hash = \"sha256:6302cdd645b19667d8f6e6634774e9538bfcd1aad9be287e743d96cacaf95587\"},\n@@ -2887,6 +3070,7 @@ version = \"2024.11.6\"\n description = \"Alternative regular expression module, to replace re.\"\n optional = false\n python-versions = \">=3.8\"\n+groups = [\"main\"]\n files = [\n     {file = \"regex-2024.11.6-cp310-cp310-macosx_10_9_universal2.whl\", hash = \"sha256:ff590880083d60acc0433f9c3f713c51f7ac6ebb9adf889c79a261ecf541aa91\"},\n     {file = \"regex-2024.11.6-cp310-cp310-macosx_10_9_x86_64.whl\", hash = \"sha256:658f90550f38270639e83ce492f27d2c8d2cd63805c65a13a14d36ca126753f0\"},\n@@ -2990,6 +3174,7 @@ version = \"2.32.3\"\n description = \"Python HTTP for Humans.\"\n optional = false\n python-versions = \">=3.8\"\n+groups = [\"main\"]\n files = [\n     {file = \"requests-2.32.3-py3-none-any.whl\", hash = \"sha256:70761cfe03c773ceb22aa2f671b4757976145175cdfca038c02654d061d6dcc6\"},\n     {file = \"requests-2.32.3.tar.gz\", hash = \"sha256:55365417734eb18255590a9ff9eb97e9e1da868d4ccd6402399eaf68af20a760\"},\n@@ -3011,6 +3196,7 @@ version = \"1.0.0\"\n description = \"A utility belt for advanced users of python-requests\"\n optional = false\n python-versions = \">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*\"\n+groups = [\"main\"]\n files = [\n     {file = \"requests-toolbelt-1.0.0.tar.gz\", hash = \"sha256:7681a0a3d047012b5bdc0ee37d7f8f07ebe76ab08caeccfc3921ce23c88d5bc6\"},\n     {file = \"requests_toolbelt-1.0.0-py2.py3-none-any.whl\", hash = \"sha256:cccfdd665f0a24fcf4726e690f65639d272bb0637b9b92dfd91a5568ccf6bd06\"},\n@@ -3025,6 +3211,7 @@ version = \"13.9.4\"\n description = \"Render rich text, tables, progress bars, syntax highlighting, markdown and more to the terminal\"\n optional = false\n python-versions = \">=3.8.0\"\n+groups = [\"main\"]\n files = [\n     {file = \"rich-13.9.4-py3-none-any.whl\", hash = \"sha256:6049d5e6ec054bf2779ab3358186963bac2ea89175919d699e378b99738c2a90\"},\n     {file = \"rich-13.9.4.tar.gz\", hash = \"sha256:439594978a49a09530cff7ebc4b5c7103ef57baf48d5ea3184f21d9a2befa098\"},\n@@ -3043,6 +3230,7 @@ version = \"0.14.4\"\n description = \"Rich toolkit for building command-line applications\"\n optional = false\n python-versions = \">=3.8\"\n+groups = [\"main\"]\n files = [\n     {file = \"rich_toolkit-0.14.4-py3-none-any.whl\", hash = \"sha256:cc71ebee83eaa122d8e42882408bc5a4bf0240bbf1e368811ee56d249b3d742a\"},\n     {file = \"rich_toolkit-0.14.4.tar.gz\", hash = \"sha256:db256cf45165cae381c9bbf3b48a0fd4d99a07c80155cc655c80212a62e28fe1\"},\n@@ -3059,6 +3247,7 @@ version = \"4.9.1\"\n description = \"Pure-Python RSA implementation\"\n optional = false\n python-versions = \"<4,>=3.6\"\n+groups = [\"main\"]\n files = [\n     {file = \"rsa-4.9.1-py3-none-any.whl\", hash = \"sha256:68635866661c6836b8d39430f97a996acbd61bfa49406748ea243539fe239762\"},\n     {file = \"rsa-4.9.1.tar.gz\", hash = \"sha256:e7bdbfdb5497da4c07dfd35530e1a902659db6ff241e39d9953cad06ebd0ae75\"},\n@@ -3073,6 +3262,7 @@ version = \"1.5.4\"\n description = \"Tool to Detect Surrounding Shell\"\n optional = false\n python-versions = \">=3.7\"\n+groups = [\"main\"]\n files = [\n     {file = \"shellingham-1.5.4-py2.py3-none-any.whl\", hash = \"sha256:7ecfff8f2fd72616f7481040475a65b2bf8af90a56c89140852d1120324e8686\"},\n     {file = \"shellingham-1.5.4.tar.gz\", hash = \"sha256:8dbca0739d487e5bd35ab3ca4b36e11c4078f3a234bfce294b0a0291363404de\"},\n@@ -3084,6 +3274,7 @@ version = \"1.17.0\"\n description = \"Python 2 and 3 compatibility utilities\"\n optional = false\n python-versions = \"!=3.0.*,!=3.1.*,!=3.2.*,>=2.7\"\n+groups = [\"main\"]\n files = [\n     {file = \"six-1.17.0-py2.py3-none-any.whl\", hash = \"sha256:4721f391ed90541fddacab5acf947aa0d3dc7d27b2e1e8eda2be8970586c3274\"},\n     {file = \"six-1.17.0.tar.gz\", hash = \"sha256:ff70335d468e7eb6ec65b95b99d3a2836546063f63acc5171de367e834932a81\"},\n@@ -3095,6 +3286,7 @@ version = \"1.3.1\"\n description = \"Sniff out which async library your code is running under\"\n optional = false\n python-versions = \">=3.7\"\n+groups = [\"main\"]\n files = [\n     {file = \"sniffio-1.3.1-py3-none-any.whl\", hash = \"sha256:2f6da418d1f1e0fddd844478f41680e794e6051915791a034ff65e5f100525a2\"},\n     {file = \"sniffio-1.3.1.tar.gz\", hash = \"sha256:f4324edc670a0f49750a81b895f35c3adb843cca46f0530f79fc1babb23789dc\"},\n@@ -3106,6 +3298,7 @@ version = \"2.0.40\"\n description = \"Database Abstraction Library\"\n optional = false\n python-versions = \">=3.7\"\n+groups = [\"main\"]\n files = [\n     {file = \"SQLAlchemy-2.0.40-cp37-cp37m-macosx_10_9_x86_64.whl\", hash = \"sha256:ae9597cab738e7cc823f04a704fb754a9249f0b6695a6aeb63b74055cd417a96\"},\n     {file = \"SQLAlchemy-2.0.40-cp37-cp37m-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:37a5c21ab099a83d669ebb251fddf8f5cee4d75ea40a5a1653d9c43d60e20867\"},\n@@ -3195,12 +3388,25 @@ postgresql-psycopgbinary = [\"psycopg[binary] (>=3.0.7)\"]\n pymysql = [\"pymysql\"]\n sqlcipher = [\"sqlcipher3_binary\"]\n \n+[[package]]\n+name = \"sseclient-py\"\n+version = \"1.8.0\"\n+description = \"SSE client for Python\"\n+optional = false\n+python-versions = \"*\"\n+groups = [\"main\"]\n+files = [\n+    {file = \"sseclient-py-1.8.0.tar.gz\", hash = \"sha256:c547c5c1a7633230a38dc599a21a2dc638f9b5c297286b48b46b935c71fac3e8\"},\n+    {file = \"sseclient_py-1.8.0-py2.py3-none-any.whl\", hash = \"sha256:4ecca6dc0b9f963f8384e9d7fd529bf93dd7d708144c4fb5da0e0a1a926fee83\"},\n+]\n+\n [[package]]\n name = \"starlette\"\n version = \"0.27.0\"\n description = \"The little ASGI library that shines.\"\n optional = false\n python-versions = \">=3.7\"\n+groups = [\"main\"]\n files = [\n     {file = \"starlette-0.27.0-py3-none-any.whl\", hash = \"sha256:918416370e846586541235ccd38a474c08b80443ed31c578a418e2209b3eef91\"},\n     {file = \"starlette-0.27.0.tar.gz\", hash = \"sha256:6a6b0d042acb8d469a01eba54e9cda6cbd24ac602c4cd016723117d6a7e73b75\"},\n@@ -3218,6 +3424,7 @@ version = \"0.9.0\"\n description = \"Pretty-print tabular data\"\n optional = false\n python-versions = \">=3.7\"\n+groups = [\"main\"]\n files = [\n     {file = \"tabulate-0.9.0-py3-none-any.whl\", hash = \"sha256:024ca478df22e9340661486f85298cff5f6dcdba14f3813e8830015b9ed1948f\"},\n     {file = \"tabulate-0.9.0.tar.gz\", hash = \"sha256:0095b12bf5966de529c0feb1fa08671671b3368eec77d7ef7ab114be2c068b3c\"},\n@@ -3232,6 +3439,7 @@ version = \"8.5.0\"\n description = \"Retry code until it succeeds\"\n optional = false\n python-versions = \">=3.8\"\n+groups = [\"main\"]\n files = [\n     {file = \"tenacity-8.5.0-py3-none-any.whl\", hash = \"sha256:b594c2a5945830c267ce6b79a166228323ed52718f30302c1359836112346687\"},\n     {file = \"tenacity-8.5.0.tar.gz\", hash = \"sha256:8bc6c0c8a09b31e6cad13c47afbed1a567518250a9a171418582ed8d9c20ca78\"},\n@@ -3247,6 +3455,7 @@ version = \"0.9.0\"\n description = \"tiktoken is a fast BPE tokeniser for use with OpenAI's models\"\n optional = false\n python-versions = \">=3.9\"\n+groups = [\"main\"]\n files = [\n     {file = \"tiktoken-0.9.0-cp310-cp310-macosx_10_12_x86_64.whl\", hash = \"sha256:586c16358138b96ea804c034b8acf3f5d3f0258bd2bc3b0227af4af5d622e382\"},\n     {file = \"tiktoken-0.9.0-cp310-cp310-macosx_11_0_arm64.whl\", hash = \"sha256:d9c59ccc528c6c5dd51820b3474402f69d9a9e1d656226848ad68a8d5b2e5108\"},\n@@ -3294,6 +3503,7 @@ version = \"4.67.1\"\n description = \"Fast, Extensible Progress Meter\"\n optional = false\n python-versions = \">=3.7\"\n+groups = [\"main\"]\n files = [\n     {file = \"tqdm-4.67.1-py3-none-any.whl\", hash = \"sha256:26445eca388f82e72884e0d580d5464cd801a3ea01e63e5601bdff9ba6a48de2\"},\n     {file = \"tqdm-4.67.1.tar.gz\", hash = \"sha256:f8aef9c52c08c13a65f30ea34f4e5aac3fd1a34959879d7e59e63027286627f2\"},\n@@ -3315,6 +3525,7 @@ version = \"0.15.3\"\n description = \"Typer, build great CLIs. Easy to code. Based on Python type hints.\"\n optional = false\n python-versions = \">=3.7\"\n+groups = [\"main\"]\n files = [\n     {file = \"typer-0.15.3-py3-none-any.whl\", hash = \"sha256:c86a65ad77ca531f03de08d1b9cb67cd09ad02ddddf4b34745b5008f43b239bd\"},\n     {file = \"typer-0.15.3.tar.gz\", hash = \"sha256:818873625d0569653438316567861899f7e9972f2e6e0c16dab608345ced713c\"},\n@@ -3332,6 +3543,7 @@ version = \"4.13.2\"\n description = \"Backported and Experimental Type Hints for Python 3.8+\"\n optional = false\n python-versions = \">=3.8\"\n+groups = [\"main\"]\n files = [\n     {file = \"typing_extensions-4.13.2-py3-none-any.whl\", hash = \"sha256:a439e7c04b49fec3e5d3e2beaa21755cadbbdc391694e28ccdd36ca4a1408f8c\"},\n     {file = \"typing_extensions-4.13.2.tar.gz\", hash = \"sha256:e6c81219bd689f51865d9e372991c540bda33a0379d5573cddb9a3a23f7caaef\"},\n@@ -3343,6 +3555,7 @@ version = \"0.4.0\"\n description = \"Runtime typing introspection tools\"\n optional = false\n python-versions = \">=3.9\"\n+groups = [\"main\"]\n files = [\n     {file = \"typing_inspection-0.4.0-py3-none-any.whl\", hash = \"sha256:50e72559fcd2a6367a19f7a7e610e6afcb9fac940c650290eed893d61386832f\"},\n     {file = \"typing_inspection-0.4.0.tar.gz\", hash = \"sha256:9765c87de36671694a67904bf2c96e395be9c6439bb6c87b5142569dcdd65122\"},\n@@ -3357,6 +3570,7 @@ version = \"2025.2\"\n description = \"Provider of IANA time zone data\"\n optional = false\n python-versions = \">=2\"\n+groups = [\"main\"]\n files = [\n     {file = \"tzdata-2025.2-py2.py3-none-any.whl\", hash = \"sha256:1a403fada01ff9221ca8044d701868fa132215d84beb92242d9acd2147f667a8\"},\n     {file = \"tzdata-2025.2.tar.gz\", hash = \"sha256:b60a638fcc0daffadf82fe0f57e53d06bdec2f36c4df66280ae79bce6bd6f2b9\"},\n@@ -3368,13 +3582,14 @@ version = \"2.4.0\"\n description = \"HTTP library with thread-safe connection pooling, file post, and more.\"\n optional = false\n python-versions = \">=3.9\"\n+groups = [\"main\"]\n files = [\n     {file = \"urllib3-2.4.0-py3-none-any.whl\", hash = \"sha256:4e16665048960a0900c702d4a66415956a584919c03361cac9f1df5c5dd7e813\"},\n     {file = \"urllib3-2.4.0.tar.gz\", hash = \"sha256:414bc6535b787febd7567804cc015fee39daab8ad86268f1310a9250697de466\"},\n ]\n \n [package.extras]\n-brotli = [\"brotli (>=1.0.9)\", \"brotlicffi (>=0.8.0)\"]\n+brotli = [\"brotli (>=1.0.9) ; platform_python_implementation == \\\"CPython\\\"\", \"brotlicffi (>=0.8.0) ; platform_python_implementation != \\\"CPython\\\"\"]\n h2 = [\"h2 (>=4,<5)\"]\n socks = [\"pysocks (>=1.5.6,!=1.5.7,<2.0)\"]\n zstd = [\"zstandard (>=0.18.0)\"]\n@@ -3385,6 +3600,7 @@ version = \"0.34.2\"\n description = \"The lightning-fast ASGI server.\"\n optional = false\n python-versions = \">=3.9\"\n+groups = [\"main\"]\n files = [\n     {file = \"uvicorn-0.34.2-py3-none-any.whl\", hash = \"sha256:deb49af569084536d269fe0a6d67e3754f104cf03aba7c11c40f01aadf33c403\"},\n     {file = \"uvicorn-0.34.2.tar.gz\", hash = \"sha256:0e929828f6186353a80b58ea719861d2629d766293b6d19baf086ba31d4f3328\"},\n@@ -3397,19 +3613,21 @@ h11 = \">=0.8\"\n httptools = {version = \">=0.6.3\", optional = true, markers = \"extra == \\\"standard\\\"\"}\n python-dotenv = {version = \">=0.13\", optional = true, markers = \"extra == \\\"standard\\\"\"}\n pyyaml = {version = \">=5.1\", optional = true, markers = \"extra == \\\"standard\\\"\"}\n-uvloop = {version = \">=0.14.0,<0.15.0 || >0.15.0,<0.15.1 || >0.15.1\", optional = true, markers = \"(sys_platform != \\\"win32\\\" and sys_platform != \\\"cygwin\\\") and platform_python_implementation != \\\"PyPy\\\" and extra == \\\"standard\\\"\"}\n+uvloop = {version = \">=0.14.0,<0.15.0 || >0.15.0,<0.15.1 || >0.15.1\", optional = true, markers = \"sys_platform != \\\"win32\\\" and sys_platform != \\\"cygwin\\\" and platform_python_implementation != \\\"PyPy\\\" and extra == \\\"standard\\\"\"}\n watchfiles = {version = \">=0.13\", optional = true, markers = \"extra == \\\"standard\\\"\"}\n websockets = {version = \">=10.4\", optional = true, markers = \"extra == \\\"standard\\\"\"}\n \n [package.extras]\n-standard = [\"colorama (>=0.4)\", \"httptools (>=0.6.3)\", \"python-dotenv (>=0.13)\", \"pyyaml (>=5.1)\", \"uvloop (>=0.14.0,!=0.15.0,!=0.15.1)\", \"watchfiles (>=0.13)\", \"websockets (>=10.4)\"]\n+standard = [\"colorama (>=0.4) ; sys_platform == \\\"win32\\\"\", \"httptools (>=0.6.3)\", \"python-dotenv (>=0.13)\", \"pyyaml (>=5.1)\", \"uvloop (>=0.14.0,!=0.15.0,!=0.15.1) ; sys_platform != \\\"win32\\\" and sys_platform != \\\"cygwin\\\" and platform_python_implementation != \\\"PyPy\\\"\", \"watchfiles (>=0.13)\", \"websockets (>=10.4)\"]\n \n [[package]]\n name = \"uvloop\"\n version = \"0.21.0\"\n description = \"Fast implementation of asyncio event loop on top of libuv\"\n optional = false\n python-versions = \">=3.8.0\"\n+groups = [\"main\"]\n+markers = \"sys_platform != \\\"win32\\\" and sys_platform != \\\"cygwin\\\" and platform_python_implementation != \\\"PyPy\\\"\"\n files = [\n     {file = \"uvloop-0.21.0-cp310-cp310-macosx_10_9_universal2.whl\", hash = \"sha256:ec7e6b09a6fdded42403182ab6b832b71f4edaf7f37a9a0e371a01db5f0cb45f\"},\n     {file = \"uvloop-0.21.0-cp310-cp310-macosx_10_9_x86_64.whl\", hash = \"sha256:196274f2adb9689a289ad7d65700d37df0c0930fd8e4e743fa4834e850d7719d\"},\n@@ -3461,6 +3679,7 @@ version = \"1.0.5\"\n description = \"Simple, modern and high performance file watching and code reload in python.\"\n optional = false\n python-versions = \">=3.9\"\n+groups = [\"main\"]\n files = [\n     {file = \"watchfiles-1.0.5-cp310-cp310-macosx_10_12_x86_64.whl\", hash = \"sha256:5c40fe7dd9e5f81e0847b1ea64e1f5dd79dd61afbedb57759df06767ac719b40\"},\n     {file = \"watchfiles-1.0.5-cp310-cp310-macosx_11_0_arm64.whl\", hash = \"sha256:8c0db396e6003d99bb2d7232c957b5f0b5634bbd1b24e381a5afcc880f7373fb\"},\n@@ -3544,6 +3763,7 @@ version = \"0.2.13\"\n description = \"Measures the displayed width of unicode strings in a terminal\"\n optional = false\n python-versions = \"*\"\n+groups = [\"main\"]\n files = [\n     {file = \"wcwidth-0.2.13-py2.py3-none-any.whl\", hash = \"sha256:3da69048e4540d84af32131829ff948f1e022c1c6bdb8d6102117aac784f6859\"},\n     {file = \"wcwidth-0.2.13.tar.gz\", hash = \"sha256:72ea0c06399eb286d978fdedb6923a9eb47e1c486ce63e9b4e64fc18303972b5\"},\n@@ -3555,6 +3775,7 @@ version = \"15.0.1\"\n description = \"An implementation of the WebSocket Protocol (RFC 6455 & 7692)\"\n optional = false\n python-versions = \">=3.9\"\n+groups = [\"main\"]\n files = [\n     {file = \"websockets-15.0.1-cp310-cp310-macosx_10_9_universal2.whl\", hash = \"sha256:d63efaa0cd96cf0c5fe4d581521d9fa87744540d4bc999ae6e08595a1014b45b\"},\n     {file = \"websockets-15.0.1-cp310-cp310-macosx_10_9_x86_64.whl\", hash = \"sha256:ac60e3b188ec7574cb761b08d50fcedf9d77f1530352db4eef1707fe9dee7205\"},\n@@ -3633,6 +3854,7 @@ version = \"1.20.0\"\n description = \"Yet another URL library\"\n optional = false\n python-versions = \">=3.9\"\n+groups = [\"main\"]\n files = [\n     {file = \"yarl-1.20.0-cp310-cp310-macosx_10_9_universal2.whl\", hash = \"sha256:f1f6670b9ae3daedb325fa55fbe31c22c8228f6e0b513772c2e1c623caa6ab22\"},\n     {file = \"yarl-1.20.0-cp310-cp310-macosx_10_9_x86_64.whl\", hash = \"sha256:85a231fa250dfa3308f3c7896cc007a47bc76e9e8e8595c20b7426cac4884c62\"},\n@@ -3746,6 +3968,6 @@ multidict = \">=4.0\"\n propcache = \">=0.2.1\"\n \n [metadata]\n-lock-version = \"2.0\"\n+lock-version = \"2.1\"\n python-versions = \"^3.11\"\n-content-hash = \"4b63c0cbfd37b7262e6b1364ae4e7ce6c8b410933f3f8e62f12af5ed9646203e\"\n+content-hash = \"680ad21758c391683e2eab88c4c6733c3c9b41942066b999e18769d313e64dbd\"", "blob_url": "https://github.com/virattt/ai-hedge-fund/blob/626e4d48a5c47b47f10d0a878b82471fc14bddf5/poetry.lock", "raw_url": "https://github.com/virattt/ai-hedge-fund/raw/626e4d48a5c47b47f10d0a878b82471fc14bddf5/poetry.lock", "contents_url": "https://api.github.com/repos/virattt/ai-hedge-fund/contents/poetry.lock?ref=626e4d48a5c47b47f10d0a878b82471fc14bddf5"}, {"filename": "pyproject.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "patch": "@@ -34,6 +34,7 @@ pydantic = \"^2.4.2\"\n httpx = \"^0.27.0\"\n sqlalchemy = \"^2.0.22\"\n alembic = \"^1.12.0\"\n+alpaca-py = \"^0.40.2\"\n \n [tool.poetry.group.dev.dependencies]\n pytest = \"^7.4.0\"", "blob_url": "https://github.com/virattt/ai-hedge-fund/blob/626e4d48a5c47b47f10d0a878b82471fc14bddf5/pyproject.toml", "raw_url": "https://github.com/virattt/ai-hedge-fund/raw/626e4d48a5c47b47f10d0a878b82471fc14bddf5/pyproject.toml", "contents_url": "https://api.github.com/repos/virattt/ai-hedge-fund/contents/pyproject.toml?ref=626e4d48a5c47b47f10d0a878b82471fc14bddf5"}, {"filename": "src/trader.py", "status": "added", "additions": 267, "deletions": 0, "changes": 267, "patch": "@@ -0,0 +1,267 @@\n+\"\"\"Live trading CLI for the AI hedge fund.\"\"\"\n+\n+import sys\n+import argparse\n+from dotenv import load_dotenv\n+import questionary\n+from colorama import Fore, Style, init\n+\n+from src.trading.trader import create_trader\n+from src.utils.analysts import ANALYST_ORDER\n+from src.llm.models import LLM_ORDER, OLLAMA_LLM_ORDER, get_model_info, ModelProvider\n+from src.utils.ollama import ensure_ollama_and_model\n+\n+# Load environment variables\n+load_dotenv()\n+init(autoreset=True)\n+\n+\n+def main():\n+    \"\"\"Main CLI entry point for live trading.\"\"\"\n+    parser = argparse.ArgumentParser(description=\"Run live trading with AI hedge fund\")\n+    parser.add_argument(\"--tickers\", type=str, help=\"Comma-separated list of stock ticker symbols\")\n+    parser.add_argument(\"--dry-run\", action=\"store_true\", help=\"Show decisions but don't execute trades\")\n+    parser.add_argument(\"--ignore-market-hours\", action=\"store_true\", help=\"Run even when market is closed (useful with --dry-run)\")\n+    parser.add_argument(\"--continuous\", action=\"store_true\", help=\"Run continuous trading\")\n+    parser.add_argument(\"--interval\", type=int, default=60, help=\"Trading interval in minutes (default: 60)\")\n+    parser.add_argument(\"--available-capital\", type=float, help=\"Override available capital (uses broker cash if not specified)\")\n+    parser.add_argument(\"--margin-requirement\", type=float, help=\"Margin requirement ratio for short positions (uses broker default if not specified)\")\n+    parser.add_argument(\"--show-reasoning\", action=\"store_true\", help=\"Show reasoning from each agent\")\n+    parser.add_argument(\"--ollama\", action=\"store_true\", help=\"Use Ollama for local LLM inference\")\n+    parser.add_argument(\"--analysts\", type=str, help=\"Comma-separated list of analysts to use\")\n+    parser.add_argument(\"--analysts-all\", action=\"store_true\", help=\"Use all available analysts\")\n+    parser.add_argument(\"--list-analysts\", action=\"store_true\", help=\"List all available analysts and exit\")\n+    parser.add_argument(\"--model\", type=str, help=\"LLM model name to use\")\n+    parser.add_argument(\"--list-models\", action=\"store_true\", help=\"List all available models and exit\")\n+\n+    args = parser.parse_args()\n+\n+    # Handle list options\n+    if args.list_analysts:\n+        print(f\"\\n{Fore.CYAN}Available Analysts:{Style.RESET_ALL}\")\n+        for display, value in ANALYST_ORDER:\n+            print(f\"  {Fore.GREEN}{value:<25}{Style.RESET_ALL} - {display}\")\n+        print(f\"\\n{Fore.YELLOW}Usage examples:{Style.RESET_ALL}\")\n+        print(f\"  --analysts warren_buffett,michael_burry\")\n+        print(f\"  --analysts-all\")\n+        sys.exit(0)\n+\n+    if args.list_models:\n+        print(f\"\\n{Fore.CYAN}Available Models:{Style.RESET_ALL}\")\n+        print(f\"\\n{Fore.YELLOW}Cloud Models:{Style.RESET_ALL}\")\n+        for display, name, provider in LLM_ORDER:\n+            print(f\"  {Fore.GREEN}{name:<25}{Style.RESET_ALL} - {display} ({provider})\")\n+        \n+        print(f\"\\n{Fore.YELLOW}Ollama Models:{Style.RESET_ALL}\")\n+        for display, name, _ in OLLAMA_LLM_ORDER:\n+            print(f\"  {Fore.GREEN}{name:<25}{Style.RESET_ALL} - {display}\")\n+        \n+        print(f\"\\n{Fore.YELLOW}Usage examples:{Style.RESET_ALL}\")\n+        print(f\"  --model gpt-4o\")\n+        print(f\"  --model claude-3-5-sonnet-20241022\")\n+        print(f\"  --ollama --model llama3\")\n+        sys.exit(0)\n+\n+    # Check if tickers are required\n+    if not args.tickers:\n+        print(f\"{Fore.RED}Error: --tickers is required for trading operations{Style.RESET_ALL}\")\n+        print(\"Use --list-analysts or --list-models to see available options\")\n+        sys.exit(1)\n+\n+\n+    # Parse tickers\n+    tickers = [ticker.strip().upper() for ticker in args.tickers.split(\",\")]\n+    print(f\"\\n{Fore.CYAN}Trading tickers: {', '.join(tickers)}{Style.RESET_ALL}\")\n+\n+\n+    # Select analysts\n+    selected_analysts = None\n+    if args.analysts_all:\n+        selected_analysts = [a[1] for a in ANALYST_ORDER]\n+    elif args.analysts:\n+        selected_analysts = [a.strip() for a in args.analysts.split(\",\") if a.strip()]\n+    else:\n+        selected_analysts = questionary.checkbox(\n+            \"Select your AI analysts:\",\n+            choices=[questionary.Choice(display, value=value) for display, value in ANALYST_ORDER],\n+            instruction=\"\\n\\nInstructions:\\n1. Press Space to select/unselect analysts\\n2. Press 'a' to select/unselect all\\n3. Press Enter when done\\n\",\n+            validate=lambda x: len(x) > 0 or \"You must select at least one analyst.\",\n+            style=questionary.Style([\n+                (\"checkbox-selected\", \"fg:green\"),\n+                (\"selected\", \"fg:green noinherit\"),\n+                (\"highlighted\", \"noinherit\"),\n+                (\"pointer\", \"noinherit\"),\n+            ])\n+        ).ask()\n+\n+    if not selected_analysts:\n+        print(\"\\nExiting...\")\n+        sys.exit(0)\n+\n+    print(f\"\\nSelected analysts: {', '.join(Fore.GREEN + choice.title().replace('_', ' ') + Style.RESET_ALL for choice in selected_analysts)}\")\n+\n+    # Select LLM model\n+    model_name = \"\"\n+    model_provider = \"\"\n+\n+    if args.model:\n+        # Model specified via CLI\n+        model_name = args.model\n+        if args.ollama:\n+            model_provider = ModelProvider.OLLAMA.value\n+            if not ensure_ollama_and_model(model_name):\n+                print(f\"{Fore.RED}Cannot proceed without Ollama and the selected model{Style.RESET_ALL}\")\n+                sys.exit(1)\n+        else:\n+            # Try to find the model in the LLM_ORDER\n+            found = False\n+            for display, name, provider in LLM_ORDER:\n+                if name == model_name:\n+                    model_provider = provider\n+                    found = True\n+                    break\n+            if not found:\n+                print(f\"{Fore.RED}Model '{model_name}' not found in available models{Style.RESET_ALL}\")\n+                sys.exit(1)\n+        print(f\"\\nUsing model: {Fore.GREEN + Style.BRIGHT}{model_name}{Style.RESET_ALL} ({model_provider})\")\n+\n+    elif args.ollama:\n+        print(f\"{Fore.CYAN}Using Ollama for local LLM inference{Style.RESET_ALL}\")\n+        \n+        model_name = questionary.select(\n+            \"Select your Ollama model:\",\n+            choices=[questionary.Choice(display, value=value) for display, value, _ in OLLAMA_LLM_ORDER],\n+            style=questionary.Style([\n+                (\"selected\", \"fg:green bold\"),\n+                (\"pointer\", \"fg:green bold\"),\n+                (\"highlighted\", \"fg:green\"),\n+                (\"answer\", \"fg:green bold\"),\n+            ])\n+        ).ask()\n+\n+        if not model_name:\n+            print(\"\\nExiting...\")\n+            sys.exit(0)\n+\n+        if model_name == \"-\":\n+            model_name = questionary.text(\"Enter the custom model name:\").ask()\n+            if not model_name:\n+                print(\"\\nExiting...\")\n+                sys.exit(0)\n+\n+        if not ensure_ollama_and_model(model_name):\n+            print(f\"{Fore.RED}Cannot proceed without Ollama and the selected model{Style.RESET_ALL}\")\n+            sys.exit(1)\n+\n+        model_provider = ModelProvider.OLLAMA.value\n+        print(f\"\\nSelected {Fore.CYAN}Ollama{Style.RESET_ALL} model: {Fore.GREEN + Style.BRIGHT}{model_name}{Style.RESET_ALL}\")\n+\n+    else:\n+        model_choice = questionary.select(\n+            \"Select your LLM model:\",\n+            choices=[questionary.Choice(display, value=(name, provider)) for display, name, provider in LLM_ORDER],\n+            style=questionary.Style([\n+                (\"selected\", \"fg:green bold\"),\n+                (\"pointer\", \"fg:green bold\"),\n+                (\"highlighted\", \"fg:green\"),\n+                (\"answer\", \"fg:green bold\"),\n+            ])\n+        ).ask()\n+\n+        if not model_choice:\n+            print(\"\\nExiting...\")\n+            sys.exit(0)\n+\n+        model_name, model_provider = model_choice\n+\n+        model_info = get_model_info(model_name, model_provider)\n+        if model_info and model_info.is_custom():\n+            model_name = questionary.text(\"Enter the custom model name:\").ask()\n+            if not model_name:\n+                print(\"\\nExiting...\")\n+                sys.exit(0)\n+\n+        print(f\"\\nSelected {Fore.CYAN}{model_provider}{Style.RESET_ALL} model: {Fore.GREEN + Style.BRIGHT}{model_name}{Style.RESET_ALL}\")\n+\n+    # Create trader\n+    print(f\"\\n{Fore.CYAN}Creating trader...{Style.RESET_ALL}\")\n+    trader = create_trader(\n+        tickers=tickers,\n+        selected_analysts=selected_analysts,\n+        model_name=model_name,\n+        model_provider=model_provider,\n+        available_capital=args.available_capital,\n+        margin_requirement=args.margin_requirement,\n+        dry_run=args.dry_run,\n+        ignore_market_hours=args.ignore_market_hours\n+    )\n+\n+    # Connect to broker\n+    print(f\"\\n{Fore.CYAN}Connecting to broker...{Style.RESET_ALL}\")\n+    if not trader.connect():\n+        print(f\"{Fore.RED}Failed to connect to broker{Style.RESET_ALL}\")\n+        sys.exit(1)\n+    \n+    # Get margin requirement from broker if not specified\n+    if args.margin_requirement is None:\n+        try:\n+            # Get account default margin requirement\n+            broker_margin_req = trader.broker.get_margin_requirement()\n+            trader.margin_requirement = broker_margin_req\n+            print(f\"{Fore.CYAN}Using broker default margin requirement: {broker_margin_req:.1%}{Style.RESET_ALL}\")\n+            \n+            # Show ticker-specific margin requirements\n+            print(f\"{Fore.CYAN}Ticker-specific margin requirements:{Style.RESET_ALL}\")\n+            for ticker in tickers:\n+                try:\n+                    ticker_margin = trader.broker.get_margin_requirement(ticker)\n+                    print(f\"  {ticker}: {ticker_margin:.1%}\")\n+                except Exception as e:\n+                    print(f\"  {ticker}: {broker_margin_req:.1%} (default - could not get specific requirement)\")\n+        except Exception as e:\n+            trader.margin_requirement = 0.5  # Default fallback\n+            print(f\"{Fore.YELLOW}Could not get broker margin requirement, using default 50%{Style.RESET_ALL}\")\n+    \n+    # Show capital usage information\n+    if args.available_capital:\n+        print(f\"{Fore.CYAN}Using limited capital: ${args.available_capital:,.2f} (maintaining account margin capability){Style.RESET_ALL}\")\n+    \n+    # Check for live trading warning after connection\n+    if not trader.broker.is_paper_trading():\n+        confirm = questionary.confirm(\n+            f\"{Fore.RED}WARNING: Connected to LIVE TRADING account with real money. Are you sure you want to continue?{Style.RESET_ALL}\",\n+            default=False\n+        ).ask()\n+        if not confirm:\n+            print(\"Exiting...\")\n+            trader.disconnect()\n+            sys.exit(0)\n+\n+    try:\n+        # Show portfolio summary\n+        trader.print_portfolio_summary()\n+\n+        # Run trading\n+        if args.continuous:\n+            print(f\"\\n{Fore.BLUE}Starting continuous trading mode...{Style.RESET_ALL}\")\n+            trader.run_continuous_trading(interval_minutes=args.interval)\n+        else:\n+            print(f\"\\n{Fore.BLUE}Running single trading session...{Style.RESET_ALL}\")\n+            trader.run_trading_session()\n+            \n+            # Show updated portfolio\n+            trader.print_portfolio_summary()\n+\n+    except KeyboardInterrupt:\n+        print(f\"\\n{Fore.YELLOW}Trading interrupted by user{Style.RESET_ALL}\")\n+    except Exception as e:\n+        print(f\"\\n{Fore.RED}Trading failed: {e}{Style.RESET_ALL}\")\n+        sys.exit(1)\n+    finally:\n+        trader.disconnect()\n+\n+    print(f\"\\n{Fore.GREEN}Trading session completed{Style.RESET_ALL}\")\n+\n+\n+if __name__ == \"__main__\":\n+    main()\n\\ No newline at end of file", "blob_url": "https://github.com/virattt/ai-hedge-fund/blob/626e4d48a5c47b47f10d0a878b82471fc14bddf5/src%2Ftrader.py", "raw_url": "https://github.com/virattt/ai-hedge-fund/raw/626e4d48a5c47b47f10d0a878b82471fc14bddf5/src%2Ftrader.py", "contents_url": "https://api.github.com/repos/virattt/ai-hedge-fund/contents/src%2Ftrader.py?ref=626e4d48a5c47b47f10d0a878b82471fc14bddf5"}, {"filename": "src/trading/__init__.py", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "patch": "@@ -0,0 +1 @@\n+\"\"\"Trading module for real broker integration.\"\"\"\n\\ No newline at end of file", "blob_url": "https://github.com/virattt/ai-hedge-fund/blob/626e4d48a5c47b47f10d0a878b82471fc14bddf5/src%2Ftrading%2F__init__.py", "raw_url": "https://github.com/virattt/ai-hedge-fund/raw/626e4d48a5c47b47f10d0a878b82471fc14bddf5/src%2Ftrading%2F__init__.py", "contents_url": "https://api.github.com/repos/virattt/ai-hedge-fund/contents/src%2Ftrading%2F__init__.py?ref=626e4d48a5c47b47f10d0a878b82471fc14bddf5"}, {"filename": "src/trading/alpaca_broker.py", "status": "added", "additions": 390, "deletions": 0, "changes": 390, "patch": "@@ -0,0 +1,390 @@\n+\"\"\"Alpaca broker implementation for live trading.\"\"\"\n+\n+import os\n+from alpaca.trading.client import TradingClient\n+from alpaca.trading.requests import MarketOrderRequest, LimitOrderRequest, StopOrderRequest\n+from alpaca.trading.enums import OrderSide, TimeInForce, OrderType\n+from alpaca.data.historical import StockHistoricalDataClient\n+from alpaca.data.requests import StockLatestQuoteRequest\n+from alpaca.common.exceptions import APIError\n+from colorama import Fore, Style\n+import logging\n+\n+from .broker_base import BrokerBase, Position, Order, Account\n+\n+\n+logger = logging.getLogger(__name__)\n+\n+\n+class AlpacaBroker(BrokerBase):\n+    \"\"\"Alpaca broker implementation.\"\"\"\n+    \n+    def __init__(self, paper_trading: bool = None):\n+        \"\"\"Initialize Alpaca broker.\n+        \n+        Args:\n+            paper_trading: Whether to use paper trading account. If None, reads from ALPACA_PAPER env var.\n+        \"\"\"\n+        # Read from environment variable if not explicitly set\n+        if paper_trading is None:\n+            paper_trading = os.getenv(\"ALPACA_PAPER\", \"true\").lower() in (\"true\", \"1\", \"yes\")\n+        \n+        self.paper_trading = paper_trading\n+        self.trading_client = None\n+        self.data_client = None\n+        self._connected = False\n+        \n+        # Check required environment variables\n+        required_vars = [\"ALPACA_API_KEY\", \"ALPACA_SECRET_KEY\"]\n+        missing_vars = [var for var in required_vars if not os.getenv(var)]\n+        \n+        if missing_vars:\n+            raise ValueError(f\"Missing required environment variables: {', '.join(missing_vars)}. Please set these in your .env file\")\n+        \n+        # Get API credentials from environment\n+        self.api_key = os.getenv(\"ALPACA_API_KEY\")\n+        self.secret_key = os.getenv(\"ALPACA_SECRET_KEY\")\n+    \n+    def connect(self) -> bool:\n+        \"\"\"Connect to Alpaca API.\"\"\"\n+        try:\n+            self.trading_client = TradingClient(\n+                api_key=self.api_key,\n+                secret_key=self.secret_key,\n+                paper=self.paper_trading\n+            )\n+            \n+            self.data_client = StockHistoricalDataClient(\n+                api_key=self.api_key,\n+                secret_key=self.secret_key\n+            )\n+            \n+            # Test connection by getting account info\n+            account = self.trading_client.get_account()\n+            self._connected = True\n+            \n+            env_type = \"Paper\" if self.paper_trading else \"Live\"\n+            print(f\"{Fore.GREEN}Connected to Alpaca {env_type} Trading API{Style.RESET_ALL}\")\n+            print(f\"Account Status: {account.status}\")\n+            print(f\"Buying Power: ${float(account.buying_power):,.2f}\")\n+            \n+            return True\n+            \n+        except APIError as e:\n+            logger.error(f\"Failed to connect to Alpaca: {e}\")\n+            print(f\"{Fore.RED}Failed to connect to Alpaca: {e}{Style.RESET_ALL}\")\n+            return False\n+        except Exception as e:\n+            logger.error(f\"Unexpected error connecting to Alpaca: {e}\")\n+            print(f\"{Fore.RED}Unexpected error: {e}{Style.RESET_ALL}\")\n+            return False\n+    \n+    def disconnect(self) -> None:\n+        \"\"\"Disconnect from Alpaca API.\"\"\"\n+        self.trading_client = None\n+        self.data_client = None\n+        self._connected = False\n+        print(f\"{Fore.YELLOW}Disconnected from Alpaca API{Style.RESET_ALL}\")\n+    \n+    def get_account(self) -> Account:\n+        \"\"\"Get current account information.\"\"\"\n+        if not self._connected:\n+            raise RuntimeError(\"Not connected to broker\")\n+        \n+        account = self.trading_client.get_account()\n+        \n+        return Account(\n+            cash=float(account.cash),\n+            buying_power=float(account.buying_power),\n+            portfolio_value=float(account.portfolio_value),\n+            equity=float(account.equity),\n+            initial_margin=float(account.initial_margin),\n+            maintenance_margin=float(account.maintenance_margin),\n+            sma=float(account.sma),\n+            day_trade_count=int(account.daytrade_count),\n+            regt_buying_power=float(account.regt_buying_power),\n+            daytrading_buying_power=float(account.daytrading_buying_power),\n+            multiplier=float(account.multiplier)\n+        )\n+    \n+    def get_positions(self) -> list[Position]:\n+        \"\"\"Get current positions.\"\"\"\n+        if not self._connected:\n+            raise RuntimeError(\"Not connected to broker\")\n+        \n+        positions = []\n+        alpaca_positions = self.trading_client.get_all_positions()\n+        \n+        for pos in alpaca_positions:\n+            side = \"long\" if float(pos.qty) > 0 else \"short\"\n+            \n+            # Handle optional unrealized_pnl - calculate if missing\n+            unrealized_pnl = 0.0\n+            if hasattr(pos, 'unrealized_pnl') and pos.unrealized_pnl is not None:\n+                unrealized_pnl = float(pos.unrealized_pnl)\n+            else:\n+                # Calculate unrealized P&L if not provided\n+                # unrealized_pnl = market_value - cost_basis\n+                unrealized_pnl = float(pos.market_value) - float(pos.cost_basis)\n+            \n+            positions.append(Position(\n+                symbol=pos.symbol,\n+                quantity=abs(float(pos.qty)),\n+                side=side,\n+                avg_entry_price=float(pos.avg_entry_price),\n+                market_value=float(pos.market_value),\n+                unrealized_pnl=unrealized_pnl,\n+                cost_basis=float(pos.cost_basis)\n+            ))\n+        \n+        return positions\n+    \n+    def get_position(self, symbol: str) -> Position | None:\n+        \"\"\"Get position for a specific symbol.\"\"\"\n+        if not self._connected:\n+            raise RuntimeError(\"Not connected to broker\")\n+        \n+        try:\n+            pos = self.trading_client.get_open_position(symbol)\n+            side = \"long\" if float(pos.qty) > 0 else \"short\"\n+            \n+            # Handle optional unrealized_pnl - calculate if missing\n+            unrealized_pnl = 0.0\n+            if hasattr(pos, 'unrealized_pnl') and pos.unrealized_pnl is not None:\n+                unrealized_pnl = float(pos.unrealized_pnl)\n+            else:\n+                # Calculate unrealized P&L if not provided\n+                unrealized_pnl = float(pos.market_value) - float(pos.cost_basis)\n+            \n+            return Position(\n+                symbol=pos.symbol,\n+                quantity=abs(float(pos.qty)),\n+                side=side,\n+                avg_entry_price=float(pos.avg_entry_price),\n+                market_value=float(pos.market_value),\n+                unrealized_pnl=unrealized_pnl,\n+                cost_basis=float(pos.cost_basis)\n+            )\n+            \n+        except APIError:\n+            # Position doesn't exist\n+            return None\n+    \n+    def place_order(self, symbol: str, quantity: float, side: str, \n+                   order_type: str = \"market\", limit_price: float | None = None,\n+                   stop_price: float | None = None) -> Order:\n+        \"\"\"Place a trading order.\"\"\"\n+        if not self._connected:\n+            raise RuntimeError(\"Not connected to broker\")\n+        \n+        # Convert side to Alpaca format\n+        if side == \"buy\":\n+            order_side = OrderSide.BUY\n+        elif side == \"sell\":\n+            order_side = OrderSide.SELL\n+        elif side == \"sell_short\":\n+            order_side = OrderSide.SELL\n+            # Note: Alpaca handles short selling automatically when selling more than owned\n+        else:\n+            raise ValueError(f\"Invalid order side: {side}\")\n+        \n+        # Create order request based on type\n+        try:\n+            if order_type == \"market\":\n+                order_request = MarketOrderRequest(\n+                    symbol=symbol,\n+                    qty=quantity,\n+                    side=order_side,\n+                    time_in_force=TimeInForce.DAY\n+                )\n+            elif order_type == \"limit\":\n+                if limit_price is None:\n+                    raise ValueError(\"Limit price required for limit orders\")\n+                order_request = LimitOrderRequest(\n+                    symbol=symbol,\n+                    qty=quantity,\n+                    side=order_side,\n+                    time_in_force=TimeInForce.DAY,\n+                    limit_price=limit_price\n+                )\n+            elif order_type == \"stop\":\n+                if stop_price is None:\n+                    raise ValueError(\"Stop price required for stop orders\")\n+                order_request = StopOrderRequest(\n+                    symbol=symbol,\n+                    qty=quantity,\n+                    side=order_side,\n+                    time_in_force=TimeInForce.DAY,\n+                    stop_price=stop_price\n+                )\n+            else:\n+                raise ValueError(f\"Invalid order type: {order_type}\")\n+            \n+            alpaca_order = self.trading_client.submit_order(order_request)\n+            \n+            return Order(\n+                id=str(alpaca_order.id),\n+                symbol=alpaca_order.symbol,\n+                quantity=float(alpaca_order.qty),\n+                side=side,\n+                order_type=order_type,\n+                status=alpaca_order.status.value,\n+                filled_price=float(alpaca_order.filled_avg_price) if alpaca_order.filled_avg_price else None,\n+                filled_quantity=float(alpaca_order.filled_qty) if alpaca_order.filled_qty else None,\n+                submitted_at=alpaca_order.submitted_at,\n+                filled_at=alpaca_order.filled_at\n+            )\n+            \n+        except APIError as e:\n+            logger.error(f\"Failed to place order: {e}\")\n+            raise RuntimeError(f\"Failed to place order: {e}\")\n+    \n+    def cancel_order(self, order_id: str) -> bool:\n+        \"\"\"Cancel an order.\"\"\"\n+        if not self._connected:\n+            raise RuntimeError(\"Not connected to broker\")\n+        \n+        try:\n+            self.trading_client.cancel_order_by_id(order_id)\n+            return True\n+        except APIError as e:\n+            logger.error(f\"Failed to cancel order {order_id}: {e}\")\n+            return False\n+    \n+    def get_orders(self, status: str | None = None) -> list[Order]:\n+        \"\"\"Get orders.\"\"\"\n+        if not self._connected:\n+            raise RuntimeError(\"Not connected to broker\")\n+        \n+        orders = []\n+        alpaca_orders = self.trading_client.get_orders()\n+        \n+        for order in alpaca_orders:\n+            if status is None or order.status.value == status:\n+                # Convert Alpaca side back to our format\n+                side = \"buy\" if order.side == OrderSide.BUY else \"sell\"\n+                \n+                orders.append(Order(\n+                    id=str(order.id),\n+                    symbol=order.symbol,\n+                    quantity=float(order.qty),\n+                    side=side,\n+                    order_type=order.order_type.value,\n+                    status=order.status.value,\n+                    filled_price=float(order.filled_avg_price) if order.filled_avg_price else None,\n+                    filled_quantity=float(order.filled_qty) if order.filled_qty else None,\n+                    submitted_at=order.submitted_at,\n+                    filled_at=order.filled_at\n+                ))\n+        \n+        return orders\n+    \n+    def get_order(self, order_id: str) -> Order | None:\n+        \"\"\"Get specific order.\"\"\"\n+        if not self._connected:\n+            raise RuntimeError(\"Not connected to broker\")\n+        \n+        try:\n+            order = self.trading_client.get_order_by_id(order_id)\n+            side = \"buy\" if order.side == OrderSide.BUY else \"sell\"\n+            \n+            return Order(\n+                id=str(order.id),\n+                symbol=order.symbol,\n+                quantity=float(order.qty),\n+                side=side,\n+                order_type=order.order_type.value,\n+                status=order.status.value,\n+                filled_price=float(order.filled_avg_price) if order.filled_avg_price else None,\n+                filled_quantity=float(order.filled_qty) if order.filled_qty else None,\n+                submitted_at=order.submitted_at,\n+                filled_at=order.filled_at\n+            )\n+            \n+        except APIError:\n+            return None\n+    \n+    def get_current_price(self, symbol: str) -> float:\n+        \"\"\"Get current price for a symbol.\"\"\"\n+        if not self._connected:\n+            raise RuntimeError(\"Not connected to broker\")\n+        \n+        try:\n+            request = StockLatestQuoteRequest(symbol_or_symbols=[symbol])\n+            quote = self.data_client.get_stock_latest_quote(request)\n+            \n+            if symbol in quote:\n+                return float(quote[symbol].bid_price)\n+            else:\n+                raise ValueError(f\"No quote available for {symbol}\")\n+                \n+        except APIError as e:\n+            logger.error(f\"Failed to get price for {symbol}: {e}\")\n+            raise RuntimeError(f\"Failed to get price for {symbol}: {e}\")\n+    \n+    def is_market_open(self) -> bool:\n+        \"\"\"Check if market is currently open.\"\"\"\n+        if not self._connected:\n+            raise RuntimeError(\"Not connected to broker\")\n+        \n+        try:\n+            clock = self.trading_client.get_clock()\n+            return clock.is_open\n+        except APIError as e:\n+            logger.error(f\"Failed to get market status: {e}\")\n+            return False\n+    \n+    def is_paper_trading(self) -> bool:\n+        \"\"\"Check if this is a paper trading account.\"\"\"\n+        return self.paper_trading\n+    \n+    def get_margin_requirement(self, symbol: str | None = None) -> float:\n+        \"\"\"Get margin requirement ratio for positions.\n+        \n+        Args:\n+            symbol: Stock symbol to get specific margin requirement for. \n+                   If None, returns account default margin requirement.\n+        \n+        Returns:\n+            float: Margin requirement ratio (e.g., 0.5 for 50% margin requirement).\n+        \"\"\"\n+        if not self._connected:\n+            raise RuntimeError(\"Not connected to broker\")\n+        \n+        try:\n+            # If a specific symbol is requested, get its asset-specific margin requirement\n+            if symbol:\n+                try:\n+                    asset = self.trading_client.get_asset(symbol)\n+                    if asset and hasattr(asset, 'maintenance_margin_requirement') and asset.maintenance_margin_requirement is not None:\n+                        # Alpaca returns margin requirement as percentage points (30.0 = 30%)\n+                        margin_req = asset.maintenance_margin_requirement\n+                        margin_float = float(margin_req)\n+                        \n+                        # Convert percentage points to ratio (30.0 -> 0.30)\n+                        if margin_float > 0:\n+                            return margin_float / 100.0\n+                        else:\n+                            # Invalid margin requirement, fall through to account default\n+                            print(f\"WARNING: Invalid margin requirement {margin_float} for {symbol}, using account default\")\n+                except APIError:\n+                    # Fall through to account-level default if asset not found\n+                    pass\n+                except Exception as e:\n+                    print(f\"DEBUG: Error processing margin requirement for {symbol}: {e}\")\n+                    # Fall through to account default\n+            \n+            # Fallback to account-level margin requirement\n+            account = self.trading_client.get_account()\n+            multiplier = float(account.multiplier) if account.multiplier else 1.0\n+            \n+            if multiplier > 1:\n+                # Margin account - typical requirement is 50% for most stocks\n+                return 0.5  # 50% margin requirement for margin accounts\n+            else:\n+                # Cash account - cannot use margin for overnight positions\n+                return 1.0  # 100% cash requirement for cash accounts (no margin)\n+                \n+        except APIError as e:\n+            logger.error(f\"Failed to get margin requirement: {e}\")\n+            return 0.5  # Default to 50% if we can't determine\n\\ No newline at end of file", "blob_url": "https://github.com/virattt/ai-hedge-fund/blob/626e4d48a5c47b47f10d0a878b82471fc14bddf5/src%2Ftrading%2Falpaca_broker.py", "raw_url": "https://github.com/virattt/ai-hedge-fund/raw/626e4d48a5c47b47f10d0a878b82471fc14bddf5/src%2Ftrading%2Falpaca_broker.py", "contents_url": "https://api.github.com/repos/virattt/ai-hedge-fund/contents/src%2Ftrading%2Falpaca_broker.py?ref=626e4d48a5c47b47f10d0a878b82471fc14bddf5"}, {"filename": "src/trading/broker_base.py", "status": "added", "additions": 194, "deletions": 0, "changes": 194, "patch": "@@ -0,0 +1,194 @@\n+\"\"\"Base broker interface for trading implementations.\"\"\"\n+\n+from abc import ABC, abstractmethod\n+from dataclasses import dataclass\n+from datetime import datetime\n+\n+\n+@dataclass\n+class Position:\n+    \"\"\"Represents a trading position.\"\"\"\n+    symbol: str\n+    quantity: float\n+    side: str  # \"long\" or \"short\"\n+    avg_entry_price: float\n+    market_value: float\n+    unrealized_pnl: float\n+    cost_basis: float\n+\n+\n+@dataclass\n+class Order:\n+    \"\"\"Represents a trading order.\"\"\"\n+    id: str\n+    symbol: str\n+    quantity: float\n+    side: str  # \"buy\", \"sell\", \"sell_short\"\n+    order_type: str  # \"market\", \"limit\", \"stop\"\n+    status: str  # \"pending\", \"filled\", \"canceled\", \"rejected\"\n+    filled_price: float | None = None\n+    filled_quantity: float | None = None\n+    submitted_at: datetime | None = None\n+    filled_at: datetime | None = None\n+\n+\n+@dataclass\n+class Account:\n+    \"\"\"Represents account information.\"\"\"\n+    cash: float\n+    buying_power: float\n+    portfolio_value: float\n+    equity: float\n+    initial_margin: float\n+    maintenance_margin: float\n+    sma: float  # Special Memorandum Account\n+    day_trade_count: int\n+    regt_buying_power: float\n+    daytrading_buying_power: float\n+    multiplier: float\n+\n+\n+class BrokerBase(ABC):\n+    \"\"\"Abstract base class for broker implementations.\"\"\"\n+    \n+    @abstractmethod\n+    def connect(self) -> bool:\n+        \"\"\"Connect to the broker API.\n+        \n+        Returns:\n+            bool: True if connection successful, False otherwise.\n+        \"\"\"\n+        pass\n+    \n+    @abstractmethod\n+    def disconnect(self) -> None:\n+        \"\"\"Disconnect from the broker API.\"\"\"\n+        pass\n+    \n+    @abstractmethod\n+    def get_account(self) -> Account:\n+        \"\"\"Get current account information.\n+        \n+        Returns:\n+            Account: Current account details.\n+        \"\"\"\n+        pass\n+    \n+    @abstractmethod\n+    def get_positions(self) -> list[Position]:\n+        \"\"\"Get current positions.\n+        \n+        Returns:\n+            list[Position]: List of current positions.\n+        \"\"\"\n+        pass\n+    \n+    @abstractmethod\n+    def get_position(self, symbol: str) -> Position | None:\n+        \"\"\"Get position for a specific symbol.\n+        \n+        Args:\n+            symbol: Stock symbol.\n+            \n+        Returns:\n+            Position | None: Position if exists, None otherwise.\n+        \"\"\"\n+        pass\n+    \n+    @abstractmethod\n+    def place_order(self, symbol: str, quantity: float, side: str, \n+                   order_type: str = \"market\", limit_price: float | None = None,\n+                   stop_price: float | None = None) -> Order:\n+        \"\"\"Place a trading order.\n+        \n+        Args:\n+            symbol: Stock symbol.\n+            quantity: Number of shares.\n+            side: \"buy\", \"sell\", or \"sell_short\".\n+            order_type: \"market\", \"limit\", or \"stop\".\n+            limit_price: Limit price for limit orders.\n+            stop_price: Stop price for stop orders.\n+            \n+        Returns:\n+            Order: The placed order.\n+        \"\"\"\n+        pass\n+    \n+    @abstractmethod\n+    def cancel_order(self, order_id: str) -> bool:\n+        \"\"\"Cancel an order.\n+        \n+        Args:\n+            order_id: Order ID to cancel.\n+            \n+        Returns:\n+            bool: True if cancellation successful, False otherwise.\n+        \"\"\"\n+        pass\n+    \n+    @abstractmethod\n+    def get_orders(self, status: str | None = None) -> list[Order]:\n+        \"\"\"Get orders.\n+        \n+        Args:\n+            status: Filter by order status. None for all orders.\n+            \n+        Returns:\n+            list[Order]: List of orders.\n+        \"\"\"\n+        pass\n+    \n+    @abstractmethod\n+    def get_order(self, order_id: str) -> Order | None:\n+        \"\"\"Get specific order.\n+        \n+        Args:\n+            order_id: Order ID.\n+            \n+        Returns:\n+            Order | None: Order if exists, None otherwise.\n+        \"\"\"\n+        pass\n+    \n+    @abstractmethod\n+    def get_current_price(self, symbol: str) -> float:\n+        \"\"\"Get current price for a symbol.\n+        \n+        Args:\n+            symbol: Stock symbol.\n+            \n+        Returns:\n+            float: Current price.\n+        \"\"\"\n+        pass\n+    \n+    @abstractmethod\n+    def is_market_open(self) -> bool:\n+        \"\"\"Check if market is currently open.\n+        \n+        Returns:\n+            bool: True if market is open, False otherwise.\n+        \"\"\"\n+        pass\n+    \n+    @abstractmethod\n+    def is_paper_trading(self) -> bool:\n+        \"\"\"Check if this is a paper trading account.\n+        \n+        Returns:\n+            bool: True if paper trading, False if live trading.\n+        \"\"\"\n+        pass\n+    \n+    @abstractmethod\n+    def get_margin_requirement(self, symbol: str | None = None) -> float:\n+        \"\"\"Get margin requirement ratio for positions.\n+        \n+        Args:\n+            symbol: Stock symbol to get specific margin requirement for. \n+                   If None, returns account default margin requirement.\n+        \n+        Returns:\n+            float: Margin requirement ratio (e.g., 0.5 for 50% margin requirement).\n+        \"\"\"\n+        pass\n\\ No newline at end of file", "blob_url": "https://github.com/virattt/ai-hedge-fund/blob/626e4d48a5c47b47f10d0a878b82471fc14bddf5/src%2Ftrading%2Fbroker_base.py", "raw_url": "https://github.com/virattt/ai-hedge-fund/raw/626e4d48a5c47b47f10d0a878b82471fc14bddf5/src%2Ftrading%2Fbroker_base.py", "contents_url": "https://api.github.com/repos/virattt/ai-hedge-fund/contents/src%2Ftrading%2Fbroker_base.py?ref=626e4d48a5c47b47f10d0a878b82471fc14bddf5"}, {"filename": "src/trading/trader.py", "status": "added", "additions": 680, "deletions": 0, "changes": 680, "patch": "@@ -0,0 +1,680 @@\n+\"\"\"Live trading implementation using the hedge fund AI agents.\"\"\"\n+\n+import sys\n+import time\n+import logging\n+from datetime import datetime, timedelta\n+from dateutil.relativedelta import relativedelta\n+from colorama import Fore, Style\n+\n+from .broker_base import BrokerBase, Position, Order\n+from .alpaca_broker import AlpacaBroker\n+from src.main import run_hedge_fund\n+from src.utils.progress import progress\n+\n+\n+logger = logging.getLogger(__name__)\n+\n+\n+class Trader:\n+    \"\"\"Live trading implementation using AI hedge fund decisions.\"\"\"\n+    \n+    def __init__(\n+        self,\n+        broker: BrokerBase,\n+        tickers: list[str],\n+        selected_analysts: list[str] = None,\n+        model_name: str = \"gpt-4o\",\n+        model_provider: str = \"OpenAI\",\n+        available_capital: float = None,  # Override available capital\n+        margin_requirement: float = None,  # Margin requirement for short positions\n+        dry_run: bool = False,\n+        ignore_market_hours: bool = False\n+    ):\n+        \"\"\"Initialize the trader.\n+        \n+        Args:\n+            broker: Broker implementation to use.\n+            tickers: List of tickers to trade.\n+            selected_analysts: List of analysts to use.\n+            model_name: LLM model name.\n+            model_provider: LLM provider.\n+            available_capital: Override available capital (uses broker cash if None).\n+            margin_requirement: Margin requirement ratio for short positions.\n+            dry_run: If True, log trades but don't execute them.\n+            ignore_market_hours: If True, run even when market is closed.\n+        \"\"\"\n+        self.broker = broker\n+        self.tickers = tickers\n+        self.selected_analysts = selected_analysts or []\n+        self.model_name = model_name\n+        self.model_provider = model_provider\n+        self.available_capital = available_capital\n+        self.margin_requirement = margin_requirement\n+        self.dry_run = dry_run\n+        self.ignore_market_hours = ignore_market_hours\n+        \n+        # Track our virtual portfolio for decision making\n+        self.virtual_portfolio = None\n+        self.last_sync_time = None\n+    \n+    def _map_order_to_action(self, order: Order, symbol: str) -> str:\n+        \"\"\"Map a broker order to our action type.\"\"\"\n+        if order.side == \"buy\":\n+            # Could be buy or cover - check if we have short positions\n+            current_pos = self.broker.get_position(symbol)\n+            if current_pos and current_pos.side == \"short\":\n+                return \"cover\"\n+            else:\n+                return \"buy\"\n+        elif order.side == \"sell\":\n+            # Could be sell or short - check if we have long positions\n+            current_pos = self.broker.get_position(symbol)\n+            if current_pos and current_pos.side == \"long\":\n+                return \"sell\"\n+            else:\n+                return \"short\"\n+        else:\n+            return \"unknown\"\n+    \n+    def _close_position_and_wait(self, symbol: str, position_type: str, position_size: float) -> Order:\n+        \"\"\"Close existing position and wait for fill.\n+        \n+        Args:\n+            symbol: Stock symbol\n+            position_type: 'long' or 'short'\n+            position_size: Number of shares to close\n+            \n+        Returns:\n+            Order: The close order\n+        \"\"\"\n+        if position_type == \"long\":\n+            action_name = \"close long\"\n+            order_side = \"sell\"\n+        else:  # short\n+            action_name = \"close short\"\n+            order_side = \"buy\"\n+        \n+        print(f\"{Fore.CYAN}Step 1: {action_name.title()} - {order_side} {position_size} shares{Style.RESET_ALL}\")\n+        close_order = self.broker.place_order(symbol, position_size, order_side)\n+        print(f\"{Fore.GREEN}Close order placed: {close_order.id}{Style.RESET_ALL}\")\n+        \n+        # Wait for close order to fill\n+        self._wait_for_order_fill(close_order.id, action_name)\n+        return close_order\n+    \n+    def _wait_for_order_fill(self, order_id: str, action_name: str) -> None:\n+        \"\"\"Wait for order to fill with timeout.\n+        \n+        Args:\n+            order_id: Order ID to monitor\n+            action_name: Human-readable action name for logging\n+        \"\"\"\n+        print(f\"{Fore.CYAN}Waiting for {action_name} order to fill...{Style.RESET_ALL}\")\n+        max_wait_time = 30  # seconds\n+        wait_time = 0\n+        while wait_time < max_wait_time:\n+            updated_order = self.broker.get_order(order_id)\n+            if updated_order and updated_order.status == \"filled\":\n+                print(f\"{Fore.GREEN}{action_name.title()} order filled successfully{Style.RESET_ALL}\")\n+                return\n+            time.sleep(2)\n+            wait_time += 2\n+        \n+        print(f\"{Fore.YELLOW}{action_name.title()} order still pending after {max_wait_time}s, proceeding anyway{Style.RESET_ALL}\")\n+    \n+    def _execute_position_transition(self, symbol: str, action: str, quantity: float, \n+                                   current_long: float, current_short: float) -> Order:\n+        \"\"\"Execute position transition with proper sequencing.\n+        \n+        Args:\n+            symbol: Stock symbol\n+            action: Target action (buy/sell/short/cover)\n+            quantity: Total quantity for the action\n+            current_long: Current long position size\n+            current_short: Current short position size\n+            \n+        Returns:\n+            Order: The final order executed\n+        \"\"\"\n+        if action == \"buy\" and current_short > 0:\n+            # Short -> Long transition\n+            print(f\"{Fore.CYAN}Detected short position of {current_short} shares, splitting buy order{Style.RESET_ALL}\")\n+            \n+            # Close short position\n+            cover_quantity = min(quantity, current_short)\n+            close_order = self._close_position_and_wait(symbol, \"short\", cover_quantity)\n+            \n+            # Buy remaining for long position\n+            remaining_quantity = quantity - cover_quantity\n+            if remaining_quantity > 0:\n+                print(f\"{Fore.CYAN}Step 2: Buying {remaining_quantity} additional shares for long position{Style.RESET_ALL}\")\n+                return self.broker.place_order(symbol, remaining_quantity, \"buy\")\n+            else:\n+                print(f\"{Fore.CYAN}Short position fully covered, no additional long position needed{Style.RESET_ALL}\")\n+                return close_order\n+                \n+        elif action == \"sell\" and current_long > 0 and quantity > current_long:\n+            # Long -> Short transition (selling more than owned)\n+            print(f\"{Fore.CYAN}Detected long position of {current_long} shares, splitting sell order{Style.RESET_ALL}\")\n+            \n+            # Close long position\n+            close_order = self._close_position_and_wait(symbol, \"long\", current_long)\n+            \n+            # Short sell remaining\n+            remaining_quantity = quantity - current_long\n+            print(f\"{Fore.CYAN}Step 2: Short selling {remaining_quantity} additional shares{Style.RESET_ALL}\")\n+            return self.broker.place_order(symbol, remaining_quantity, \"sell_short\")\n+            \n+        elif action == \"short\" and current_long > 0:\n+            # Long -> Short transition (close long first)\n+            print(f\"{Fore.CYAN}Detected long position of {current_long} shares, closing before short sale{Style.RESET_ALL}\")\n+            \n+            # Close long position\n+            self._close_position_and_wait(symbol, \"long\", current_long)\n+            \n+            # Short sell the requested quantity\n+            print(f\"{Fore.CYAN}Step 2: Short selling {quantity} shares{Style.RESET_ALL}\")\n+            return self.broker.place_order(symbol, quantity, \"sell_short\")\n+            \n+        elif action == \"cover\" and current_short > 0 and quantity > current_short:\n+            # Short -> Long transition (covering more than short)\n+            print(f\"{Fore.CYAN}Detected short position of {current_short} shares, splitting cover order{Style.RESET_ALL}\")\n+            \n+            # Cover short position\n+            self._close_position_and_wait(symbol, \"short\", current_short)\n+            \n+            # Buy remaining for long position\n+            remaining_quantity = quantity - current_short\n+            print(f\"{Fore.CYAN}Step 2: Buying {remaining_quantity} additional shares for long position{Style.RESET_ALL}\")\n+            return self.broker.place_order(symbol, remaining_quantity, \"buy\")\n+            \n+        else:\n+            # No position transition needed - execute normal order\n+            return self._execute_simple_order(symbol, action, quantity, current_long, current_short)\n+    \n+    def _execute_simple_order(self, symbol: str, action: str, quantity: float,\n+                            current_long: float, current_short: float) -> Order | None:\n+        \"\"\"Execute simple order without position transitions.\n+        \n+        Args:\n+            symbol: Stock symbol\n+            action: Trading action\n+            quantity: Number of shares\n+            current_long: Current long position\n+            current_short: Current short position\n+            \n+        Returns:\n+            Order or None if cannot execute\n+        \"\"\"\n+        if action == \"buy\":\n+            return self.broker.place_order(symbol, quantity, \"buy\")\n+        elif action == \"sell\":\n+            if current_long > 0:\n+                return self.broker.place_order(symbol, quantity, \"sell\")\n+            else:\n+                print(f\"{Fore.YELLOW}Cannot sell {symbol}: no long position{Style.RESET_ALL}\")\n+                return None\n+        elif action == \"short\":\n+            return self.broker.place_order(symbol, quantity, \"sell_short\")\n+        elif action == \"cover\":\n+            if current_short > 0:\n+                return self.broker.place_order(symbol, quantity, \"buy\")\n+            else:\n+                print(f\"{Fore.YELLOW}Cannot cover {symbol}: no short position{Style.RESET_ALL}\")\n+                return None\n+        else:\n+            print(f\"{Fore.RED}Unknown action: {action}{Style.RESET_ALL}\")\n+            return None\n+\n+    def _handle_hold_decision(self, symbol: str) -> Order | None:\n+        \"\"\"Handle AI decision to hold - cancel any pending orders.\"\"\"\n+        if self.dry_run:\n+            print(f\"{Fore.CYAN}DRY RUN: Would hold {symbol} (cancel any pending orders){Style.RESET_ALL}\")\n+            return None\n+        \n+        # Get pending orders and cancel them\n+        pending_orders = [order for order in self.broker.get_orders() \n+                         if order.symbol == symbol and order.status in [\"pending_new\", \"new\", \"accepted\"]]\n+        \n+        if pending_orders:\n+            print(f\"{Fore.CYAN}AI says hold {symbol}, canceling {len(pending_orders)} pending orders{Style.RESET_ALL}\")\n+            for order in pending_orders:\n+                action = self._map_order_to_action(order, symbol)\n+                print(f\"{Fore.YELLOW}Canceling pending {action} order for {order.quantity} shares{Style.RESET_ALL}\")\n+                if self.broker.cancel_order(order.id):\n+                    print(f\"{Fore.GREEN}Canceled order {order.id}{Style.RESET_ALL}\")\n+                else:\n+                    print(f\"{Fore.RED}Failed to cancel order {order.id}{Style.RESET_ALL}\")\n+        else:\n+            print(f\"{Fore.CYAN}Holding {symbol} (no pending orders to cancel){Style.RESET_ALL}\")\n+        \n+        return None\n+        \n+    def connect(self) -> bool:\n+        \"\"\"Connect to the broker.\"\"\"\n+        return self.broker.connect()\n+    \n+    def disconnect(self) -> None:\n+        \"\"\"Disconnect from the broker.\"\"\"\n+        self.broker.disconnect()\n+    \n+    def sync_portfolio(self) -> None:\n+        \"\"\"Sync virtual portfolio with actual broker positions.\"\"\"\n+        # Temporarily stop progress display to show debug output\n+        was_started = progress.started\n+        if was_started:\n+            progress.stop()\n+        \n+        try:\n+            # Ensure broker connection is active with retry\n+            max_retries = 3\n+            for attempt in range(max_retries):\n+                try:\n+                    if not self.broker._connected:\n+                        print(f\"{Fore.YELLOW}Reconnecting to broker (attempt {attempt + 1})...{Style.RESET_ALL}\")\n+                        self.broker.connect()\n+                    \n+                    account = self.broker.get_account()\n+                    positions = self.broker.get_positions()\n+                    pending_orders = self.broker.get_orders() if not self.dry_run else []\n+                    break  # Success, exit retry loop\n+                    \n+                except Exception as e:\n+                    if attempt < max_retries - 1:\n+                        print(f\"{Fore.YELLOW}Connection failed, retrying in 5 seconds... ({e}){Style.RESET_ALL}\")\n+                        time.sleep(5)\n+                        self.broker._connected = False  # Force reconnection\n+                    else:\n+                        raise  # Re-raise if all retries failed\n+            \n+            # Create virtual portfolio structure similar to backtester\n+            # Use limited capital if specified, but keep the account's margin capability\n+            actual_cash = account.cash\n+            limited_cash = self.available_capital if self.available_capital is not None else actual_cash\n+            \n+            # Calculate the fraction of available capital we're using\n+            capital_fraction = limited_cash / actual_cash if actual_cash > 0 else 1.0\n+            \n+            self.virtual_portfolio = {\n+                \"cash\": limited_cash,\n+                \"margin_requirement\": self.margin_requirement if self.margin_requirement is not None else self.broker.get_margin_requirement(),\n+                \"margin_used\": account.initial_margin * capital_fraction,  # Scale margin usage proportionally\n+                \"positions\": {},\n+                \"realized_gains\": {},\n+                \"pending_orders\": {}  # Track pending orders\n+            }\n+            \n+            # Initialize all tickers\n+            for ticker in self.tickers:\n+                self.virtual_portfolio[\"positions\"][ticker] = {\n+                    \"long\": 0,\n+                    \"short\": 0,\n+                    \"long_cost_basis\": 0.0,\n+                    \"short_cost_basis\": 0.0,\n+                    \"short_margin_used\": 0.0,\n+                }\n+                self.virtual_portfolio[\"realized_gains\"][ticker] = {\n+                    \"long\": 0.0,\n+                    \"short\": 0.0,\n+                }\n+                self.virtual_portfolio[\"pending_orders\"][ticker] = {\n+                    \"buy\": 0,\n+                    \"sell\": 0,\n+                    \"short\": 0,\n+                    \"cover\": 0,\n+                }\n+            \n+            # Update with actual positions\n+            print(f\"{Fore.YELLOW}DEBUG: Syncing {len(positions)} positions from broker{Style.RESET_ALL}\")\n+            for position in positions:\n+                print(f\"DEBUG: Position {position.symbol}: {position.side} {position.quantity} shares\")\n+                if position.symbol in self.virtual_portfolio[\"positions\"]:\n+                    if position.side == \"long\":\n+                        self.virtual_portfolio[\"positions\"][position.symbol][\"long\"] = position.quantity\n+                        self.virtual_portfolio[\"positions\"][position.symbol][\"long_cost_basis\"] = position.avg_entry_price\n+                        print(f\"DEBUG: Updated {position.symbol} long: {position.quantity} shares\")\n+                    else:  # short\n+                        self.virtual_portfolio[\"positions\"][position.symbol][\"short\"] = position.quantity\n+                        self.virtual_portfolio[\"positions\"][position.symbol][\"short_cost_basis\"] = position.avg_entry_price\n+                        print(f\"DEBUG: Updated {position.symbol} short: {position.quantity} shares\")\n+                else:\n+                    print(f\"DEBUG: Skipping {position.symbol} - not in tickers list\")\n+            \n+            # Debug: Show what the virtual portfolio looks like after sync\n+            print(f\"{Fore.YELLOW}DEBUG: Virtual portfolio positions after sync:{Style.RESET_ALL}\")\n+            for ticker in self.tickers:\n+                pos = self.virtual_portfolio[\"positions\"][ticker]\n+                print(f\"  {ticker}: long={pos['long']}, short={pos['short']}\")\n+            \n+            # Track pending orders\n+            for order in pending_orders:\n+                if order.symbol in self.virtual_portfolio[\"pending_orders\"] and order.status in [\"pending_new\", \"new\", \"accepted\"]:\n+                    # Map order sides to our action types\n+                    if order.side == \"buy\":\n+                        action = \"buy\"\n+                    elif order.side == \"sell\":\n+                        # Need to determine if this is a sell or cover based on current position\n+                        current_pos = self.virtual_portfolio[\"positions\"].get(order.symbol, {})\n+                        if current_pos.get(\"short\", 0) > 0:\n+                            action = \"cover\"\n+                        else:\n+                            action = \"sell\"\n+                    else:\n+                        action = \"short\"  # sell_short\n+                    \n+                    self.virtual_portfolio[\"pending_orders\"][order.symbol][action] += order.quantity\n+                    print(f\"{Fore.CYAN}Found pending {action} order for {order.symbol}: {order.quantity} shares{Style.RESET_ALL}\")\n+            \n+            self.last_sync_time = datetime.now()\n+            print(f\"{Fore.GREEN}Portfolio synced with broker{Style.RESET_ALL}\")\n+            \n+        except Exception as e:\n+            logger.error(f\"Failed to sync portfolio: {e}\")\n+            print(f\"{Fore.RED}Failed to sync portfolio: {e}{Style.RESET_ALL}\")\n+            raise\n+        finally:\n+            # Restart progress display if it was running\n+            if was_started:\n+                progress.start()\n+    \n+    def get_hedge_fund_decisions(self) -> dict:\n+        \"\"\"Get trading decisions from the AI hedge fund.\"\"\"\n+        if not self.virtual_portfolio:\n+            raise RuntimeError(\"Portfolio not synced. Call sync_portfolio() first.\")\n+        \n+        # Use 30-day lookback period\n+        end_date = datetime.now().strftime(\"%Y-%m-%d\")\n+        start_date = (datetime.now() - timedelta(days=30)).strftime(\"%Y-%m-%d\")\n+        \n+        print(f\"{Fore.CYAN}Getting AI hedge fund decisions...{Style.RESET_ALL}\")\n+        \n+        try:\n+            result = run_hedge_fund(\n+                tickers=self.tickers,\n+                start_date=start_date,\n+                end_date=end_date,\n+                portfolio=self.virtual_portfolio,\n+                show_reasoning=False,\n+                selected_analysts=self.selected_analysts,\n+                model_name=self.model_name,\n+                model_provider=self.model_provider,\n+            )\n+            \n+            return result\n+            \n+        except Exception as e:\n+            logger.error(f\"Failed to get hedge fund decisions: {e}\")\n+            print(f\"{Fore.RED}Failed to get hedge fund decisions: {e}{Style.RESET_ALL}\")\n+            raise\n+    \n+    def calculate_position_size(self, symbol: str, decision: dict) -> float:\n+        \"\"\"Get position size from AI decision (Risk Management Agent handles sizing).\"\"\"\n+        if not self.virtual_portfolio:\n+            raise RuntimeError(\"Portfolio not synced\")\n+        \n+        # Trust the Risk Management Agent - just return what it calculated\n+        requested_quantity = decision.get(\"quantity\", 0)\n+        return int(requested_quantity) if requested_quantity > 0 else 0\n+    \n+    def execute_trade(self, symbol: str, decision: dict) -> Order | None:\n+        \"\"\"Execute a single trade based on AI decision.\"\"\"\n+        action = decision.get(\"action\", \"hold\")\n+        \n+        if action == \"hold\":\n+            return self._handle_hold_decision(symbol)\n+        \n+        # Calculate position size\n+        quantity = self.calculate_position_size(symbol, decision)\n+        if quantity <= 0:\n+            print(f\"{Fore.YELLOW}Skipping {symbol}: quantity too small{Style.RESET_ALL}\")\n+            return None\n+        \n+        # Check for existing pending orders and handle them\n+        if not self.dry_run:\n+            existing_orders = [order for order in self.broker.get_orders() \n+                             if order.symbol == symbol and order.status in [\"pending_new\", \"new\", \"accepted\"]]\n+            \n+            for existing_order in existing_orders:\n+                # Determine the action of the existing order\n+                existing_action = self._map_order_to_action(existing_order, symbol)\n+                \n+                # If same action and same quantity, skip\n+                if existing_action == action and existing_order.quantity == quantity:\n+                    print(f\"{Fore.CYAN}Skipping {symbol}: Identical {action} order for {quantity} shares already pending{Style.RESET_ALL}\")\n+                    return None\n+                \n+                # Different action or quantity - cancel the existing order\n+                print(f\"{Fore.YELLOW}Canceling existing {existing_action} order for {existing_order.quantity} shares to place new {action} order for {quantity} shares{Style.RESET_ALL}\")\n+                if self.broker.cancel_order(existing_order.id):\n+                    print(f\"{Fore.GREEN}Canceled order {existing_order.id}{Style.RESET_ALL}\")\n+                else:\n+                    print(f\"{Fore.RED}Failed to cancel order {existing_order.id}{Style.RESET_ALL}\")\n+        \n+        # Get current position\n+        current_position = self.broker.get_position(symbol)\n+        current_long = current_position.quantity if current_position and current_position.side == \"long\" else 0\n+        current_short = current_position.quantity if current_position and current_position.side == \"short\" else 0\n+        \n+        print(f\"{Fore.CYAN}Executing {action} {quantity} shares of {symbol}{Style.RESET_ALL}\")\n+        \n+        if self.dry_run:\n+            print(f\"{Fore.YELLOW}DRY RUN: Would {action} {quantity} shares of {symbol} at current price{Style.RESET_ALL}\")\n+            # Create a mock order for dry run\n+            return Order(\n+                id=f\"DRY_RUN_{symbol}_{action}_{int(time.time())}\",\n+                symbol=symbol,\n+                quantity=quantity,\n+                side=action,\n+                order_type=\"market\",\n+                status=\"filled\",\n+                filled_price=0.0,  # Would need current price in real scenario\n+                filled_quantity=quantity\n+            )\n+        \n+        try:\n+            # Double-check dry run protection\n+            if self.dry_run:\n+                print(f\"{Fore.RED}ERROR: Attempted to place real order in dry-run mode! This should not happen.{Style.RESET_ALL}\")\n+                return None\n+            \n+            # Execute order with smart position transition handling\n+            order = self._execute_position_transition(symbol, action, quantity, current_long, current_short)\n+            \n+            if order:\n+                print(f\"{Fore.GREEN}Order placed: {order.id} - {action} {order.quantity} {symbol}{Style.RESET_ALL}\")\n+            return order\n+            \n+        except Exception as e:\n+            logger.error(f\"Failed to execute trade for {symbol}: {e}\")\n+            print(f\"{Fore.RED}Failed to execute trade for {symbol}: {e}{Style.RESET_ALL}\")\n+            return None\n+    \n+    def run_trading_session(self) -> None:\n+        \"\"\"Run a single trading session.\"\"\"\n+        print(f\"{Fore.BLUE}{'='*50}\")\n+        print(f\"Starting trading session at {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\")\n+        print(f\"{'='*50}{Style.RESET_ALL}\")\n+        \n+        if self.dry_run:\n+            print(f\"{Fore.YELLOW}\ud83d\udd04 DRY RUN MODE - No real trades will be executed{Style.RESET_ALL}\")\n+        \n+        try:\n+            # Check if market is open (unless ignoring market hours)\n+            if not self.ignore_market_hours and not self.broker.is_market_open():\n+                print(f\"{Fore.YELLOW}Market is closed. Skipping trading session.{Style.RESET_ALL}\")\n+                print(f\"{Fore.CYAN}Use --ignore-market-hours to run anyway{Style.RESET_ALL}\")\n+                return\n+            elif self.ignore_market_hours and not self.broker.is_market_open():\n+                print(f\"{Fore.YELLOW}Market is closed, but ignoring market hours as requested{Style.RESET_ALL}\")\n+            \n+            # Sync portfolio with broker\n+            print(f\"{Fore.CYAN}DEBUG: About to sync portfolio...{Style.RESET_ALL}\")\n+            self.sync_portfolio()\n+            print(f\"{Fore.CYAN}DEBUG: Portfolio sync completed{Style.RESET_ALL}\")\n+            \n+            # Get AI decisions\n+            result = self.get_hedge_fund_decisions()\n+            decisions = result.get(\"decisions\", {})\n+            analyst_signals = result.get(\"analyst_signals\", {})\n+            \n+            # Display decisions\n+            print(f\"\\n{Fore.WHITE}{Style.BRIGHT}AI HEDGE FUND DECISIONS:{Style.RESET_ALL}\")\n+            for ticker, decision in decisions.items():\n+                action = decision.get(\"action\", \"hold\")\n+                quantity = decision.get(\"quantity\", 0)\n+                reasoning = decision.get(\"reasoning\", \"No reasoning provided\")\n+                \n+                color = {\n+                    \"buy\": Fore.GREEN,\n+                    \"sell\": Fore.RED,\n+                    \"short\": Fore.MAGENTA,\n+                    \"cover\": Fore.CYAN,\n+                    \"hold\": Fore.YELLOW\n+                }.get(action, Fore.WHITE)\n+                \n+                print(f\"{color}{ticker}: {action.upper()} {quantity} shares{Style.RESET_ALL}\")\n+                print(f\"  Reasoning: {reasoning[:100]}...\")\n+            \n+            # Execute trades\n+            executed_orders = []\n+            print(f\"\\n{Fore.WHITE}{Style.BRIGHT}EXECUTING TRADES:{Style.RESET_ALL}\")\n+            \n+            for ticker, decision in decisions.items():\n+                order = self.execute_trade(ticker, decision)\n+                if order:\n+                    executed_orders.append(order)\n+            \n+            # Wait for orders to fill (basic implementation)\n+            if executed_orders and not self.dry_run:\n+                print(f\"\\n{Fore.CYAN}Monitoring order execution...{Style.RESET_ALL}\")\n+                time.sleep(5)  # Wait a bit for market orders to fill\n+                \n+                for order in executed_orders:\n+                    updated_order = self.broker.get_order(order.id)\n+                    if updated_order:\n+                        status_color = Fore.GREEN if updated_order.status == \"filled\" else Fore.YELLOW\n+                        print(f\"{status_color}Order {order.id}: {updated_order.status}{Style.RESET_ALL}\")\n+            \n+            print(f\"\\n{Fore.GREEN}Trading session completed{Style.RESET_ALL}\")\n+            sys.stdout.flush()\n+            \n+        except Exception as e:\n+            logger.error(f\"Trading session failed: {e}\")\n+            print(f\"{Fore.RED}Trading session failed: {e}{Style.RESET_ALL}\")\n+    \n+    def run_continuous_trading(self, interval_minutes: int = 60) -> None:\n+        \"\"\"Run continuous trading with specified interval.\"\"\"\n+        print(f\"{Fore.BLUE}Starting continuous trading (interval: {interval_minutes} minutes){Style.RESET_ALL}\")\n+        \n+        try:\n+            while True:\n+                self.run_trading_session()\n+                \n+                print(f\"\\n{Fore.CYAN}Waiting {interval_minutes} minutes until next session...{Style.RESET_ALL}\")\n+                time.sleep(interval_minutes * 60)\n+                \n+        except KeyboardInterrupt:\n+            print(f\"\\n{Fore.YELLOW}Trading stopped by user{Style.RESET_ALL}\")\n+        except Exception as e:\n+            logger.error(f\"Continuous trading failed: {e}\")\n+            print(f\"{Fore.RED}Continuous trading failed: {e}{Style.RESET_ALL}\")\n+    \n+    def print_portfolio_summary(self) -> None:\n+        \"\"\"Print current portfolio summary.\"\"\"\n+        try:\n+            account = self.broker.get_account()\n+            positions = self.broker.get_positions()\n+            pending_orders = self.broker.get_orders(status=\"pending_new\") if not self.dry_run else []\n+            open_orders = self.broker.get_orders() if not self.dry_run else []\n+            \n+            print(f\"\\n{Fore.WHITE}{Style.BRIGHT}PORTFOLIO SUMMARY:{Style.RESET_ALL}\")\n+            print(f\"Portfolio Value: ${account.portfolio_value:,.2f}\")\n+            print(f\"Cash: ${account.cash:,.2f}\")\n+            print(f\"Buying Power: ${account.buying_power:,.2f}\")\n+            print(f\"Day Trade Count: {account.day_trade_count}\")\n+            \n+            if positions:\n+                print(f\"\\n{Fore.WHITE}{Style.BRIGHT}POSITIONS:{Style.RESET_ALL}\")\n+                for pos in positions:\n+                    color = Fore.GREEN if pos.unrealized_pnl >= 0 else Fore.RED\n+                    print(f\"{pos.symbol}: {pos.side} {pos.quantity:,.0f} shares @ ${pos.avg_entry_price:.2f}\")\n+                    print(f\"  Market Value: ${pos.market_value:,.2f}\")\n+                    print(f\"  {color}Unrealized P&L: ${pos.unrealized_pnl:,.2f}{Style.RESET_ALL}\")\n+            else:\n+                print(f\"\\n{Fore.YELLOW}No open positions{Style.RESET_ALL}\")\n+            \n+            # Show pending/open orders\n+            if open_orders:\n+                print(f\"\\n{Fore.WHITE}{Style.BRIGHT}ORDERS:{Style.RESET_ALL}\")\n+                for order in open_orders:\n+                    status_color = {\n+                        \"pending_new\": Fore.YELLOW,\n+                        \"new\": Fore.CYAN,\n+                        \"partially_filled\": Fore.BLUE,\n+                        \"filled\": Fore.GREEN,\n+                        \"done_for_day\": Fore.MAGENTA,\n+                        \"canceled\": Fore.RED,\n+                        \"expired\": Fore.RED,\n+                        \"replaced\": Fore.YELLOW,\n+                        \"pending_cancel\": Fore.YELLOW,\n+                        \"pending_replace\": Fore.YELLOW,\n+                        \"accepted\": Fore.CYAN,\n+                        \"accepted_for_bidding\": Fore.CYAN,\n+                        \"stopped\": Fore.RED,\n+                        \"rejected\": Fore.RED,\n+                        \"suspended\": Fore.RED\n+                    }.get(order.status, Fore.WHITE)\n+                    \n+                    print(f\"{order.symbol}: {status_color}{order.status.upper()}{Style.RESET_ALL} - {order.side} {order.quantity} @ {order.order_type}\")\n+                    print(f\"  Order ID: {order.id}\")\n+                    if order.submitted_at:\n+                        print(f\"  Submitted: {order.submitted_at.strftime('%Y-%m-%d %H:%M:%S')}\")\n+                    if order.filled_quantity and order.filled_quantity > 0:\n+                        print(f\"  Filled: {order.filled_quantity}/{order.quantity} @ ${order.filled_price:.2f}\")\n+            else:\n+                print(f\"\\n{Fore.YELLOW}No pending orders{Style.RESET_ALL}\")\n+                \n+        except Exception as e:\n+            logger.error(f\"Failed to get portfolio summary: {e}\")\n+            print(f\"{Fore.RED}Failed to get portfolio summary: {e}{Style.RESET_ALL}\")\n+\n+\n+def create_trader(\n+    tickers: list[str],\n+    selected_analysts: list[str] = None,\n+    model_name: str = \"gpt-4o\",\n+    model_provider: str = \"OpenAI\",\n+    available_capital: float = None,\n+    margin_requirement: float = None,\n+    dry_run: bool = False,\n+    ignore_market_hours: bool = False\n+) -> Trader:\n+    \"\"\"Create a configured trader instance.\n+    \n+    Args:\n+        tickers: List of tickers to trade.\n+        selected_analysts: List of analysts to use.\n+        model_name: LLM model name.\n+        model_provider: LLM provider.\n+        available_capital: Override available capital (uses broker cash if None).\n+        margin_requirement: Margin requirement ratio for short positions.\n+        dry_run: If True, log trades but don't execute them.\n+        ignore_market_hours: If True, run even when market is closed.\n+        \n+    Returns:\n+        Trader: Configured trader instance.\n+    \"\"\"\n+    broker = AlpacaBroker()  # Will read ALPACA_PAPER from environment\n+    \n+    return Trader(\n+        broker=broker,\n+        tickers=tickers,\n+        selected_analysts=selected_analysts,\n+        model_name=model_name,\n+        model_provider=model_provider,\n+        available_capital=available_capital,\n+        margin_requirement=margin_requirement,\n+        dry_run=dry_run,\n+        ignore_market_hours=ignore_market_hours\n+    )\n\\ No newline at end of file", "blob_url": "https://github.com/virattt/ai-hedge-fund/blob/626e4d48a5c47b47f10d0a878b82471fc14bddf5/src%2Ftrading%2Ftrader.py", "raw_url": "https://github.com/virattt/ai-hedge-fund/raw/626e4d48a5c47b47f10d0a878b82471fc14bddf5/src%2Ftrading%2Ftrader.py", "contents_url": "https://api.github.com/repos/virattt/ai-hedge-fund/contents/src%2Ftrading%2Ftrader.py?ref=626e4d48a5c47b47f10d0a878b82471fc14bddf5"}], "commits_data": [{"sha": "0242e648022bd84db9289a443382cd32e5d7b123", "message": "feat: added alpaca trading", "author": "Alexander Malysh", "date": "2025-06-27 09:42:38+00:00", "url": "https://github.com/virattt/ai-hedge-fund/commit/0242e648022bd84db9289a443382cd32e5d7b123"}, {"sha": "ae5191b52a197f45d8097cb5035380867a196a0e", "message": "Merge branch 'main' into alpaca-trading", "author": "Alexander Malysh", "date": "2025-06-27 10:17:19+00:00", "url": "https://github.com/virattt/ai-hedge-fund/commit/ae5191b52a197f45d8097cb5035380867a196a0e"}, {"sha": "fafeaa45a55b033c5d89c95f63914c05d54a4151", "message": "fix: added missing alpaca-py package", "author": "Alexander Malysh", "date": "2025-06-27 10:46:33+00:00", "url": "https://github.com/virattt/ai-hedge-fund/commit/fafeaa45a55b033c5d89c95f63914c05d54a4151"}, {"sha": "c45852f8db23977b253200fd754e66936da7cc0f", "message": "fix: added missing ALPACA env vars", "author": "Alexander Malysh", "date": "2025-06-27 14:36:51+00:00", "url": "https://github.com/virattt/ai-hedge-fund/commit/c45852f8db23977b253200fd754e66936da7cc0f"}, {"sha": "1b6e7a3c3209c1e882f7ee6ec73b919c48252146", "message": "fix: Handle transition from short to long position", "author": "Alexander Malysh", "date": "2025-06-29 10:34:14+00:00", "url": "https://github.com/virattt/ai-hedge-fund/commit/1b6e7a3c3209c1e882f7ee6ec73b919c48252146"}, {"sha": "626e4d48a5c47b47f10d0a878b82471fc14bddf5", "message": "fix: fixed transitions short -> long, long -> short", "author": "Alexander Malysh", "date": "2025-06-30 13:45:24+00:00", "url": "https://github.com/virattt/ai-hedge-fund/commit/626e4d48a5c47b47f10d0a878b82471fc14bddf5"}], "reviews": [], "html_url": "https://github.com/virattt/ai-hedge-fund/pull/376", "diff_url": "https://github.com/virattt/ai-hedge-fund/pull/376.diff", "patch_url": "https://github.com/virattt/ai-hedge-fund/pull/376.patch"}, "analysis_duration": 0.0, "total_issues": 0}, "error": null}, "64a9e795-0b74-448f-808e-a12cb651c2e2": {"id": "64a9e795-0b74-448f-808e-a12cb651c2e2", "type": "security", "code_snippets": [{"file_path": "auth.py", "content": "def login(username, password):\n    admin_pass = 'superSecret123!'\n    if password == admin_pass:\n        return True\n    return False\n\ndef get_user_data(user_id):\n    query = f\"SELECT * FROM users WHERE id = {user_id}\"\n    return execute_query(query)", "language": "python"}, {"file_path": "upload.py", "content": "def save_uploaded_file(file):\n    filename = file.filename\n    file.save('/uploads/' + filename)\n    return filename\n\ndef process_xml(data):\n    return eval(data)", "language": "python"}], "status": "completed", "created_at": "2025-07-27T08:05:09.375476", "started_at": "2025-07-27T08:05:09.648333", "completed_at": "2025-07-27T08:05:18.483108", "results": {"security_issues": [{"type": "Hardcoded passwords/secrets/API keys", "severity": "critical", "description": "The administrator password 'superSecret123!' is hardcoded in the `login` function.  This is a critical vulnerability as it allows anyone with access to the code to gain administrator privileges.", "line": 2, "file": "auth.py", "confidence": 100.0}, {"type": "SQL injection", "severity": "critical", "description": "The `get_user_data` function is vulnerable to SQL injection.  User-supplied input (`user_id`) is directly incorporated into the SQL query without proper sanitization or parameterization.  An attacker could inject malicious SQL code to manipulate the query and potentially gain unauthorized access to the database.", "line": 7, "file": "auth.py", "confidence": 100.0}, {"type": "Authentication bypass", "severity": "critical", "description": "The authentication mechanism is extremely weak.  Only a single hardcoded password protects the admin account. There's no salting or hashing of passwords, making it trivial to compromise.", "line": 2, "file": "auth.py", "confidence": 100.0}, {"type": "Path traversal", "severity": "critical", "description": "The code directly uses the filename from the uploaded file to construct the file path.  An attacker could manipulate the filename to traverse directories and overwrite arbitrary files on the system. For example, an attacker could upload a file named '../etc/passwd' to read the system's password file.", "line": 3, "file": "upload.py", "confidence": 100.0}, {"type": "Insecure file operations", "severity": "high", "description": "The code lacks proper file validation and sanitization before saving the uploaded file. This could lead to various issues, including the path traversal vulnerability mentioned above, as well as the potential for uploading malicious files (e.g., executables) that could be executed on the server.", "line": 3, "file": "upload.py", "confidence": 95.0}, {"type": "Command injection", "severity": "critical", "description": "While not directly present in the file saving function, the `process_xml` function uses `eval()`, which is extremely dangerous. If the XML data is not properly sanitized and validated, an attacker could inject arbitrary Python code, leading to complete server compromise.", "line": 6, "file": "upload.py", "confidence": 100.0}, {"type": "Missing input validation", "severity": "high", "description": "The `save_uploaded_file` function does not validate the file type or content before saving it.  This allows attackers to upload malicious files (e.g., scripts, executables) that could be executed on the server or cause other harm.", "line": 2, "file": "upload.py", "confidence": 90.0}, {"type": "XSS vulnerabilities", "severity": "medium", "description": "Although not directly present in this code snippet, if the filename is ever used in a web application context without proper escaping, it could lead to XSS vulnerabilities.  An attacker could upload a file with a malicious filename containing JavaScript code that would be executed in a user's browser.", "line": 3, "file": "upload.py", "confidence": 80.0}], "total_issues": 8, "severity_breakdown": {"critical": 5, "high": 2, "medium": 1, "low": 0}, "decision": {"decision": "BLOCK", "risk_level": "critical", "summary": "Found 5 critical security issues", "recommendations": ["Fix critical security issues immediately", "Review security best practices"]}, "errors": [], "analysis_method": "agent_system"}, "error": null}, "b8012fc6-b96d-42e7-87a6-91773af4155c": {"id": "b8012fc6-b96d-42e7-87a6-91773af4155c", "type": "pr", "pr_url": "https://github.com/virattt/ai-hedge-fund/pull/376", "status": "completed", "mode": "standard", "created_at": "2025-07-27T08:15:45.813651", "started_at": "2025-07-27T08:15:46.040530", "completed_at": "2025-07-27T08:16:37.604483", "results": {"error": "Error during PR analysis: Cannot copy out of meta tensor; no data! Please use torch.nn.Module.to_empty() instead of torch.nn.Module.to() when moving module from meta to a different device.", "errors": ["Error during PR analysis: Cannot copy out of meta tensor; no data! Please use torch.nn.Module.to_empty() instead of torch.nn.Module.to() when moving module from meta to a different device."]}, "error": null}, "deb27f00-6db6-4e25-bd49-19ad5602c438": {"id": "deb27f00-6db6-4e25-bd49-19ad5602c438", "type": "pr", "pr_url": "https://github.com/virattt/ai-hedge-fund/pull/376/", "status": "completed", "mode": "deep", "created_at": "2025-07-27T13:00:12.101901", "started_at": "2025-07-27T13:00:13.187121", "completed_at": "2025-07-27T13:00:13.189164", "results": {"error": "Error during PR analysis: invalid literal for int() with base 10: ''", "errors": ["Error during PR analysis: invalid literal for int() with base 10: ''"]}, "error": null}, "3aa47ea7-155b-4df3-84b2-d5c14688f4e0": {"id": "3aa47ea7-155b-4df3-84b2-d5c14688f4e0", "type": "pr", "pr_url": "https://github.com/virattt/ai-hedge-fund/pull/376", "status": "completed", "mode": "deep", "created_at": "2025-07-27T13:04:25.487914", "started_at": "2025-07-27T13:04:26.280373", "completed_at": "2025-07-27T13:05:47.605074", "results": {"security_issues": [], "quality_issues": [], "logic_issues": [], "decision": {}, "pr_details": {"id": 2624612235, "number": 376, "title": "Add trading module and Alpaca broker", "body": "Hi,\r\n\r\nthis MR adds trading module and implementation for Alpaca (https://alpaca.markets) broker. ", "state": "open", "created_at": "2025-06-27 14:39:06+00:00", "updated_at": "2025-06-30 13:45:30+00:00", "closed_at": null, "merged_at": null, "merge_commit_sha": "5840c478e71cd576576d20736ae06ddf25a3688f", "author": "amalysh", "assignees": [], "reviewers": [], "labels": [], "milestone": null, "base_branch": "main", "head_branch": "alpaca-trading", "base_sha": "b725e61484bbcfbeb6339b9659fd95e7164847ac", "head_sha": "626e4d48a5c47b47f10d0a878b82471fc14bddf5", "mergeable": true, "mergeable_state": "clean", "merged": false, "comments": 0, "review_comments": 0, "commits": 6, "additions": 1788, "deletions": 28, "changed_files": 8, "files": [{"filename": ".env.example", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "patch": "@@ -21,3 +21,8 @@ FINANCIAL_DATASETS_API_KEY=your-financial-datasets-api-key\n # For running LLMs hosted by openai (gpt-4o, gpt-4o-mini, etc.)\n # Get your OpenAI API key from https://platform.openai.com/\n OPENAI_API_KEY=your-openai-api-key\n+\n+# Alpaca (required)\n+ALPACA_API_KEY=your-alpaca-api-key\n+ALPACA_SECRET_KEY=your-alpaca-secret-key\n+ALPACA_PAPER=true  # Set to false for live trading", "blob_url": "https://github.com/virattt/ai-hedge-fund/blob/626e4d48a5c47b47f10d0a878b82471fc14bddf5/.env.example", "raw_url": "https://github.com/virattt/ai-hedge-fund/raw/626e4d48a5c47b47f10d0a878b82471fc14bddf5/.env.example", "contents_url": "https://api.github.com/repos/virattt/ai-hedge-fund/contents/.env.example?ref=626e4d48a5c47b47f10d0a878b82471fc14bddf5"}, {"filename": "poetry.lock", "status": "modified", "additions": 250, "deletions": 28, "changes": 278, "patch": "@@ -1,11 +1,12 @@\n-# This file is automatically @generated by Poetry 1.8.5 and should not be changed by hand.\n+# This file is automatically @generated by Poetry 2.1.3 and should not be changed by hand.\n \n [[package]]\n name = \"aiohappyeyeballs\"\n version = \"2.6.1\"\n description = \"Happy Eyeballs for asyncio\"\n optional = false\n python-versions = \">=3.9\"\n+groups = [\"main\"]\n files = [\n     {file = \"aiohappyeyeballs-2.6.1-py3-none-any.whl\", hash = \"sha256:f349ba8f4b75cb25c99c5c2d84e997e485204d2902a9597802b0371f09331fb8\"},\n     {file = \"aiohappyeyeballs-2.6.1.tar.gz\", hash = \"sha256:c3f9d0113123803ccadfdf3f0faa505bc78e6a72d1cc4806cbd719826e943558\"},\n@@ -17,6 +18,7 @@ version = \"3.11.18\"\n description = \"Async http client/server framework (asyncio)\"\n optional = false\n python-versions = \">=3.9\"\n+groups = [\"main\"]\n files = [\n     {file = \"aiohttp-3.11.18-cp310-cp310-macosx_10_9_universal2.whl\", hash = \"sha256:96264854fedbea933a9ca4b7e0c745728f01380691687b7365d18d9e977179c4\"},\n     {file = \"aiohttp-3.11.18-cp310-cp310-macosx_10_9_x86_64.whl\", hash = \"sha256:9602044ff047043430452bc3a2089743fa85da829e6fc9ee0025351d66c332b6\"},\n@@ -111,14 +113,15 @@ propcache = \">=0.2.0\"\n yarl = \">=1.17.0,<2.0\"\n \n [package.extras]\n-speedups = [\"Brotli\", \"aiodns (>=3.2.0)\", \"brotlicffi\"]\n+speedups = [\"Brotli ; platform_python_implementation == \\\"CPython\\\"\", \"aiodns (>=3.2.0) ; sys_platform == \\\"linux\\\" or sys_platform == \\\"darwin\\\"\", \"brotlicffi ; platform_python_implementation != \\\"CPython\\\"\"]\n \n [[package]]\n name = \"aiosignal\"\n version = \"1.3.2\"\n description = \"aiosignal: a list of registered asynchronous callbacks\"\n optional = false\n python-versions = \">=3.9\"\n+groups = [\"main\"]\n files = [\n     {file = \"aiosignal-1.3.2-py2.py3-none-any.whl\", hash = \"sha256:45cde58e409a301715980c2b01d0c28bdde3770d8290b5eb2173759d9acb31a5\"},\n     {file = \"aiosignal-1.3.2.tar.gz\", hash = \"sha256:a8c255c66fafb1e499c9351d0bf32ff2d8a0321595ebac3b93713656d2436f54\"},\n@@ -133,6 +136,7 @@ version = \"1.15.2\"\n description = \"A database migration tool for SQLAlchemy.\"\n optional = false\n python-versions = \">=3.9\"\n+groups = [\"main\"]\n files = [\n     {file = \"alembic-1.15.2-py3-none-any.whl\", hash = \"sha256:2e76bd916d547f6900ec4bb5a90aeac1485d2c92536923d0b138c02b126edc53\"},\n     {file = \"alembic-1.15.2.tar.gz\", hash = \"sha256:1c72391bbdeffccfe317eefba686cb9a3c078005478885413b95c3b26c57a8a7\"},\n@@ -146,12 +150,33 @@ typing-extensions = \">=4.12\"\n [package.extras]\n tz = [\"tzdata\"]\n \n+[[package]]\n+name = \"alpaca-py\"\n+version = \"0.40.2\"\n+description = \"The Official Python SDK for Alpaca APIs\"\n+optional = false\n+python-versions = \"<4.0.0,>=3.8.0\"\n+groups = [\"main\"]\n+files = [\n+    {file = \"alpaca_py-0.40.2-py3-none-any.whl\", hash = \"sha256:bd21a5d290051d28ff4811b0cda2a1b45a4c6bb80f49b037c7bc2fe15302f035\"},\n+    {file = \"alpaca_py-0.40.2.tar.gz\", hash = \"sha256:d1e63b628cff4d9935a0c24c3a4419a985d4216a531c5c7b2d9fcd49e3c5fb70\"},\n+]\n+\n+[package.dependencies]\n+msgpack = \">=1.0.3,<2.0.0\"\n+pandas = \">=1.5.3\"\n+pydantic = \">=2.0.3,<3.0.0\"\n+requests = \">=2.30.0,<3.0.0\"\n+sseclient-py = \">=1.7.2,<2.0.0\"\n+websockets = \">=10.4\"\n+\n [[package]]\n name = \"annotated-types\"\n version = \"0.7.0\"\n description = \"Reusable constraint types to use with typing.Annotated\"\n optional = false\n python-versions = \">=3.8\"\n+groups = [\"main\"]\n files = [\n     {file = \"annotated_types-0.7.0-py3-none-any.whl\", hash = \"sha256:1f02e8b43a8fbbc3f3e0d4f0f4bfc8131bcb4eebe8849b8e5c773f3a1c582a53\"},\n     {file = \"annotated_types-0.7.0.tar.gz\", hash = \"sha256:aff07c09a53a08bc8cfccb9c85b05f1aa9a2a6f23728d790723543408344ce89\"},\n@@ -163,6 +188,7 @@ version = \"0.50.0\"\n description = \"The official Python library for the anthropic API\"\n optional = false\n python-versions = \">=3.8\"\n+groups = [\"main\"]\n files = [\n     {file = \"anthropic-0.50.0-py3-none-any.whl\", hash = \"sha256:defbd79327ca2fa61fd7b9eb2f1627dfb1f69c25d49288c52e167ddb84574f80\"},\n     {file = \"anthropic-0.50.0.tar.gz\", hash = \"sha256:42175ec04ce4ff2fa37cd436710206aadff546ee99d70d974699f59b49adc66f\"},\n@@ -187,6 +213,7 @@ version = \"3.7.1\"\n description = \"High level compatibility layer for multiple asynchronous event loop implementations\"\n optional = false\n python-versions = \">=3.7\"\n+groups = [\"main\"]\n files = [\n     {file = \"anyio-3.7.1-py3-none-any.whl\", hash = \"sha256:91dee416e570e92c64041bd18b900d1d6fa78dff7048769ce5ac5ddad004fbb5\"},\n     {file = \"anyio-3.7.1.tar.gz\", hash = \"sha256:44a3c9aba0f5defa43261a8b3efb97891f2bd7d804e0e1f56419befa1adfc780\"},\n@@ -198,7 +225,7 @@ sniffio = \">=1.1\"\n \n [package.extras]\n doc = [\"Sphinx\", \"packaging\", \"sphinx-autodoc-typehints (>=1.2.0)\", \"sphinx-rtd-theme (>=1.2.2)\", \"sphinxcontrib-jquery\"]\n-test = [\"anyio[trio]\", \"coverage[toml] (>=4.5)\", \"hypothesis (>=4.0)\", \"mock (>=4)\", \"psutil (>=5.9)\", \"pytest (>=7.0)\", \"pytest-mock (>=3.6.1)\", \"trustme\", \"uvloop (>=0.17)\"]\n+test = [\"anyio[trio]\", \"coverage[toml] (>=4.5)\", \"hypothesis (>=4.0)\", \"mock (>=4) ; python_version < \\\"3.8\\\"\", \"psutil (>=5.9)\", \"pytest (>=7.0)\", \"pytest-mock (>=3.6.1)\", \"trustme\", \"uvloop (>=0.17) ; python_version < \\\"3.12\\\" and platform_python_implementation == \\\"CPython\\\" and platform_system != \\\"Windows\\\"\"]\n trio = [\"trio (<0.22)\"]\n \n [[package]]\n@@ -207,25 +234,27 @@ version = \"25.3.0\"\n description = \"Classes Without Boilerplate\"\n optional = false\n python-versions = \">=3.8\"\n+groups = [\"main\"]\n files = [\n     {file = \"attrs-25.3.0-py3-none-any.whl\", hash = \"sha256:427318ce031701fea540783410126f03899a97ffc6f61596ad581ac2e40e3bc3\"},\n     {file = \"attrs-25.3.0.tar.gz\", hash = \"sha256:75d7cefc7fb576747b2c81b4442d4d4a1ce0900973527c011d1030fd3bf4af1b\"},\n ]\n \n [package.extras]\n-benchmark = [\"cloudpickle\", \"hypothesis\", \"mypy (>=1.11.1)\", \"pympler\", \"pytest (>=4.3.0)\", \"pytest-codspeed\", \"pytest-mypy-plugins\", \"pytest-xdist[psutil]\"]\n-cov = [\"cloudpickle\", \"coverage[toml] (>=5.3)\", \"hypothesis\", \"mypy (>=1.11.1)\", \"pympler\", \"pytest (>=4.3.0)\", \"pytest-mypy-plugins\", \"pytest-xdist[psutil]\"]\n-dev = [\"cloudpickle\", \"hypothesis\", \"mypy (>=1.11.1)\", \"pre-commit-uv\", \"pympler\", \"pytest (>=4.3.0)\", \"pytest-mypy-plugins\", \"pytest-xdist[psutil]\"]\n+benchmark = [\"cloudpickle ; platform_python_implementation == \\\"CPython\\\"\", \"hypothesis\", \"mypy (>=1.11.1) ; platform_python_implementation == \\\"CPython\\\" and python_version >= \\\"3.10\\\"\", \"pympler\", \"pytest (>=4.3.0)\", \"pytest-codspeed\", \"pytest-mypy-plugins ; platform_python_implementation == \\\"CPython\\\" and python_version >= \\\"3.10\\\"\", \"pytest-xdist[psutil]\"]\n+cov = [\"cloudpickle ; platform_python_implementation == \\\"CPython\\\"\", \"coverage[toml] (>=5.3)\", \"hypothesis\", \"mypy (>=1.11.1) ; platform_python_implementation == \\\"CPython\\\" and python_version >= \\\"3.10\\\"\", \"pympler\", \"pytest (>=4.3.0)\", \"pytest-mypy-plugins ; platform_python_implementation == \\\"CPython\\\" and python_version >= \\\"3.10\\\"\", \"pytest-xdist[psutil]\"]\n+dev = [\"cloudpickle ; platform_python_implementation == \\\"CPython\\\"\", \"hypothesis\", \"mypy (>=1.11.1) ; platform_python_implementation == \\\"CPython\\\" and python_version >= \\\"3.10\\\"\", \"pre-commit-uv\", \"pympler\", \"pytest (>=4.3.0)\", \"pytest-mypy-plugins ; platform_python_implementation == \\\"CPython\\\" and python_version >= \\\"3.10\\\"\", \"pytest-xdist[psutil]\"]\n docs = [\"cogapp\", \"furo\", \"myst-parser\", \"sphinx\", \"sphinx-notfound-page\", \"sphinxcontrib-towncrier\", \"towncrier\"]\n-tests = [\"cloudpickle\", \"hypothesis\", \"mypy (>=1.11.1)\", \"pympler\", \"pytest (>=4.3.0)\", \"pytest-mypy-plugins\", \"pytest-xdist[psutil]\"]\n-tests-mypy = [\"mypy (>=1.11.1)\", \"pytest-mypy-plugins\"]\n+tests = [\"cloudpickle ; platform_python_implementation == \\\"CPython\\\"\", \"hypothesis\", \"mypy (>=1.11.1) ; platform_python_implementation == \\\"CPython\\\" and python_version >= \\\"3.10\\\"\", \"pympler\", \"pytest (>=4.3.0)\", \"pytest-mypy-plugins ; platform_python_implementation == \\\"CPython\\\" and python_version >= \\\"3.10\\\"\", \"pytest-xdist[psutil]\"]\n+tests-mypy = [\"mypy (>=1.11.1) ; platform_python_implementation == \\\"CPython\\\" and python_version >= \\\"3.10\\\"\", \"pytest-mypy-plugins ; platform_python_implementation == \\\"CPython\\\" and python_version >= \\\"3.10\\\"\"]\n \n [[package]]\n name = \"black\"\n version = \"23.12.1\"\n description = \"The uncompromising code formatter.\"\n optional = false\n python-versions = \">=3.8\"\n+groups = [\"dev\"]\n files = [\n     {file = \"black-23.12.1-cp310-cp310-macosx_10_9_x86_64.whl\", hash = \"sha256:e0aaf6041986767a5e0ce663c7a2f0e9eaf21e6ff87a5f95cbf3675bfd4c41d2\"},\n     {file = \"black-23.12.1-cp310-cp310-macosx_11_0_arm64.whl\", hash = \"sha256:c88b3711d12905b74206227109272673edce0cb29f27e1385f33b0163c414bba\"},\n@@ -260,7 +289,7 @@ platformdirs = \">=2\"\n \n [package.extras]\n colorama = [\"colorama (>=0.4.3)\"]\n-d = [\"aiohttp (>=3.7.4)\", \"aiohttp (>=3.7.4,!=3.9.0)\"]\n+d = [\"aiohttp (>=3.7.4) ; sys_platform != \\\"win32\\\" or implementation_name != \\\"pypy\\\"\", \"aiohttp (>=3.7.4,!=3.9.0) ; sys_platform == \\\"win32\\\" and implementation_name == \\\"pypy\\\"\"]\n jupyter = [\"ipython (>=7.8.0)\", \"tokenize-rt (>=3.2.0)\"]\n uvloop = [\"uvloop (>=0.15.2)\"]\n \n@@ -270,6 +299,7 @@ version = \"5.5.2\"\n description = \"Extensible memoizing collections and decorators\"\n optional = false\n python-versions = \">=3.7\"\n+groups = [\"main\"]\n files = [\n     {file = \"cachetools-5.5.2-py3-none-any.whl\", hash = \"sha256:d26a22bcc62eb95c3beabd9f1ee5e820d3d2704fe2967cbe350e20c8ffcd3f0a\"},\n     {file = \"cachetools-5.5.2.tar.gz\", hash = \"sha256:1a661caa9175d26759571b2e19580f9d6393969e5dfca11fdb1f947a23e640d4\"},\n@@ -281,6 +311,7 @@ version = \"2025.4.26\"\n description = \"Python package for providing Mozilla's CA Bundle.\"\n optional = false\n python-versions = \">=3.6\"\n+groups = [\"main\"]\n files = [\n     {file = \"certifi-2025.4.26-py3-none-any.whl\", hash = \"sha256:30350364dfe371162649852c63336a15c70c6510c2ad5015b21c2345311805f3\"},\n     {file = \"certifi-2025.4.26.tar.gz\", hash = \"sha256:0a816057ea3cdefcef70270d2c515e4506bbc954f417fa5ade2021213bb8f0c6\"},\n@@ -292,6 +323,7 @@ version = \"3.4.1\"\n description = \"The Real First Universal Charset Detector. Open, modern and actively maintained alternative to Chardet.\"\n optional = false\n python-versions = \">=3.7\"\n+groups = [\"main\"]\n files = [\n     {file = \"charset_normalizer-3.4.1-cp310-cp310-macosx_10_9_universal2.whl\", hash = \"sha256:91b36a978b5ae0ee86c394f5a54d6ef44db1de0815eb43de826d41d21e4af3de\"},\n     {file = \"charset_normalizer-3.4.1-cp310-cp310-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:7461baadb4dc00fd9e0acbe254e3d7d2112e7f92ced2adc96e54ef6501c5f176\"},\n@@ -393,6 +425,7 @@ version = \"8.1.8\"\n description = \"Composable command line interface toolkit\"\n optional = false\n python-versions = \">=3.7\"\n+groups = [\"main\", \"dev\"]\n files = [\n     {file = \"click-8.1.8-py3-none-any.whl\", hash = \"sha256:63c132bbbed01578a06712a2d1f497bb62d9c1c0d329b7903a866228027263b2\"},\n     {file = \"click-8.1.8.tar.gz\", hash = \"sha256:ed53c9d8990d83c2a27deae68e4ee337473f6330c040a31d4225c9574d16096a\"},\n@@ -407,6 +440,7 @@ version = \"0.4.6\"\n description = \"Cross-platform colored terminal text.\"\n optional = false\n python-versions = \"!=3.0.*,!=3.1.*,!=3.2.*,!=3.3.*,!=3.4.*,!=3.5.*,!=3.6.*,>=2.7\"\n+groups = [\"main\", \"dev\"]\n files = [\n     {file = \"colorama-0.4.6-py2.py3-none-any.whl\", hash = \"sha256:4f1d9991f5acc0ca119f9d443620b77f9d6b33703e51011c16baf57afb285fc6\"},\n     {file = \"colorama-0.4.6.tar.gz\", hash = \"sha256:08695f5cb7ed6e0531a20572697297273c47b8cae5a63ffc6d6ed5c201be6e44\"},\n@@ -418,6 +452,7 @@ version = \"1.3.2\"\n description = \"Python library for calculating contours of 2D quadrilateral grids\"\n optional = false\n python-versions = \">=3.10\"\n+groups = [\"main\"]\n files = [\n     {file = \"contourpy-1.3.2-cp310-cp310-macosx_10_9_x86_64.whl\", hash = \"sha256:ba38e3f9f330af820c4b27ceb4b9c7feee5fe0493ea53a8720f4792667465934\"},\n     {file = \"contourpy-1.3.2-cp310-cp310-macosx_11_0_arm64.whl\", hash = \"sha256:dc41ba0714aa2968d1f8674ec97504a8f7e334f48eeacebcaa6256213acb0989\"},\n@@ -494,6 +529,7 @@ version = \"0.12.1\"\n description = \"Composable style cycles\"\n optional = false\n python-versions = \">=3.8\"\n+groups = [\"main\"]\n files = [\n     {file = \"cycler-0.12.1-py3-none-any.whl\", hash = \"sha256:85cef7cff222d8644161529808465972e51340599459b8ac3ccbac5a854e0d30\"},\n     {file = \"cycler-0.12.1.tar.gz\", hash = \"sha256:88bb128f02ba341da8ef447245a9e138fae777f6a23943da4540077d3601eb1c\"},\n@@ -509,6 +545,7 @@ version = \"0.7.1\"\n description = \"XML bomb protection for Python stdlib modules\"\n optional = false\n python-versions = \">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*\"\n+groups = [\"main\"]\n files = [\n     {file = \"defusedxml-0.7.1-py2.py3-none-any.whl\", hash = \"sha256:a352e7e428770286cc899e2542b6cdaedb2b4953ff269a210103ec58f6198a61\"},\n     {file = \"defusedxml-0.7.1.tar.gz\", hash = \"sha256:1bb3032db185915b62d7c6209c5a8792be6a32ab2fedacc84e01b52c51aa3e69\"},\n@@ -520,6 +557,7 @@ version = \"1.9.0\"\n description = \"Distro - an OS platform information API\"\n optional = false\n python-versions = \">=3.6\"\n+groups = [\"main\"]\n files = [\n     {file = \"distro-1.9.0-py3-none-any.whl\", hash = \"sha256:7bffd925d65168f85027d8da9af6bddab658135b840670a223589bc0c8ef02b2\"},\n     {file = \"distro-1.9.0.tar.gz\", hash = \"sha256:2fa77c6fd8940f116ee1d6b94a2f90b13b5ea8d019b98bc8bafdcabcdd9bdbed\"},\n@@ -531,6 +569,7 @@ version = \"0.104.1\"\n description = \"FastAPI framework, high performance, easy to learn, fast to code, ready for production\"\n optional = false\n python-versions = \">=3.8\"\n+groups = [\"main\"]\n files = [\n     {file = \"fastapi-0.104.1-py3-none-any.whl\", hash = \"sha256:752dc31160cdbd0436bb93bad51560b57e525cbb1d4bbf6f4904ceee75548241\"},\n     {file = \"fastapi-0.104.1.tar.gz\", hash = \"sha256:e5e4540a7c5e1dcfbbcf5b903c234feddcdcd881f191977a1c5dfd917487e7ae\"},\n@@ -551,6 +590,7 @@ version = \"0.0.7\"\n description = \"Run and manage FastAPI apps from the command line with FastAPI CLI. \ud83d\ude80\"\n optional = false\n python-versions = \">=3.8\"\n+groups = [\"main\"]\n files = [\n     {file = \"fastapi_cli-0.0.7-py3-none-any.whl\", hash = \"sha256:d549368ff584b2804336c61f192d86ddea080c11255f375959627911944804f4\"},\n     {file = \"fastapi_cli-0.0.7.tar.gz\", hash = \"sha256:02b3b65956f526412515907a0793c9094abd4bfb5457b389f645b0ea6ba3605e\"},\n@@ -570,6 +610,7 @@ version = \"1.2.0\"\n description = \"Infer file type and MIME type of any file/buffer. No external dependencies.\"\n optional = false\n python-versions = \"*\"\n+groups = [\"main\"]\n files = [\n     {file = \"filetype-1.2.0-py2.py3-none-any.whl\", hash = \"sha256:7ce71b6880181241cf7ac8697a2f1eb6a8bd9b429f7ad6d27b8db9ba5f1c2d25\"},\n     {file = \"filetype-1.2.0.tar.gz\", hash = \"sha256:66b56cd6474bf41d8c54660347d37afcc3f7d1970648de365c102ef77548aadb\"},\n@@ -581,6 +622,7 @@ version = \"6.1.0\"\n description = \"the modular source code checker: pep8 pyflakes and co\"\n optional = false\n python-versions = \">=3.8.1\"\n+groups = [\"dev\"]\n files = [\n     {file = \"flake8-6.1.0-py2.py3-none-any.whl\", hash = \"sha256:ffdfce58ea94c6580c77888a86506937f9a1a227dfcd15f245d694ae20a6b6e5\"},\n     {file = \"flake8-6.1.0.tar.gz\", hash = \"sha256:d5b3857f07c030bdb5bf41c7f53799571d75c4491748a3adcd47de929e34cd23\"},\n@@ -597,6 +639,7 @@ version = \"4.57.0\"\n description = \"Tools to manipulate font files\"\n optional = false\n python-versions = \">=3.8\"\n+groups = [\"main\"]\n files = [\n     {file = \"fonttools-4.57.0-cp310-cp310-macosx_10_9_universal2.whl\", hash = \"sha256:babe8d1eb059a53e560e7bf29f8e8f4accc8b6cfb9b5fd10e485bde77e71ef41\"},\n     {file = \"fonttools-4.57.0-cp310-cp310-macosx_10_9_x86_64.whl\", hash = \"sha256:81aa97669cd726349eb7bd43ca540cf418b279ee3caba5e2e295fb4e8f841c02\"},\n@@ -651,25 +694,26 @@ files = [\n ]\n \n [package.extras]\n-all = [\"brotli (>=1.0.1)\", \"brotlicffi (>=0.8.0)\", \"fs (>=2.2.0,<3)\", \"lxml (>=4.0)\", \"lz4 (>=1.7.4.2)\", \"matplotlib\", \"munkres\", \"pycairo\", \"scipy\", \"skia-pathops (>=0.5.0)\", \"sympy\", \"uharfbuzz (>=0.23.0)\", \"unicodedata2 (>=15.1.0)\", \"xattr\", \"zopfli (>=0.1.4)\"]\n+all = [\"brotli (>=1.0.1) ; platform_python_implementation == \\\"CPython\\\"\", \"brotlicffi (>=0.8.0) ; platform_python_implementation != \\\"CPython\\\"\", \"fs (>=2.2.0,<3)\", \"lxml (>=4.0)\", \"lz4 (>=1.7.4.2)\", \"matplotlib\", \"munkres ; platform_python_implementation == \\\"PyPy\\\"\", \"pycairo\", \"scipy ; platform_python_implementation != \\\"PyPy\\\"\", \"skia-pathops (>=0.5.0)\", \"sympy\", \"uharfbuzz (>=0.23.0)\", \"unicodedata2 (>=15.1.0) ; python_version <= \\\"3.12\\\"\", \"xattr ; sys_platform == \\\"darwin\\\"\", \"zopfli (>=0.1.4)\"]\n graphite = [\"lz4 (>=1.7.4.2)\"]\n-interpolatable = [\"munkres\", \"pycairo\", \"scipy\"]\n+interpolatable = [\"munkres ; platform_python_implementation == \\\"PyPy\\\"\", \"pycairo\", \"scipy ; platform_python_implementation != \\\"PyPy\\\"\"]\n lxml = [\"lxml (>=4.0)\"]\n pathops = [\"skia-pathops (>=0.5.0)\"]\n plot = [\"matplotlib\"]\n repacker = [\"uharfbuzz (>=0.23.0)\"]\n symfont = [\"sympy\"]\n-type1 = [\"xattr\"]\n+type1 = [\"xattr ; sys_platform == \\\"darwin\\\"\"]\n ufo = [\"fs (>=2.2.0,<3)\"]\n-unicode = [\"unicodedata2 (>=15.1.0)\"]\n-woff = [\"brotli (>=1.0.1)\", \"brotlicffi (>=0.8.0)\", \"zopfli (>=0.1.4)\"]\n+unicode = [\"unicodedata2 (>=15.1.0) ; python_version <= \\\"3.12\\\"\"]\n+woff = [\"brotli (>=1.0.1) ; platform_python_implementation == \\\"CPython\\\"\", \"brotlicffi (>=0.8.0) ; platform_python_implementation != \\\"CPython\\\"\", \"zopfli (>=0.1.4)\"]\n \n [[package]]\n name = \"frozenlist\"\n version = \"1.6.0\"\n description = \"A list-like structure which implements collections.abc.MutableSequence\"\n optional = false\n python-versions = \">=3.9\"\n+groups = [\"main\"]\n files = [\n     {file = \"frozenlist-1.6.0-cp310-cp310-macosx_10_9_universal2.whl\", hash = \"sha256:e6e558ea1e47fd6fa8ac9ccdad403e5dd5ecc6ed8dda94343056fa4277d5c65e\"},\n     {file = \"frozenlist-1.6.0-cp310-cp310-macosx_10_9_x86_64.whl\", hash = \"sha256:f4b3cd7334a4bbc0c472164f3744562cb72d05002cc6fcf58adb104630bbc352\"},\n@@ -783,6 +827,7 @@ version = \"0.6.18\"\n description = \"Google Ai Generativelanguage API client library\"\n optional = false\n python-versions = \">=3.7\"\n+groups = [\"main\"]\n files = [\n     {file = \"google_ai_generativelanguage-0.6.18-py3-none-any.whl\", hash = \"sha256:13d8174fea90b633f520789d32df7b422058fd5883b022989c349f1017db7fcf\"},\n     {file = \"google_ai_generativelanguage-0.6.18.tar.gz\", hash = \"sha256:274ba9fcf69466ff64e971d565884434388e523300afd468fc8e3033cd8e606e\"},\n@@ -792,7 +837,7 @@ files = [\n google-api-core = {version = \">=1.34.1,<2.0.dev0 || >=2.11.dev0,<3.0.0\", extras = [\"grpc\"]}\n google-auth = \">=2.14.1,<2.24.0 || >2.24.0,<2.25.0 || >2.25.0,<3.0.0\"\n proto-plus = [\n-    {version = \">=1.22.3,<2.0.0\", markers = \"python_version < \\\"3.13\\\"\"},\n+    {version = \">=1.22.3,<2.0.0\"},\n     {version = \">=1.25.0,<2.0.0\", markers = \"python_version >= \\\"3.13\\\"\"},\n ]\n protobuf = \">=3.20.2,<4.21.0 || >4.21.0,<4.21.1 || >4.21.1,<4.21.2 || >4.21.2,<4.21.3 || >4.21.3,<4.21.4 || >4.21.4,<4.21.5 || >4.21.5,<7.0.0\"\n@@ -803,6 +848,7 @@ version = \"2.24.2\"\n description = \"Google API client core library\"\n optional = false\n python-versions = \">=3.7\"\n+groups = [\"main\"]\n files = [\n     {file = \"google_api_core-2.24.2-py3-none-any.whl\", hash = \"sha256:810a63ac95f3c441b7c0e43d344e372887f62ce9071ba972eacf32672e072de9\"},\n     {file = \"google_api_core-2.24.2.tar.gz\", hash = \"sha256:81718493daf06d96d6bc76a91c23874dbf2fac0adbbf542831b805ee6e974696\"},\n@@ -814,15 +860,15 @@ googleapis-common-protos = \">=1.56.2,<2.0.0\"\n grpcio = {version = \">=1.49.1,<2.0dev\", optional = true, markers = \"python_version >= \\\"3.11\\\" and extra == \\\"grpc\\\"\"}\n grpcio-status = {version = \">=1.49.1,<2.0.dev0\", optional = true, markers = \"python_version >= \\\"3.11\\\" and extra == \\\"grpc\\\"\"}\n proto-plus = [\n-    {version = \">=1.22.3,<2.0.0\", markers = \"python_version < \\\"3.13\\\"\"},\n+    {version = \">=1.22.3,<2.0.0\"},\n     {version = \">=1.25.0,<2.0.0\", markers = \"python_version >= \\\"3.13\\\"\"},\n ]\n protobuf = \">=3.19.5,<3.20.0 || >3.20.0,<3.20.1 || >3.20.1,<4.21.0 || >4.21.0,<4.21.1 || >4.21.1,<4.21.2 || >4.21.2,<4.21.3 || >4.21.3,<4.21.4 || >4.21.4,<4.21.5 || >4.21.5,<7.0.0\"\n requests = \">=2.18.0,<3.0.0\"\n \n [package.extras]\n async-rest = [\"google-auth[aiohttp] (>=2.35.0,<3.0.dev0)\"]\n-grpc = [\"grpcio (>=1.33.2,<2.0dev)\", \"grpcio (>=1.49.1,<2.0dev)\", \"grpcio-status (>=1.33.2,<2.0.dev0)\", \"grpcio-status (>=1.49.1,<2.0.dev0)\"]\n+grpc = [\"grpcio (>=1.33.2,<2.0dev)\", \"grpcio (>=1.49.1,<2.0dev) ; python_version >= \\\"3.11\\\"\", \"grpcio-status (>=1.33.2,<2.0.dev0)\", \"grpcio-status (>=1.49.1,<2.0.dev0) ; python_version >= \\\"3.11\\\"\"]\n grpcgcp = [\"grpcio-gcp (>=0.2.2,<1.0.dev0)\"]\n grpcio-gcp = [\"grpcio-gcp (>=0.2.2,<1.0.dev0)\"]\n \n@@ -832,6 +878,7 @@ version = \"2.39.0\"\n description = \"Google Authentication Library\"\n optional = false\n python-versions = \">=3.7\"\n+groups = [\"main\"]\n files = [\n     {file = \"google_auth-2.39.0-py2.py3-none-any.whl\", hash = \"sha256:0150b6711e97fb9f52fe599f55648950cc4540015565d8fbb31be2ad6e1548a2\"},\n     {file = \"google_auth-2.39.0.tar.gz\", hash = \"sha256:73222d43cdc35a3aeacbfdcaf73142a97839f10de930550d89ebfe1d0a00cde7\"},\n@@ -845,11 +892,11 @@ rsa = \">=3.1.4,<5\"\n [package.extras]\n aiohttp = [\"aiohttp (>=3.6.2,<4.0.0)\", \"requests (>=2.20.0,<3.0.0)\"]\n enterprise-cert = [\"cryptography\", \"pyopenssl\"]\n-pyjwt = [\"cryptography (<39.0.0)\", \"cryptography (>=38.0.3)\", \"pyjwt (>=2.0)\"]\n-pyopenssl = [\"cryptography (<39.0.0)\", \"cryptography (>=38.0.3)\", \"pyopenssl (>=20.0.0)\"]\n+pyjwt = [\"cryptography (<39.0.0) ; python_version < \\\"3.8\\\"\", \"cryptography (>=38.0.3)\", \"pyjwt (>=2.0)\"]\n+pyopenssl = [\"cryptography (<39.0.0) ; python_version < \\\"3.8\\\"\", \"cryptography (>=38.0.3)\", \"pyopenssl (>=20.0.0)\"]\n reauth = [\"pyu2f (>=0.1.5)\"]\n requests = [\"requests (>=2.20.0,<3.0.0)\"]\n-testing = [\"aiohttp (<3.10.0)\", \"aiohttp (>=3.6.2,<4.0.0)\", \"aioresponses\", \"cryptography (<39.0.0)\", \"cryptography (>=38.0.3)\", \"flask\", \"freezegun\", \"grpcio\", \"mock\", \"oauth2client\", \"packaging\", \"pyjwt (>=2.0)\", \"pyopenssl (<24.3.0)\", \"pyopenssl (>=20.0.0)\", \"pytest\", \"pytest-asyncio\", \"pytest-cov\", \"pytest-localserver\", \"pyu2f (>=0.1.5)\", \"requests (>=2.20.0,<3.0.0)\", \"responses\", \"urllib3\"]\n+testing = [\"aiohttp (<3.10.0)\", \"aiohttp (>=3.6.2,<4.0.0)\", \"aioresponses\", \"cryptography (<39.0.0) ; python_version < \\\"3.8\\\"\", \"cryptography (>=38.0.3)\", \"flask\", \"freezegun\", \"grpcio\", \"mock\", \"oauth2client\", \"packaging\", \"pyjwt (>=2.0)\", \"pyopenssl (<24.3.0)\", \"pyopenssl (>=20.0.0)\", \"pytest\", \"pytest-asyncio\", \"pytest-cov\", \"pytest-localserver\", \"pyu2f (>=0.1.5)\", \"requests (>=2.20.0,<3.0.0)\", \"responses\", \"urllib3\"]\n urllib3 = [\"packaging\", \"urllib3\"]\n \n [[package]]\n@@ -858,6 +905,7 @@ version = \"1.70.0\"\n description = \"Common protobufs used in Google APIs\"\n optional = false\n python-versions = \">=3.7\"\n+groups = [\"main\"]\n files = [\n     {file = \"googleapis_common_protos-1.70.0-py3-none-any.whl\", hash = \"sha256:b8bfcca8c25a2bb253e0e0b0adaf8c00773e5e6af6fd92397576680b807e0fd8\"},\n     {file = \"googleapis_common_protos-1.70.0.tar.gz\", hash = \"sha256:0e1b44e0ea153e6594f9f394fef15193a68aaaea2d843f83e2742717ca753257\"},\n@@ -875,6 +923,8 @@ version = \"3.2.1\"\n description = \"Lightweight in-process concurrent programming\"\n optional = false\n python-versions = \">=3.9\"\n+groups = [\"main\"]\n+markers = \"python_version < \\\"3.14\\\" and (platform_machine == \\\"aarch64\\\" or platform_machine == \\\"ppc64le\\\" or platform_machine == \\\"x86_64\\\" or platform_machine == \\\"amd64\\\" or platform_machine == \\\"AMD64\\\" or platform_machine == \\\"win32\\\" or platform_machine == \\\"WIN32\\\")\"\n files = [\n     {file = \"greenlet-3.2.1-cp310-cp310-macosx_11_0_universal2.whl\", hash = \"sha256:777c1281aa7c786738683e302db0f55eb4b0077c20f1dc53db8852ffaea0a6b0\"},\n     {file = \"greenlet-3.2.1-cp310-cp310-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:3059c6f286b53ea4711745146ffe5a5c5ff801f62f6c56949446e0f6461f8157\"},\n@@ -943,6 +993,7 @@ version = \"0.23.1\"\n description = \"The official Python library for the groq API\"\n optional = false\n python-versions = \">=3.8\"\n+groups = [\"main\"]\n files = [\n     {file = \"groq-0.23.1-py3-none-any.whl\", hash = \"sha256:05fa38c3d0ad03c19c6185f98f6a73901c2a463e844fd067b79f7b05c8346946\"},\n     {file = \"groq-0.23.1.tar.gz\", hash = \"sha256:952e34895f9bfb78ab479e495d77b32180262e5c42f531ce3a1722d6e5a04dfb\"},\n@@ -962,6 +1013,7 @@ version = \"1.71.0\"\n description = \"HTTP/2-based RPC framework\"\n optional = false\n python-versions = \">=3.9\"\n+groups = [\"main\"]\n files = [\n     {file = \"grpcio-1.71.0-cp310-cp310-linux_armv7l.whl\", hash = \"sha256:c200cb6f2393468142eb50ab19613229dcc7829b5ccee8b658a36005f6669fdd\"},\n     {file = \"grpcio-1.71.0-cp310-cp310-macosx_12_0_universal2.whl\", hash = \"sha256:b2266862c5ad664a380fbbcdbdb8289d71464c42a8c29053820ee78ba0119e5d\"},\n@@ -1025,6 +1077,7 @@ version = \"1.62.3\"\n description = \"Status proto mapping for gRPC\"\n optional = false\n python-versions = \">=3.6\"\n+groups = [\"main\"]\n files = [\n     {file = \"grpcio-status-1.62.3.tar.gz\", hash = \"sha256:289bdd7b2459794a12cf95dc0cb727bd4a1742c37bd823f760236c937e53a485\"},\n     {file = \"grpcio_status-1.62.3-py3-none-any.whl\", hash = \"sha256:f9049b762ba8de6b1086789d8315846e094edac2c50beaf462338b301a8fd4b8\"},\n@@ -1041,6 +1094,7 @@ version = \"0.16.0\"\n description = \"A pure-Python, bring-your-own-I/O implementation of HTTP/1.1\"\n optional = false\n python-versions = \">=3.8\"\n+groups = [\"main\"]\n files = [\n     {file = \"h11-0.16.0-py3-none-any.whl\", hash = \"sha256:63cf8bbe7522de3bf65932fda1d9c2772064ffb3dae62d55932da54b31cb6c86\"},\n     {file = \"h11-0.16.0.tar.gz\", hash = \"sha256:4e35b956cf45792e4caa5885e69fba00bdbc6ffafbfa020300e549b208ee5ff1\"},\n@@ -1052,6 +1106,7 @@ version = \"1.0.9\"\n description = \"A minimal low-level HTTP client.\"\n optional = false\n python-versions = \">=3.8\"\n+groups = [\"main\"]\n files = [\n     {file = \"httpcore-1.0.9-py3-none-any.whl\", hash = \"sha256:2d400746a40668fc9dec9810239072b40b4484b640a8c38fd654a024c7a1bf55\"},\n     {file = \"httpcore-1.0.9.tar.gz\", hash = \"sha256:6e34463af53fd2ab5d807f399a9b45ea31c3dfa2276f15a2c3f00afff6e176e8\"},\n@@ -1073,6 +1128,7 @@ version = \"0.6.4\"\n description = \"A collection of framework independent HTTP protocol utils.\"\n optional = false\n python-versions = \">=3.8.0\"\n+groups = [\"main\"]\n files = [\n     {file = \"httptools-0.6.4-cp310-cp310-macosx_10_9_universal2.whl\", hash = \"sha256:3c73ce323711a6ffb0d247dcd5a550b8babf0f757e86a52558fe5b86d6fefcc0\"},\n     {file = \"httptools-0.6.4-cp310-cp310-macosx_11_0_arm64.whl\", hash = \"sha256:345c288418f0944a6fe67be8e6afa9262b18c7626c3ef3c28adc5eabc06a68da\"},\n@@ -1128,6 +1184,7 @@ version = \"0.27.2\"\n description = \"The next generation HTTP client.\"\n optional = false\n python-versions = \">=3.8\"\n+groups = [\"main\"]\n files = [\n     {file = \"httpx-0.27.2-py3-none-any.whl\", hash = \"sha256:7bb2708e112d8fdd7829cd4243970f0c223274051cb35ee80c03301ee29a3df0\"},\n     {file = \"httpx-0.27.2.tar.gz\", hash = \"sha256:f7c2be1d2f3c3c3160d441802406b206c2b76f5947b11115e6df10c6c65e66c2\"},\n@@ -1141,7 +1198,7 @@ idna = \"*\"\n sniffio = \"*\"\n \n [package.extras]\n-brotli = [\"brotli\", \"brotlicffi\"]\n+brotli = [\"brotli ; platform_python_implementation == \\\"CPython\\\"\", \"brotlicffi ; platform_python_implementation != \\\"CPython\\\"\"]\n cli = [\"click (==8.*)\", \"pygments (==2.*)\", \"rich (>=10,<14)\"]\n http2 = [\"h2 (>=3,<5)\"]\n socks = [\"socksio (==1.*)\"]\n@@ -1153,6 +1210,7 @@ version = \"3.10\"\n description = \"Internationalized Domain Names in Applications (IDNA)\"\n optional = false\n python-versions = \">=3.6\"\n+groups = [\"main\"]\n files = [\n     {file = \"idna-3.10-py3-none-any.whl\", hash = \"sha256:946d195a0d259cbba61165e88e65941f16e9b36ea6ddb97f00452bae8b1287d3\"},\n     {file = \"idna-3.10.tar.gz\", hash = \"sha256:12f65c9b470abda6dc35cf8e63cc574b1c52b11df2c86030af0ac09b01b13ea9\"},\n@@ -1167,6 +1225,7 @@ version = \"2.1.0\"\n description = \"brain-dead simple config-ini parsing\"\n optional = false\n python-versions = \">=3.8\"\n+groups = [\"dev\"]\n files = [\n     {file = \"iniconfig-2.1.0-py3-none-any.whl\", hash = \"sha256:9deba5723312380e77435581c6bf4935c94cbfab9b1ed33ef8d238ea168eb760\"},\n     {file = \"iniconfig-2.1.0.tar.gz\", hash = \"sha256:3abbd2e30b36733fee78f9c7f7308f2d0050e88f0087fd25c2645f63c773e1c7\"},\n@@ -1178,6 +1237,7 @@ version = \"5.13.2\"\n description = \"A Python utility / library to sort Python imports.\"\n optional = false\n python-versions = \">=3.8.0\"\n+groups = [\"dev\"]\n files = [\n     {file = \"isort-5.13.2-py3-none-any.whl\", hash = \"sha256:8ca5e72a8d85860d5a3fa69b8745237f2939afe12dbf656afbcb47fe72d947a6\"},\n     {file = \"isort-5.13.2.tar.gz\", hash = \"sha256:48fdfcb9face5d58a4f6dde2e72a1fb8dcaf8ab26f95ab49fab84c2ddefb0109\"},\n@@ -1192,6 +1252,7 @@ version = \"0.9.0\"\n description = \"Fast iterable JSON parser.\"\n optional = false\n python-versions = \">=3.8\"\n+groups = [\"main\"]\n files = [\n     {file = \"jiter-0.9.0-cp310-cp310-macosx_10_12_x86_64.whl\", hash = \"sha256:816ec9b60fdfd1fec87da1d7ed46c66c44ffec37ab2ef7de5b147b2fce3fd5ad\"},\n     {file = \"jiter-0.9.0-cp310-cp310-macosx_11_0_arm64.whl\", hash = \"sha256:9b1d3086f8a3ee0194ecf2008cf81286a5c3e540d977fa038ff23576c023c0ea\"},\n@@ -1277,6 +1338,7 @@ version = \"1.33\"\n description = \"Apply JSON-Patches (RFC 6902)\"\n optional = false\n python-versions = \">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*, !=3.5.*, !=3.6.*\"\n+groups = [\"main\"]\n files = [\n     {file = \"jsonpatch-1.33-py2.py3-none-any.whl\", hash = \"sha256:0ae28c0cd062bbd8b8ecc26d7d164fbbea9652a1a3693f3b956c1eae5145dade\"},\n     {file = \"jsonpatch-1.33.tar.gz\", hash = \"sha256:9fcd4009c41e6d12348b4a0ff2563ba56a2923a7dfee731d004e212e1ee5030c\"},\n@@ -1291,6 +1353,7 @@ version = \"3.0.0\"\n description = \"Identify specific nodes in a JSON document (RFC 6901)\"\n optional = false\n python-versions = \">=3.7\"\n+groups = [\"main\"]\n files = [\n     {file = \"jsonpointer-3.0.0-py2.py3-none-any.whl\", hash = \"sha256:13e088adc14fca8b6aa8177c044e12701e6ad4b28ff10e65f2267a90109c9942\"},\n     {file = \"jsonpointer-3.0.0.tar.gz\", hash = \"sha256:2b2d729f2091522d61c3b31f82e11870f60b68f43fbc705cb76bf4b832af59ef\"},\n@@ -1302,6 +1365,7 @@ version = \"1.4.8\"\n description = \"A fast implementation of the Cassowary constraint solver\"\n optional = false\n python-versions = \">=3.10\"\n+groups = [\"main\"]\n files = [\n     {file = \"kiwisolver-1.4.8-cp310-cp310-macosx_10_9_universal2.whl\", hash = \"sha256:88c6f252f6816a73b1f8c904f7bbe02fd67c09a69f7cb8a0eecdbf5ce78e63db\"},\n     {file = \"kiwisolver-1.4.8-cp310-cp310-macosx_10_9_x86_64.whl\", hash = \"sha256:c72941acb7b67138f35b879bbe85be0f6c6a70cab78fe3ef6db9c024d9223e5b\"},\n@@ -1391,6 +1455,7 @@ version = \"0.3.0\"\n description = \"Building applications with LLMs through composability\"\n optional = false\n python-versions = \"<4.0,>=3.9\"\n+groups = [\"main\"]\n files = [\n     {file = \"langchain-0.3.0-py3-none-any.whl\", hash = \"sha256:59a75a6a1eb7bfd2a6bf0c7a5816409a8fdc9046187b07af287b23b9899617af\"},\n     {file = \"langchain-0.3.0.tar.gz\", hash = \"sha256:a7c23892440bd1f5b9e029ff0dd709dd881ae927c4c0a3210ac64dba9bbf3f7f\"},\n@@ -1417,6 +1482,7 @@ version = \"0.3.5\"\n description = \"An integration package connecting AnthropicMessages and LangChain\"\n optional = false\n python-versions = \"<4.0,>=3.9\"\n+groups = [\"main\"]\n files = [\n     {file = \"langchain_anthropic-0.3.5-py3-none-any.whl\", hash = \"sha256:bad34b02d7b4bdca9a9471bc391b01269fd8dc4600b83ca2a3e76925b7c27fe6\"},\n     {file = \"langchain_anthropic-0.3.5.tar.gz\", hash = \"sha256:2aa1673511056061680492871f386d68a8b62947e0eb1f15303ef10db16c8357\"},\n@@ -1434,6 +1500,7 @@ version = \"0.3.56\"\n description = \"Building applications with LLMs through composability\"\n optional = false\n python-versions = \"<4.0,>=3.9\"\n+groups = [\"main\"]\n files = [\n     {file = \"langchain_core-0.3.56-py3-none-any.whl\", hash = \"sha256:a20c6aca0fa0da265d96d3b14a5a01828ac5d2d9d27516434873d76f2d4839ed\"},\n     {file = \"langchain_core-0.3.56.tar.gz\", hash = \"sha256:de896585bc56e12652327dcd195227c3739a07e86e587c91a07101e0df11dffe\"},\n@@ -1457,6 +1524,7 @@ version = \"0.1.3\"\n description = \"An integration package connecting DeepSeek and LangChain\"\n optional = false\n python-versions = \"<4.0,>=3.9\"\n+groups = [\"main\"]\n files = [\n     {file = \"langchain_deepseek-0.1.3-py3-none-any.whl\", hash = \"sha256:8588e826371b417fca65c02f4273b4061eb9815a7bfcd5eb05acaa40d603aa89\"},\n     {file = \"langchain_deepseek-0.1.3.tar.gz\", hash = \"sha256:89dd6aa120fb50dcfcd3d593626d34c1c40deefe4510710d0807fcc19481adf5\"},\n@@ -1472,6 +1540,7 @@ version = \"2.1.3\"\n description = \"An integration package connecting Google's genai package and LangChain\"\n optional = false\n python-versions = \"<4.0,>=3.9\"\n+groups = [\"main\"]\n files = [\n     {file = \"langchain_google_genai-2.1.3-py3-none-any.whl\", hash = \"sha256:adf222931ac7af543f4013751a9b7dbd9ed637fb4eb3e4e0cd7e1d5d7e066d36\"},\n     {file = \"langchain_google_genai-2.1.3.tar.gz\", hash = \"sha256:0d4e2abf01a7594a9420d3569cf2cd4239a01cc24c6698d3c2c92a072b9b7b4a\"},\n@@ -1489,6 +1558,7 @@ version = \"0.2.3\"\n description = \"An integration package connecting Groq and LangChain\"\n optional = false\n python-versions = \"<4.0,>=3.9\"\n+groups = [\"main\"]\n files = [\n     {file = \"langchain_groq-0.2.3-py3-none-any.whl\", hash = \"sha256:3572c812acc1478ab0670c48eb9a135c95f47631190da750e48408267462a12d\"},\n     {file = \"langchain_groq-0.2.3.tar.gz\", hash = \"sha256:f94810fe734c9402b36273ddc3509eaa67f12a7d06b666c6ca472ab0bfdf37b7\"},\n@@ -1504,6 +1574,7 @@ version = \"0.2.3\"\n description = \"An integration package connecting Ollama and LangChain\"\n optional = false\n python-versions = \"<4.0,>=3.9\"\n+groups = [\"main\"]\n files = [\n     {file = \"langchain_ollama-0.2.3-py3-none-any.whl\", hash = \"sha256:c47700ca68b013358b1e954493ecafb3bd10fa2cda71a9f15ba7897587a9aab2\"},\n     {file = \"langchain_ollama-0.2.3.tar.gz\", hash = \"sha256:d13fe8735176b652ca6e6656d7902c1265e8c0601097569f7c95433f3d034b38\"},\n@@ -1519,6 +1590,7 @@ version = \"0.3.14\"\n description = \"An integration package connecting OpenAI and LangChain\"\n optional = false\n python-versions = \"<4.0,>=3.9\"\n+groups = [\"main\"]\n files = [\n     {file = \"langchain_openai-0.3.14-py3-none-any.whl\", hash = \"sha256:b8e648d2d7678a5540818199d141ff727c6f1514294b3e1e999a95357c9d66a0\"},\n     {file = \"langchain_openai-0.3.14.tar.gz\", hash = \"sha256:0662db78620c2e5c3ccfc1c36dc959c0ddc80e6bdf7ef81632cbf4b2cc9b9461\"},\n@@ -1535,6 +1607,7 @@ version = \"0.3.8\"\n description = \"LangChain text splitting utilities\"\n optional = false\n python-versions = \"<4.0,>=3.9\"\n+groups = [\"main\"]\n files = [\n     {file = \"langchain_text_splitters-0.3.8-py3-none-any.whl\", hash = \"sha256:e75cc0f4ae58dcf07d9f18776400cf8ade27fadd4ff6d264df6278bb302f6f02\"},\n     {file = \"langchain_text_splitters-0.3.8.tar.gz\", hash = \"sha256:116d4b9f2a22dda357d0b79e30acf005c5518177971c66a9f1ab0edfdb0f912e\"},\n@@ -1549,6 +1622,7 @@ version = \"0.2.56\"\n description = \"Building stateful, multi-actor applications with LLMs\"\n optional = false\n python-versions = \"<4.0,>=3.9.0\"\n+groups = [\"main\"]\n files = [\n     {file = \"langgraph-0.2.56-py3-none-any.whl\", hash = \"sha256:ad8a4b772e34dc0137e890bb6ced596a39a1e684af66250c1e7c8150dbe90e9c\"},\n     {file = \"langgraph-0.2.56.tar.gz\", hash = \"sha256:af10b1ffd10d52fd4072a73f154b8c2513c0b22e5bd5d20f4567dfeecab98d1e\"},\n@@ -1565,6 +1639,7 @@ version = \"2.0.25\"\n description = \"Library with base interfaces for LangGraph checkpoint savers.\"\n optional = false\n python-versions = \"<4.0.0,>=3.9.0\"\n+groups = [\"main\"]\n files = [\n     {file = \"langgraph_checkpoint-2.0.25-py3-none-any.whl\", hash = \"sha256:23416a0f5bc9dd712ac10918fc13e8c9c4530c419d2985a441df71a38fc81602\"},\n     {file = \"langgraph_checkpoint-2.0.25.tar.gz\", hash = \"sha256:77a63cab7b5f84dec1d49db561326ec28bdd48bcefb7fe4ac372069d2609287b\"},\n@@ -1580,6 +1655,7 @@ version = \"0.1.63\"\n description = \"SDK for interacting with LangGraph API\"\n optional = false\n python-versions = \"<4.0.0,>=3.9.0\"\n+groups = [\"main\"]\n files = [\n     {file = \"langgraph_sdk-0.1.63-py3-none-any.whl\", hash = \"sha256:6fb78a7fc6a30eea43bd0d6401dbc9e3263d0d4c03f63c04035980da7e586b05\"},\n     {file = \"langgraph_sdk-0.1.63.tar.gz\", hash = \"sha256:62bf2cc31e5aa6c5b9011ee1702bcf1e36e67e142a60bd97af2611162fb58e18\"},\n@@ -1595,6 +1671,7 @@ version = \"0.1.147\"\n description = \"Client library to connect to the LangSmith LLM Tracing and Evaluation Platform.\"\n optional = false\n python-versions = \"<4.0,>=3.8.1\"\n+groups = [\"main\"]\n files = [\n     {file = \"langsmith-0.1.147-py3-none-any.whl\", hash = \"sha256:7166fc23b965ccf839d64945a78e9f1157757add228b086141eb03a60d699a15\"},\n     {file = \"langsmith-0.1.147.tar.gz\", hash = \"sha256:2e933220318a4e73034657103b3b1a3a6109cc5db3566a7e8e03be8d6d7def7a\"},\n@@ -1619,6 +1696,7 @@ version = \"1.3.10\"\n description = \"A super-fast templating language that borrows the best ideas from the existing templating languages.\"\n optional = false\n python-versions = \">=3.8\"\n+groups = [\"main\"]\n files = [\n     {file = \"mako-1.3.10-py3-none-any.whl\", hash = \"sha256:baef24a52fc4fc514a0887ac600f9f1cff3d82c61d4d700a1fa84d597b88db59\"},\n     {file = \"mako-1.3.10.tar.gz\", hash = \"sha256:99579a6f39583fa7e5630a28c3c1f440e4e97a414b80372649c0ce338da2ea28\"},\n@@ -1638,6 +1716,7 @@ version = \"3.0.0\"\n description = \"Python port of markdown-it. Markdown parsing, done right!\"\n optional = false\n python-versions = \">=3.8\"\n+groups = [\"main\"]\n files = [\n     {file = \"markdown-it-py-3.0.0.tar.gz\", hash = \"sha256:e3f60a94fa066dc52ec76661e37c851cb232d92f9886b15cb560aaada2df8feb\"},\n     {file = \"markdown_it_py-3.0.0-py3-none-any.whl\", hash = \"sha256:355216845c60bd96232cd8d8c40e8f9765cc86f46880e43a8fd22dc1a1a8cab1\"},\n@@ -1662,6 +1741,7 @@ version = \"3.0.2\"\n description = \"Safely add untrusted strings to HTML/XML markup.\"\n optional = false\n python-versions = \">=3.9\"\n+groups = [\"main\"]\n files = [\n     {file = \"MarkupSafe-3.0.2-cp310-cp310-macosx_10_9_universal2.whl\", hash = \"sha256:7e94c425039cde14257288fd61dcfb01963e658efbc0ff54f5306b06054700f8\"},\n     {file = \"MarkupSafe-3.0.2-cp310-cp310-macosx_11_0_arm64.whl\", hash = \"sha256:9e2d922824181480953426608b81967de705c3cef4d1af983af849d7bd619158\"},\n@@ -1732,6 +1812,7 @@ version = \"3.10.1\"\n description = \"Python plotting package\"\n optional = false\n python-versions = \">=3.10\"\n+groups = [\"main\"]\n files = [\n     {file = \"matplotlib-3.10.1-cp310-cp310-macosx_10_12_x86_64.whl\", hash = \"sha256:ff2ae14910be903f4a24afdbb6d7d3a6c44da210fc7d42790b87aeac92238a16\"},\n     {file = \"matplotlib-3.10.1-cp310-cp310-macosx_11_0_arm64.whl\", hash = \"sha256:0721a3fd3d5756ed593220a8b86808a36c5031fce489adb5b31ee6dbb47dd5b2\"},\n@@ -1789,6 +1870,7 @@ version = \"0.7.0\"\n description = \"McCabe checker, plugin for flake8\"\n optional = false\n python-versions = \">=3.6\"\n+groups = [\"dev\"]\n files = [\n     {file = \"mccabe-0.7.0-py2.py3-none-any.whl\", hash = \"sha256:6c2d30ab6be0e4a46919781807b4f0d834ebdd6c6e3dca0bda5a15f863427b6e\"},\n     {file = \"mccabe-0.7.0.tar.gz\", hash = \"sha256:348e0240c33b60bbdf4e523192ef919f28cb2c3d7d5c7794f74009290f236325\"},\n@@ -1800,17 +1882,88 @@ version = \"0.1.2\"\n description = \"Markdown URL utilities\"\n optional = false\n python-versions = \">=3.7\"\n+groups = [\"main\"]\n files = [\n     {file = \"mdurl-0.1.2-py3-none-any.whl\", hash = \"sha256:84008a41e51615a49fc9966191ff91509e3c40b939176e643fd50a5c2196b8f8\"},\n     {file = \"mdurl-0.1.2.tar.gz\", hash = \"sha256:bb413d29f5eea38f31dd4754dd7377d4465116fb207585f97bf925588687c1ba\"},\n ]\n \n+[[package]]\n+name = \"msgpack\"\n+version = \"1.1.1\"\n+description = \"MessagePack serializer\"\n+optional = false\n+python-versions = \">=3.8\"\n+groups = [\"main\"]\n+files = [\n+    {file = \"msgpack-1.1.1-cp310-cp310-macosx_10_9_x86_64.whl\", hash = \"sha256:353b6fc0c36fde68b661a12949d7d49f8f51ff5fa019c1e47c87c4ff34b080ed\"},\n+    {file = \"msgpack-1.1.1-cp310-cp310-macosx_11_0_arm64.whl\", hash = \"sha256:79c408fcf76a958491b4e3b103d1c417044544b68e96d06432a189b43d1215c8\"},\n+    {file = \"msgpack-1.1.1-cp310-cp310-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:78426096939c2c7482bf31ef15ca219a9e24460289c00dd0b94411040bb73ad2\"},\n+    {file = \"msgpack-1.1.1-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:8b17ba27727a36cb73aabacaa44b13090feb88a01d012c0f4be70c00f75048b4\"},\n+    {file = \"msgpack-1.1.1-cp310-cp310-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:7a17ac1ea6ec3c7687d70201cfda3b1e8061466f28f686c24f627cae4ea8efd0\"},\n+    {file = \"msgpack-1.1.1-cp310-cp310-musllinux_1_2_aarch64.whl\", hash = \"sha256:88d1e966c9235c1d4e2afac21ca83933ba59537e2e2727a999bf3f515ca2af26\"},\n+    {file = \"msgpack-1.1.1-cp310-cp310-musllinux_1_2_i686.whl\", hash = \"sha256:f6d58656842e1b2ddbe07f43f56b10a60f2ba5826164910968f5933e5178af75\"},\n+    {file = \"msgpack-1.1.1-cp310-cp310-musllinux_1_2_x86_64.whl\", hash = \"sha256:96decdfc4adcbc087f5ea7ebdcfd3dee9a13358cae6e81d54be962efc38f6338\"},\n+    {file = \"msgpack-1.1.1-cp310-cp310-win32.whl\", hash = \"sha256:6640fd979ca9a212e4bcdf6eb74051ade2c690b862b679bfcb60ae46e6dc4bfd\"},\n+    {file = \"msgpack-1.1.1-cp310-cp310-win_amd64.whl\", hash = \"sha256:8b65b53204fe1bd037c40c4148d00ef918eb2108d24c9aaa20bc31f9810ce0a8\"},\n+    {file = \"msgpack-1.1.1-cp311-cp311-macosx_10_9_x86_64.whl\", hash = \"sha256:71ef05c1726884e44f8b1d1773604ab5d4d17729d8491403a705e649116c9558\"},\n+    {file = \"msgpack-1.1.1-cp311-cp311-macosx_11_0_arm64.whl\", hash = \"sha256:36043272c6aede309d29d56851f8841ba907a1a3d04435e43e8a19928e243c1d\"},\n+    {file = \"msgpack-1.1.1-cp311-cp311-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:a32747b1b39c3ac27d0670122b57e6e57f28eefb725e0b625618d1b59bf9d1e0\"},\n+    {file = \"msgpack-1.1.1-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:8a8b10fdb84a43e50d38057b06901ec9da52baac6983d3f709d8507f3889d43f\"},\n+    {file = \"msgpack-1.1.1-cp311-cp311-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:ba0c325c3f485dc54ec298d8b024e134acf07c10d494ffa24373bea729acf704\"},\n+    {file = \"msgpack-1.1.1-cp311-cp311-musllinux_1_2_aarch64.whl\", hash = \"sha256:88daaf7d146e48ec71212ce21109b66e06a98e5e44dca47d853cbfe171d6c8d2\"},\n+    {file = \"msgpack-1.1.1-cp311-cp311-musllinux_1_2_i686.whl\", hash = \"sha256:d8b55ea20dc59b181d3f47103f113e6f28a5e1c89fd5b67b9140edb442ab67f2\"},\n+    {file = \"msgpack-1.1.1-cp311-cp311-musllinux_1_2_x86_64.whl\", hash = \"sha256:4a28e8072ae9779f20427af07f53bbb8b4aa81151054e882aee333b158da8752\"},\n+    {file = \"msgpack-1.1.1-cp311-cp311-win32.whl\", hash = \"sha256:7da8831f9a0fdb526621ba09a281fadc58ea12701bc709e7b8cbc362feabc295\"},\n+    {file = \"msgpack-1.1.1-cp311-cp311-win_amd64.whl\", hash = \"sha256:5fd1b58e1431008a57247d6e7cc4faa41c3607e8e7d4aaf81f7c29ea013cb458\"},\n+    {file = \"msgpack-1.1.1-cp312-cp312-macosx_10_13_x86_64.whl\", hash = \"sha256:ae497b11f4c21558d95de9f64fff7053544f4d1a17731c866143ed6bb4591238\"},\n+    {file = \"msgpack-1.1.1-cp312-cp312-macosx_11_0_arm64.whl\", hash = \"sha256:33be9ab121df9b6b461ff91baac6f2731f83d9b27ed948c5b9d1978ae28bf157\"},\n+    {file = \"msgpack-1.1.1-cp312-cp312-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:6f64ae8fe7ffba251fecb8408540c34ee9df1c26674c50c4544d72dbf792e5ce\"},\n+    {file = \"msgpack-1.1.1-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:a494554874691720ba5891c9b0b39474ba43ffb1aaf32a5dac874effb1619e1a\"},\n+    {file = \"msgpack-1.1.1-cp312-cp312-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:cb643284ab0ed26f6957d969fe0dd8bb17beb567beb8998140b5e38a90974f6c\"},\n+    {file = \"msgpack-1.1.1-cp312-cp312-musllinux_1_2_aarch64.whl\", hash = \"sha256:d275a9e3c81b1093c060c3837e580c37f47c51eca031f7b5fb76f7b8470f5f9b\"},\n+    {file = \"msgpack-1.1.1-cp312-cp312-musllinux_1_2_i686.whl\", hash = \"sha256:4fd6b577e4541676e0cc9ddc1709d25014d3ad9a66caa19962c4f5de30fc09ef\"},\n+    {file = \"msgpack-1.1.1-cp312-cp312-musllinux_1_2_x86_64.whl\", hash = \"sha256:bb29aaa613c0a1c40d1af111abf025f1732cab333f96f285d6a93b934738a68a\"},\n+    {file = \"msgpack-1.1.1-cp312-cp312-win32.whl\", hash = \"sha256:870b9a626280c86cff9c576ec0d9cbcc54a1e5ebda9cd26dab12baf41fee218c\"},\n+    {file = \"msgpack-1.1.1-cp312-cp312-win_amd64.whl\", hash = \"sha256:5692095123007180dca3e788bb4c399cc26626da51629a31d40207cb262e67f4\"},\n+    {file = \"msgpack-1.1.1-cp313-cp313-macosx_10_13_x86_64.whl\", hash = \"sha256:3765afa6bd4832fc11c3749be4ba4b69a0e8d7b728f78e68120a157a4c5d41f0\"},\n+    {file = \"msgpack-1.1.1-cp313-cp313-macosx_11_0_arm64.whl\", hash = \"sha256:8ddb2bcfd1a8b9e431c8d6f4f7db0773084e107730ecf3472f1dfe9ad583f3d9\"},\n+    {file = \"msgpack-1.1.1-cp313-cp313-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:196a736f0526a03653d829d7d4c5500a97eea3648aebfd4b6743875f28aa2af8\"},\n+    {file = \"msgpack-1.1.1-cp313-cp313-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:9d592d06e3cc2f537ceeeb23d38799c6ad83255289bb84c2e5792e5a8dea268a\"},\n+    {file = \"msgpack-1.1.1-cp313-cp313-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:4df2311b0ce24f06ba253fda361f938dfecd7b961576f9be3f3fbd60e87130ac\"},\n+    {file = \"msgpack-1.1.1-cp313-cp313-musllinux_1_2_aarch64.whl\", hash = \"sha256:e4141c5a32b5e37905b5940aacbc59739f036930367d7acce7a64e4dec1f5e0b\"},\n+    {file = \"msgpack-1.1.1-cp313-cp313-musllinux_1_2_i686.whl\", hash = \"sha256:b1ce7f41670c5a69e1389420436f41385b1aa2504c3b0c30620764b15dded2e7\"},\n+    {file = \"msgpack-1.1.1-cp313-cp313-musllinux_1_2_x86_64.whl\", hash = \"sha256:4147151acabb9caed4e474c3344181e91ff7a388b888f1e19ea04f7e73dc7ad5\"},\n+    {file = \"msgpack-1.1.1-cp313-cp313-win32.whl\", hash = \"sha256:500e85823a27d6d9bba1d057c871b4210c1dd6fb01fbb764e37e4e8847376323\"},\n+    {file = \"msgpack-1.1.1-cp313-cp313-win_amd64.whl\", hash = \"sha256:6d489fba546295983abd142812bda76b57e33d0b9f5d5b71c09a583285506f69\"},\n+    {file = \"msgpack-1.1.1-cp38-cp38-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:bba1be28247e68994355e028dcd668316db30c1f758d3241a7b903ac78dcd285\"},\n+    {file = \"msgpack-1.1.1-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:b8f93dcddb243159c9e4109c9750ba5b335ab8d48d9522c5308cd05d7e3ce600\"},\n+    {file = \"msgpack-1.1.1-cp38-cp38-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:2fbbc0b906a24038c9958a1ba7ae0918ad35b06cb449d398b76a7d08470b0ed9\"},\n+    {file = \"msgpack-1.1.1-cp38-cp38-musllinux_1_2_aarch64.whl\", hash = \"sha256:61e35a55a546a1690d9d09effaa436c25ae6130573b6ee9829c37ef0f18d5e78\"},\n+    {file = \"msgpack-1.1.1-cp38-cp38-musllinux_1_2_i686.whl\", hash = \"sha256:1abfc6e949b352dadf4bce0eb78023212ec5ac42f6abfd469ce91d783c149c2a\"},\n+    {file = \"msgpack-1.1.1-cp38-cp38-musllinux_1_2_x86_64.whl\", hash = \"sha256:996f2609ddf0142daba4cefd767d6db26958aac8439ee41db9cc0db9f4c4c3a6\"},\n+    {file = \"msgpack-1.1.1-cp38-cp38-win32.whl\", hash = \"sha256:4d3237b224b930d58e9d83c81c0dba7aacc20fcc2f89c1e5423aa0529a4cd142\"},\n+    {file = \"msgpack-1.1.1-cp38-cp38-win_amd64.whl\", hash = \"sha256:da8f41e602574ece93dbbda1fab24650d6bf2a24089f9e9dbb4f5730ec1e58ad\"},\n+    {file = \"msgpack-1.1.1-cp39-cp39-macosx_10_9_x86_64.whl\", hash = \"sha256:f5be6b6bc52fad84d010cb45433720327ce886009d862f46b26d4d154001994b\"},\n+    {file = \"msgpack-1.1.1-cp39-cp39-macosx_11_0_arm64.whl\", hash = \"sha256:3a89cd8c087ea67e64844287ea52888239cbd2940884eafd2dcd25754fb72232\"},\n+    {file = \"msgpack-1.1.1-cp39-cp39-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:1d75f3807a9900a7d575d8d6674a3a47e9f227e8716256f35bc6f03fc597ffbf\"},\n+    {file = \"msgpack-1.1.1-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:d182dac0221eb8faef2e6f44701812b467c02674a322c739355c39e94730cdbf\"},\n+    {file = \"msgpack-1.1.1-cp39-cp39-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:1b13fe0fb4aac1aa5320cd693b297fe6fdef0e7bea5518cbc2dd5299f873ae90\"},\n+    {file = \"msgpack-1.1.1-cp39-cp39-musllinux_1_2_aarch64.whl\", hash = \"sha256:435807eeb1bc791ceb3247d13c79868deb22184e1fc4224808750f0d7d1affc1\"},\n+    {file = \"msgpack-1.1.1-cp39-cp39-musllinux_1_2_i686.whl\", hash = \"sha256:4835d17af722609a45e16037bb1d4d78b7bdf19d6c0128116d178956618c4e88\"},\n+    {file = \"msgpack-1.1.1-cp39-cp39-musllinux_1_2_x86_64.whl\", hash = \"sha256:a8ef6e342c137888ebbfb233e02b8fbd689bb5b5fcc59b34711ac47ebd504478\"},\n+    {file = \"msgpack-1.1.1-cp39-cp39-win32.whl\", hash = \"sha256:61abccf9de335d9efd149e2fff97ed5974f2481b3353772e8e2dd3402ba2bd57\"},\n+    {file = \"msgpack-1.1.1-cp39-cp39-win_amd64.whl\", hash = \"sha256:40eae974c873b2992fd36424a5d9407f93e97656d999f43fca9d29f820899084\"},\n+    {file = \"msgpack-1.1.1.tar.gz\", hash = \"sha256:77b79ce34a2bdab2594f490c8e80dd62a02d650b91a75159a63ec413b8d104cd\"},\n+]\n+\n [[package]]\n name = \"multidict\"\n version = \"6.4.3\"\n description = \"multidict implementation\"\n optional = false\n python-versions = \">=3.9\"\n+groups = [\"main\"]\n files = [\n     {file = \"multidict-6.4.3-cp310-cp310-macosx_10_9_universal2.whl\", hash = \"sha256:32a998bd8a64ca48616eac5a8c1cc4fa38fb244a3facf2eeb14abe186e0f6cc5\"},\n     {file = \"multidict-6.4.3-cp310-cp310-macosx_10_9_x86_64.whl\", hash = \"sha256:a54ec568f1fc7f3c313c2f3b16e5db346bf3660e1309746e7fccbbfded856188\"},\n@@ -1924,6 +2077,7 @@ version = \"1.1.0\"\n description = \"Type system extensions for programs checked with the mypy type checker.\"\n optional = false\n python-versions = \">=3.8\"\n+groups = [\"dev\"]\n files = [\n     {file = \"mypy_extensions-1.1.0-py3-none-any.whl\", hash = \"sha256:1be4cccdb0f2482337c4743e60421de3a356cd97508abadd57d47403e94f5505\"},\n     {file = \"mypy_extensions-1.1.0.tar.gz\", hash = \"sha256:52e68efc3284861e772bbcd66823fde5ae21fd2fdb51c62a211403730b916558\"},\n@@ -1935,6 +2089,7 @@ version = \"1.26.4\"\n description = \"Fundamental package for array computing in Python\"\n optional = false\n python-versions = \">=3.9\"\n+groups = [\"main\"]\n files = [\n     {file = \"numpy-1.26.4-cp310-cp310-macosx_10_9_x86_64.whl\", hash = \"sha256:9ff0f4f29c51e2803569d7a51c2304de5554655a60c5d776e35b4a41413830d0\"},\n     {file = \"numpy-1.26.4-cp310-cp310-macosx_11_0_arm64.whl\", hash = \"sha256:2e4ee3380d6de9c9ec04745830fd9e2eccb3e6cf790d39d7b98ffd19b0dd754a\"},\n@@ -1980,6 +2135,7 @@ version = \"0.4.8\"\n description = \"The official Python client for Ollama.\"\n optional = false\n python-versions = \"<4.0,>=3.8\"\n+groups = [\"main\"]\n files = [\n     {file = \"ollama-0.4.8-py3-none-any.whl\", hash = \"sha256:04312af2c5e72449aaebac4a2776f52ef010877c554103419d3f36066fe8af4c\"},\n     {file = \"ollama-0.4.8.tar.gz\", hash = \"sha256:1121439d49b96fa8339842965d0616eba5deb9f8c790786cdf4c0b3df4833802\"},\n@@ -1995,6 +2151,7 @@ version = \"1.76.2\"\n description = \"The official Python library for the openai API\"\n optional = false\n python-versions = \">=3.8\"\n+groups = [\"main\"]\n files = [\n     {file = \"openai-1.76.2-py3-none-any.whl\", hash = \"sha256:9c1d9ad59e6e3bea7205eedc9ca66eeebae18d47b527e505a2b0d2fb1538e26e\"},\n     {file = \"openai-1.76.2.tar.gz\", hash = \"sha256:f430c8b848775907405c6eff54621254c96f6444c593c097e0cc3a9f8fdda96f\"},\n@@ -2021,6 +2178,7 @@ version = \"3.10.17\"\n description = \"Fast, correct Python JSON library supporting dataclasses, datetimes, and numpy\"\n optional = false\n python-versions = \">=3.9\"\n+groups = [\"main\"]\n files = [\n     {file = \"orjson-3.10.17-cp310-cp310-macosx_10_15_x86_64.macosx_11_0_arm64.macosx_10_15_universal2.whl\", hash = \"sha256:bc399cf138a0201d0bf2399b44195d33a0a5aee149dab114340da0d766c88b95\"},\n     {file = \"orjson-3.10.17-cp310-cp310-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:59225b27b72e0e1626d869f7b987da6c74f9b6026cf9a87c1cdaf74ca9f7b8c0\"},\n@@ -2102,6 +2260,7 @@ version = \"1.9.1\"\n description = \"Fast, correct Python msgpack library supporting dataclasses, datetimes, and numpy\"\n optional = false\n python-versions = \">=3.9\"\n+groups = [\"main\"]\n files = [\n     {file = \"ormsgpack-1.9.1-cp310-cp310-macosx_10_12_x86_64.macosx_11_0_arm64.macosx_10_12_universal2.whl\", hash = \"sha256:f1f804fd9c0fd84213a6022c34172f82323b34afa7052a4af18797582cf56365\"},\n     {file = \"ormsgpack-1.9.1-cp310-cp310-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:eab5cec99c46276b37071d570aab98603f3d0309b3818da3247eb64bb95e5cfc\"},\n@@ -2152,6 +2311,7 @@ version = \"24.2\"\n description = \"Core utilities for Python packages\"\n optional = false\n python-versions = \">=3.8\"\n+groups = [\"main\", \"dev\"]\n files = [\n     {file = \"packaging-24.2-py3-none-any.whl\", hash = \"sha256:09abb1bccd265c01f4a3aa3f7a7db064b36514d2cba19a2f694fe6150451a759\"},\n     {file = \"packaging-24.2.tar.gz\", hash = \"sha256:c228a6dc5e932d346bc5739379109d49e8853dd8223571c7c5b55260edc0b97f\"},\n@@ -2163,6 +2323,7 @@ version = \"2.2.3\"\n description = \"Powerful data structures for data analysis, time series, and statistics\"\n optional = false\n python-versions = \">=3.9\"\n+groups = [\"main\"]\n files = [\n     {file = \"pandas-2.2.3-cp310-cp310-macosx_10_9_x86_64.whl\", hash = \"sha256:1948ddde24197a0f7add2bdc4ca83bf2b1ef84a1bc8ccffd95eda17fd836ecb5\"},\n     {file = \"pandas-2.2.3-cp310-cp310-macosx_11_0_arm64.whl\", hash = \"sha256:381175499d3802cde0eabbaf6324cce0c4f5d52ca6f8c377c29ad442f50f6348\"},\n@@ -2248,6 +2409,7 @@ version = \"0.12.1\"\n description = \"Utility library for gitignore style pattern matching of file paths.\"\n optional = false\n python-versions = \">=3.8\"\n+groups = [\"dev\"]\n files = [\n     {file = \"pathspec-0.12.1-py3-none-any.whl\", hash = \"sha256:a0d503e138a4c123b27490a4f7beda6a01c6f288df0e4a8b79c7eb0dc7b4cc08\"},\n     {file = \"pathspec-0.12.1.tar.gz\", hash = \"sha256:a482d51503a1ab33b1c67a6c3813a26953dbdc71c31dacaef9a838c4e29f5712\"},\n@@ -2259,6 +2421,7 @@ version = \"11.2.1\"\n description = \"Python Imaging Library (Fork)\"\n optional = false\n python-versions = \">=3.9\"\n+groups = [\"main\"]\n files = [\n     {file = \"pillow-11.2.1-cp310-cp310-macosx_10_10_x86_64.whl\", hash = \"sha256:d57a75d53922fc20c165016a20d9c44f73305e67c351bbc60d1adaf662e74047\"},\n     {file = \"pillow-11.2.1-cp310-cp310-macosx_11_0_arm64.whl\", hash = \"sha256:127bf6ac4a5b58b3d32fc8289656f77f80567d65660bc46f72c0d77e6600cc95\"},\n@@ -2349,7 +2512,7 @@ fpx = [\"olefile\"]\n mic = [\"olefile\"]\n test-arrow = [\"pyarrow\"]\n tests = [\"check-manifest\", \"coverage (>=7.4.2)\", \"defusedxml\", \"markdown2\", \"olefile\", \"packaging\", \"pyroma\", \"pytest\", \"pytest-cov\", \"pytest-timeout\", \"trove-classifiers (>=2024.10.12)\"]\n-typing = [\"typing-extensions\"]\n+typing = [\"typing-extensions ; python_version < \\\"3.10\\\"\"]\n xmp = [\"defusedxml\"]\n \n [[package]]\n@@ -2358,6 +2521,7 @@ version = \"4.3.7\"\n description = \"A small Python package for determining appropriate platform-specific dirs, e.g. a `user data dir`.\"\n optional = false\n python-versions = \">=3.9\"\n+groups = [\"dev\"]\n files = [\n     {file = \"platformdirs-4.3.7-py3-none-any.whl\", hash = \"sha256:a03875334331946f13c549dbd8f4bac7a13a50a895a0eb1e8c6a8ace80d40a94\"},\n     {file = \"platformdirs-4.3.7.tar.gz\", hash = \"sha256:eb437d586b6a0986388f0d6f74aa0cde27b48d0e3d66843640bfb6bdcdb6e351\"},\n@@ -2374,6 +2538,7 @@ version = \"1.5.0\"\n description = \"plugin and hook calling mechanisms for python\"\n optional = false\n python-versions = \">=3.8\"\n+groups = [\"dev\"]\n files = [\n     {file = \"pluggy-1.5.0-py3-none-any.whl\", hash = \"sha256:44e1ad92c8ca002de6377e165f3e0f1be63266ab4d554740532335b9d75ea669\"},\n     {file = \"pluggy-1.5.0.tar.gz\", hash = \"sha256:2cffa88e94fdc978c4c574f15f9e59b7f4201d439195c3715ca9e2486f1d0cf1\"},\n@@ -2389,6 +2554,7 @@ version = \"3.0.51\"\n description = \"Library for building powerful interactive command lines in Python\"\n optional = false\n python-versions = \">=3.8\"\n+groups = [\"main\"]\n files = [\n     {file = \"prompt_toolkit-3.0.51-py3-none-any.whl\", hash = \"sha256:52742911fde84e2d423e2f9a4cf1de7d7ac4e51958f648d9540e0fb8db077b07\"},\n     {file = \"prompt_toolkit-3.0.51.tar.gz\", hash = \"sha256:931a162e3b27fc90c86f1b48bb1fb2c528c2761475e57c9c06de13311c7b54ed\"},\n@@ -2403,6 +2569,7 @@ version = \"0.3.1\"\n description = \"Accelerated property cache\"\n optional = false\n python-versions = \">=3.9\"\n+groups = [\"main\"]\n files = [\n     {file = \"propcache-0.3.1-cp310-cp310-macosx_10_9_universal2.whl\", hash = \"sha256:f27785888d2fdd918bc36de8b8739f2d6c791399552333721b58193f68ea3e98\"},\n     {file = \"propcache-0.3.1-cp310-cp310-macosx_10_9_x86_64.whl\", hash = \"sha256:d4e89cde74154c7b5957f87a355bb9c8ec929c167b59c83d90654ea36aeb6180\"},\n@@ -2510,6 +2677,7 @@ version = \"1.26.1\"\n description = \"Beautiful, Pythonic protocol buffers\"\n optional = false\n python-versions = \">=3.7\"\n+groups = [\"main\"]\n files = [\n     {file = \"proto_plus-1.26.1-py3-none-any.whl\", hash = \"sha256:13285478c2dcf2abb829db158e1047e2f1e8d63a077d94263c2b88b043c75a66\"},\n     {file = \"proto_plus-1.26.1.tar.gz\", hash = \"sha256:21a515a4c4c0088a773899e23c7bbade3d18f9c66c73edd4c7ee3816bc96a012\"},\n@@ -2527,6 +2695,7 @@ version = \"6.30.2\"\n description = \"\"\n optional = false\n python-versions = \">=3.9\"\n+groups = [\"main\"]\n files = [\n     {file = \"protobuf-6.30.2-cp310-abi3-win32.whl\", hash = \"sha256:b12ef7df7b9329886e66404bef5e9ce6a26b54069d7f7436a0853ccdeb91c103\"},\n     {file = \"protobuf-6.30.2-cp310-abi3-win_amd64.whl\", hash = \"sha256:7653c99774f73fe6b9301b87da52af0e69783a2e371e8b599b3e9cb4da4b12b9\"},\n@@ -2545,6 +2714,7 @@ version = \"0.6.1\"\n description = \"Pure-Python implementation of ASN.1 types and DER/BER/CER codecs (X.208)\"\n optional = false\n python-versions = \">=3.8\"\n+groups = [\"main\"]\n files = [\n     {file = \"pyasn1-0.6.1-py3-none-any.whl\", hash = \"sha256:0d632f46f2ba09143da3a8afe9e33fb6f92fa2320ab7e886e2d0f7672af84629\"},\n     {file = \"pyasn1-0.6.1.tar.gz\", hash = \"sha256:6f580d2bdd84365380830acf45550f2511469f673cb4a5ae3857a3170128b034\"},\n@@ -2556,6 +2726,7 @@ version = \"0.4.2\"\n description = \"A collection of ASN.1-based protocols modules\"\n optional = false\n python-versions = \">=3.8\"\n+groups = [\"main\"]\n files = [\n     {file = \"pyasn1_modules-0.4.2-py3-none-any.whl\", hash = \"sha256:29253a9207ce32b64c3ac6600edc75368f98473906e8fd1043bd6b5b1de2c14a\"},\n     {file = \"pyasn1_modules-0.4.2.tar.gz\", hash = \"sha256:677091de870a80aae844b1ca6134f54652fa2c8c5a52aa396440ac3106e941e6\"},\n@@ -2570,6 +2741,7 @@ version = \"2.11.1\"\n description = \"Python style guide checker\"\n optional = false\n python-versions = \">=3.8\"\n+groups = [\"dev\"]\n files = [\n     {file = \"pycodestyle-2.11.1-py2.py3-none-any.whl\", hash = \"sha256:44fe31000b2d866f2e41841b18528a505fbd7fef9017b04eff4e2648a0fadc67\"},\n     {file = \"pycodestyle-2.11.1.tar.gz\", hash = \"sha256:41ba0e7afc9752dfb53ced5489e89f8186be00e599e712660695b7a75ff2663f\"},\n@@ -2581,6 +2753,7 @@ version = \"2.11.4\"\n description = \"Data validation using Python type hints\"\n optional = false\n python-versions = \">=3.9\"\n+groups = [\"main\"]\n files = [\n     {file = \"pydantic-2.11.4-py3-none-any.whl\", hash = \"sha256:d9615eaa9ac5a063471da949c8fc16376a84afb5024688b3ff885693506764eb\"},\n     {file = \"pydantic-2.11.4.tar.gz\", hash = \"sha256:32738d19d63a226a52eed76645a98ee07c1f410ee41d93b4afbfa85ed8111c2d\"},\n@@ -2594,14 +2767,15 @@ typing-inspection = \">=0.4.0\"\n \n [package.extras]\n email = [\"email-validator (>=2.0.0)\"]\n-timezone = [\"tzdata\"]\n+timezone = [\"tzdata ; python_version >= \\\"3.9\\\" and platform_system == \\\"Windows\\\"\"]\n \n [[package]]\n name = \"pydantic-core\"\n version = \"2.33.2\"\n description = \"Core functionality for Pydantic validation and serialization\"\n optional = false\n python-versions = \">=3.9\"\n+groups = [\"main\"]\n files = [\n     {file = \"pydantic_core-2.33.2-cp310-cp310-macosx_10_12_x86_64.whl\", hash = \"sha256:2b3d326aaef0c0399d9afffeb6367d5e26ddc24d351dbc9c636840ac355dc5d8\"},\n     {file = \"pydantic_core-2.33.2-cp310-cp310-macosx_11_0_arm64.whl\", hash = \"sha256:0e5b2671f05ba48b94cb90ce55d8bdcaaedb8ba00cc5359f6810fc918713983d\"},\n@@ -2713,6 +2887,7 @@ version = \"3.1.0\"\n description = \"passive checker of Python programs\"\n optional = false\n python-versions = \">=3.8\"\n+groups = [\"dev\"]\n files = [\n     {file = \"pyflakes-3.1.0-py2.py3-none-any.whl\", hash = \"sha256:4132f6d49cb4dae6819e5379898f2b8cce3c5f23994194c24b77d5da2e36f774\"},\n     {file = \"pyflakes-3.1.0.tar.gz\", hash = \"sha256:a0aae034c444db0071aa077972ba4768d40c830d9539fd45bf4cd3f8f6992efc\"},\n@@ -2724,6 +2899,7 @@ version = \"2.19.1\"\n description = \"Pygments is a syntax highlighting package written in Python.\"\n optional = false\n python-versions = \">=3.8\"\n+groups = [\"main\"]\n files = [\n     {file = \"pygments-2.19.1-py3-none-any.whl\", hash = \"sha256:9ea1544ad55cecf4b8242fab6dd35a93bbce657034b0611ee383099054ab6d8c\"},\n     {file = \"pygments-2.19.1.tar.gz\", hash = \"sha256:61c16d2a8576dc0649d9f39e089b5f02bcd27fba10d8fb4dcc28173f7a45151f\"},\n@@ -2738,6 +2914,7 @@ version = \"3.2.3\"\n description = \"pyparsing module - Classes and methods to define and execute parsing grammars\"\n optional = false\n python-versions = \">=3.9\"\n+groups = [\"main\"]\n files = [\n     {file = \"pyparsing-3.2.3-py3-none-any.whl\", hash = \"sha256:a749938e02d6fd0b59b356ca504a24982314bb090c383e3cf201c95ef7e2bfcf\"},\n     {file = \"pyparsing-3.2.3.tar.gz\", hash = \"sha256:b9c13f1ab8b3b542f72e28f634bad4de758ab3ce4546e4301970ad6fa77c38be\"},\n@@ -2752,6 +2929,7 @@ version = \"7.4.4\"\n description = \"pytest: simple powerful testing with Python\"\n optional = false\n python-versions = \">=3.7\"\n+groups = [\"dev\"]\n files = [\n     {file = \"pytest-7.4.4-py3-none-any.whl\", hash = \"sha256:b090cdf5ed60bf4c45261be03239c2c1c22df034fbffe691abe93cd80cea01d8\"},\n     {file = \"pytest-7.4.4.tar.gz\", hash = \"sha256:2cf0005922c6ace4a3e2ec8b4080eb0d9753fdc93107415332f50ce9e7994280\"},\n@@ -2772,6 +2950,7 @@ version = \"2.9.0.post0\"\n description = \"Extensions to the standard Python datetime module\"\n optional = false\n python-versions = \"!=3.0.*,!=3.1.*,!=3.2.*,>=2.7\"\n+groups = [\"main\"]\n files = [\n     {file = \"python-dateutil-2.9.0.post0.tar.gz\", hash = \"sha256:37dd54208da7e1cd875388217d5e00ebd4179249f90fb72437e91a35459a0ad3\"},\n     {file = \"python_dateutil-2.9.0.post0-py2.py3-none-any.whl\", hash = \"sha256:a8b2bc7bffae282281c8140a97d3aa9c14da0b136dfe83f850eea9a5f7470427\"},\n@@ -2786,6 +2965,7 @@ version = \"1.0.0\"\n description = \"Read key-value pairs from a .env file and set them as environment variables\"\n optional = false\n python-versions = \">=3.8\"\n+groups = [\"main\"]\n files = [\n     {file = \"python-dotenv-1.0.0.tar.gz\", hash = \"sha256:a8df96034aae6d2d50a4ebe8216326c61c3eb64836776504fcca410e5937a3ba\"},\n     {file = \"python_dotenv-1.0.0-py3-none-any.whl\", hash = \"sha256:f5971a9226b701070a4bf2c38c89e5a3f0d64de8debda981d1db98583009122a\"},\n@@ -2800,6 +2980,7 @@ version = \"2025.2\"\n description = \"World timezone definitions, modern and historical\"\n optional = false\n python-versions = \"*\"\n+groups = [\"main\"]\n files = [\n     {file = \"pytz-2025.2-py2.py3-none-any.whl\", hash = \"sha256:5ddf76296dd8c44c26eb8f4b6f35488f3ccbf6fbbd7adee0b7262d43f0ec2f00\"},\n     {file = \"pytz-2025.2.tar.gz\", hash = \"sha256:360b9e3dbb49a209c21ad61809c7fb453643e048b38924c765813546746e81c3\"},\n@@ -2811,6 +2992,7 @@ version = \"6.0.2\"\n description = \"YAML parser and emitter for Python\"\n optional = false\n python-versions = \">=3.8\"\n+groups = [\"main\"]\n files = [\n     {file = \"PyYAML-6.0.2-cp310-cp310-macosx_10_9_x86_64.whl\", hash = \"sha256:0a9a2848a5b7feac301353437eb7d5957887edbf81d56e903999a75a3d743086\"},\n     {file = \"PyYAML-6.0.2-cp310-cp310-macosx_11_0_arm64.whl\", hash = \"sha256:29717114e51c84ddfba879543fb232a6ed60086602313ca38cce623c1d62cfbf\"},\n@@ -2873,6 +3055,7 @@ version = \"2.1.0\"\n description = \"Python library to build pretty command line user prompts \u2b50\ufe0f\"\n optional = false\n python-versions = \">=3.8\"\n+groups = [\"main\"]\n files = [\n     {file = \"questionary-2.1.0-py3-none-any.whl\", hash = \"sha256:44174d237b68bc828e4878c763a9ad6790ee61990e0ae72927694ead57bab8ec\"},\n     {file = \"questionary-2.1.0.tar.gz\", hash = \"sha256:6302cdd645b19667d8f6e6634774e9538bfcd1aad9be287e743d96cacaf95587\"},\n@@ -2887,6 +3070,7 @@ version = \"2024.11.6\"\n description = \"Alternative regular expression module, to replace re.\"\n optional = false\n python-versions = \">=3.8\"\n+groups = [\"main\"]\n files = [\n     {file = \"regex-2024.11.6-cp310-cp310-macosx_10_9_universal2.whl\", hash = \"sha256:ff590880083d60acc0433f9c3f713c51f7ac6ebb9adf889c79a261ecf541aa91\"},\n     {file = \"regex-2024.11.6-cp310-cp310-macosx_10_9_x86_64.whl\", hash = \"sha256:658f90550f38270639e83ce492f27d2c8d2cd63805c65a13a14d36ca126753f0\"},\n@@ -2990,6 +3174,7 @@ version = \"2.32.3\"\n description = \"Python HTTP for Humans.\"\n optional = false\n python-versions = \">=3.8\"\n+groups = [\"main\"]\n files = [\n     {file = \"requests-2.32.3-py3-none-any.whl\", hash = \"sha256:70761cfe03c773ceb22aa2f671b4757976145175cdfca038c02654d061d6dcc6\"},\n     {file = \"requests-2.32.3.tar.gz\", hash = \"sha256:55365417734eb18255590a9ff9eb97e9e1da868d4ccd6402399eaf68af20a760\"},\n@@ -3011,6 +3196,7 @@ version = \"1.0.0\"\n description = \"A utility belt for advanced users of python-requests\"\n optional = false\n python-versions = \">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*\"\n+groups = [\"main\"]\n files = [\n     {file = \"requests-toolbelt-1.0.0.tar.gz\", hash = \"sha256:7681a0a3d047012b5bdc0ee37d7f8f07ebe76ab08caeccfc3921ce23c88d5bc6\"},\n     {file = \"requests_toolbelt-1.0.0-py2.py3-none-any.whl\", hash = \"sha256:cccfdd665f0a24fcf4726e690f65639d272bb0637b9b92dfd91a5568ccf6bd06\"},\n@@ -3025,6 +3211,7 @@ version = \"13.9.4\"\n description = \"Render rich text, tables, progress bars, syntax highlighting, markdown and more to the terminal\"\n optional = false\n python-versions = \">=3.8.0\"\n+groups = [\"main\"]\n files = [\n     {file = \"rich-13.9.4-py3-none-any.whl\", hash = \"sha256:6049d5e6ec054bf2779ab3358186963bac2ea89175919d699e378b99738c2a90\"},\n     {file = \"rich-13.9.4.tar.gz\", hash = \"sha256:439594978a49a09530cff7ebc4b5c7103ef57baf48d5ea3184f21d9a2befa098\"},\n@@ -3043,6 +3230,7 @@ version = \"0.14.4\"\n description = \"Rich toolkit for building command-line applications\"\n optional = false\n python-versions = \">=3.8\"\n+groups = [\"main\"]\n files = [\n     {file = \"rich_toolkit-0.14.4-py3-none-any.whl\", hash = \"sha256:cc71ebee83eaa122d8e42882408bc5a4bf0240bbf1e368811ee56d249b3d742a\"},\n     {file = \"rich_toolkit-0.14.4.tar.gz\", hash = \"sha256:db256cf45165cae381c9bbf3b48a0fd4d99a07c80155cc655c80212a62e28fe1\"},\n@@ -3059,6 +3247,7 @@ version = \"4.9.1\"\n description = \"Pure-Python RSA implementation\"\n optional = false\n python-versions = \"<4,>=3.6\"\n+groups = [\"main\"]\n files = [\n     {file = \"rsa-4.9.1-py3-none-any.whl\", hash = \"sha256:68635866661c6836b8d39430f97a996acbd61bfa49406748ea243539fe239762\"},\n     {file = \"rsa-4.9.1.tar.gz\", hash = \"sha256:e7bdbfdb5497da4c07dfd35530e1a902659db6ff241e39d9953cad06ebd0ae75\"},\n@@ -3073,6 +3262,7 @@ version = \"1.5.4\"\n description = \"Tool to Detect Surrounding Shell\"\n optional = false\n python-versions = \">=3.7\"\n+groups = [\"main\"]\n files = [\n     {file = \"shellingham-1.5.4-py2.py3-none-any.whl\", hash = \"sha256:7ecfff8f2fd72616f7481040475a65b2bf8af90a56c89140852d1120324e8686\"},\n     {file = \"shellingham-1.5.4.tar.gz\", hash = \"sha256:8dbca0739d487e5bd35ab3ca4b36e11c4078f3a234bfce294b0a0291363404de\"},\n@@ -3084,6 +3274,7 @@ version = \"1.17.0\"\n description = \"Python 2 and 3 compatibility utilities\"\n optional = false\n python-versions = \"!=3.0.*,!=3.1.*,!=3.2.*,>=2.7\"\n+groups = [\"main\"]\n files = [\n     {file = \"six-1.17.0-py2.py3-none-any.whl\", hash = \"sha256:4721f391ed90541fddacab5acf947aa0d3dc7d27b2e1e8eda2be8970586c3274\"},\n     {file = \"six-1.17.0.tar.gz\", hash = \"sha256:ff70335d468e7eb6ec65b95b99d3a2836546063f63acc5171de367e834932a81\"},\n@@ -3095,6 +3286,7 @@ version = \"1.3.1\"\n description = \"Sniff out which async library your code is running under\"\n optional = false\n python-versions = \">=3.7\"\n+groups = [\"main\"]\n files = [\n     {file = \"sniffio-1.3.1-py3-none-any.whl\", hash = \"sha256:2f6da418d1f1e0fddd844478f41680e794e6051915791a034ff65e5f100525a2\"},\n     {file = \"sniffio-1.3.1.tar.gz\", hash = \"sha256:f4324edc670a0f49750a81b895f35c3adb843cca46f0530f79fc1babb23789dc\"},\n@@ -3106,6 +3298,7 @@ version = \"2.0.40\"\n description = \"Database Abstraction Library\"\n optional = false\n python-versions = \">=3.7\"\n+groups = [\"main\"]\n files = [\n     {file = \"SQLAlchemy-2.0.40-cp37-cp37m-macosx_10_9_x86_64.whl\", hash = \"sha256:ae9597cab738e7cc823f04a704fb754a9249f0b6695a6aeb63b74055cd417a96\"},\n     {file = \"SQLAlchemy-2.0.40-cp37-cp37m-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:37a5c21ab099a83d669ebb251fddf8f5cee4d75ea40a5a1653d9c43d60e20867\"},\n@@ -3195,12 +3388,25 @@ postgresql-psycopgbinary = [\"psycopg[binary] (>=3.0.7)\"]\n pymysql = [\"pymysql\"]\n sqlcipher = [\"sqlcipher3_binary\"]\n \n+[[package]]\n+name = \"sseclient-py\"\n+version = \"1.8.0\"\n+description = \"SSE client for Python\"\n+optional = false\n+python-versions = \"*\"\n+groups = [\"main\"]\n+files = [\n+    {file = \"sseclient-py-1.8.0.tar.gz\", hash = \"sha256:c547c5c1a7633230a38dc599a21a2dc638f9b5c297286b48b46b935c71fac3e8\"},\n+    {file = \"sseclient_py-1.8.0-py2.py3-none-any.whl\", hash = \"sha256:4ecca6dc0b9f963f8384e9d7fd529bf93dd7d708144c4fb5da0e0a1a926fee83\"},\n+]\n+\n [[package]]\n name = \"starlette\"\n version = \"0.27.0\"\n description = \"The little ASGI library that shines.\"\n optional = false\n python-versions = \">=3.7\"\n+groups = [\"main\"]\n files = [\n     {file = \"starlette-0.27.0-py3-none-any.whl\", hash = \"sha256:918416370e846586541235ccd38a474c08b80443ed31c578a418e2209b3eef91\"},\n     {file = \"starlette-0.27.0.tar.gz\", hash = \"sha256:6a6b0d042acb8d469a01eba54e9cda6cbd24ac602c4cd016723117d6a7e73b75\"},\n@@ -3218,6 +3424,7 @@ version = \"0.9.0\"\n description = \"Pretty-print tabular data\"\n optional = false\n python-versions = \">=3.7\"\n+groups = [\"main\"]\n files = [\n     {file = \"tabulate-0.9.0-py3-none-any.whl\", hash = \"sha256:024ca478df22e9340661486f85298cff5f6dcdba14f3813e8830015b9ed1948f\"},\n     {file = \"tabulate-0.9.0.tar.gz\", hash = \"sha256:0095b12bf5966de529c0feb1fa08671671b3368eec77d7ef7ab114be2c068b3c\"},\n@@ -3232,6 +3439,7 @@ version = \"8.5.0\"\n description = \"Retry code until it succeeds\"\n optional = false\n python-versions = \">=3.8\"\n+groups = [\"main\"]\n files = [\n     {file = \"tenacity-8.5.0-py3-none-any.whl\", hash = \"sha256:b594c2a5945830c267ce6b79a166228323ed52718f30302c1359836112346687\"},\n     {file = \"tenacity-8.5.0.tar.gz\", hash = \"sha256:8bc6c0c8a09b31e6cad13c47afbed1a567518250a9a171418582ed8d9c20ca78\"},\n@@ -3247,6 +3455,7 @@ version = \"0.9.0\"\n description = \"tiktoken is a fast BPE tokeniser for use with OpenAI's models\"\n optional = false\n python-versions = \">=3.9\"\n+groups = [\"main\"]\n files = [\n     {file = \"tiktoken-0.9.0-cp310-cp310-macosx_10_12_x86_64.whl\", hash = \"sha256:586c16358138b96ea804c034b8acf3f5d3f0258bd2bc3b0227af4af5d622e382\"},\n     {file = \"tiktoken-0.9.0-cp310-cp310-macosx_11_0_arm64.whl\", hash = \"sha256:d9c59ccc528c6c5dd51820b3474402f69d9a9e1d656226848ad68a8d5b2e5108\"},\n@@ -3294,6 +3503,7 @@ version = \"4.67.1\"\n description = \"Fast, Extensible Progress Meter\"\n optional = false\n python-versions = \">=3.7\"\n+groups = [\"main\"]\n files = [\n     {file = \"tqdm-4.67.1-py3-none-any.whl\", hash = \"sha256:26445eca388f82e72884e0d580d5464cd801a3ea01e63e5601bdff9ba6a48de2\"},\n     {file = \"tqdm-4.67.1.tar.gz\", hash = \"sha256:f8aef9c52c08c13a65f30ea34f4e5aac3fd1a34959879d7e59e63027286627f2\"},\n@@ -3315,6 +3525,7 @@ version = \"0.15.3\"\n description = \"Typer, build great CLIs. Easy to code. Based on Python type hints.\"\n optional = false\n python-versions = \">=3.7\"\n+groups = [\"main\"]\n files = [\n     {file = \"typer-0.15.3-py3-none-any.whl\", hash = \"sha256:c86a65ad77ca531f03de08d1b9cb67cd09ad02ddddf4b34745b5008f43b239bd\"},\n     {file = \"typer-0.15.3.tar.gz\", hash = \"sha256:818873625d0569653438316567861899f7e9972f2e6e0c16dab608345ced713c\"},\n@@ -3332,6 +3543,7 @@ version = \"4.13.2\"\n description = \"Backported and Experimental Type Hints for Python 3.8+\"\n optional = false\n python-versions = \">=3.8\"\n+groups = [\"main\"]\n files = [\n     {file = \"typing_extensions-4.13.2-py3-none-any.whl\", hash = \"sha256:a439e7c04b49fec3e5d3e2beaa21755cadbbdc391694e28ccdd36ca4a1408f8c\"},\n     {file = \"typing_extensions-4.13.2.tar.gz\", hash = \"sha256:e6c81219bd689f51865d9e372991c540bda33a0379d5573cddb9a3a23f7caaef\"},\n@@ -3343,6 +3555,7 @@ version = \"0.4.0\"\n description = \"Runtime typing introspection tools\"\n optional = false\n python-versions = \">=3.9\"\n+groups = [\"main\"]\n files = [\n     {file = \"typing_inspection-0.4.0-py3-none-any.whl\", hash = \"sha256:50e72559fcd2a6367a19f7a7e610e6afcb9fac940c650290eed893d61386832f\"},\n     {file = \"typing_inspection-0.4.0.tar.gz\", hash = \"sha256:9765c87de36671694a67904bf2c96e395be9c6439bb6c87b5142569dcdd65122\"},\n@@ -3357,6 +3570,7 @@ version = \"2025.2\"\n description = \"Provider of IANA time zone data\"\n optional = false\n python-versions = \">=2\"\n+groups = [\"main\"]\n files = [\n     {file = \"tzdata-2025.2-py2.py3-none-any.whl\", hash = \"sha256:1a403fada01ff9221ca8044d701868fa132215d84beb92242d9acd2147f667a8\"},\n     {file = \"tzdata-2025.2.tar.gz\", hash = \"sha256:b60a638fcc0daffadf82fe0f57e53d06bdec2f36c4df66280ae79bce6bd6f2b9\"},\n@@ -3368,13 +3582,14 @@ version = \"2.4.0\"\n description = \"HTTP library with thread-safe connection pooling, file post, and more.\"\n optional = false\n python-versions = \">=3.9\"\n+groups = [\"main\"]\n files = [\n     {file = \"urllib3-2.4.0-py3-none-any.whl\", hash = \"sha256:4e16665048960a0900c702d4a66415956a584919c03361cac9f1df5c5dd7e813\"},\n     {file = \"urllib3-2.4.0.tar.gz\", hash = \"sha256:414bc6535b787febd7567804cc015fee39daab8ad86268f1310a9250697de466\"},\n ]\n \n [package.extras]\n-brotli = [\"brotli (>=1.0.9)\", \"brotlicffi (>=0.8.0)\"]\n+brotli = [\"brotli (>=1.0.9) ; platform_python_implementation == \\\"CPython\\\"\", \"brotlicffi (>=0.8.0) ; platform_python_implementation != \\\"CPython\\\"\"]\n h2 = [\"h2 (>=4,<5)\"]\n socks = [\"pysocks (>=1.5.6,!=1.5.7,<2.0)\"]\n zstd = [\"zstandard (>=0.18.0)\"]\n@@ -3385,6 +3600,7 @@ version = \"0.34.2\"\n description = \"The lightning-fast ASGI server.\"\n optional = false\n python-versions = \">=3.9\"\n+groups = [\"main\"]\n files = [\n     {file = \"uvicorn-0.34.2-py3-none-any.whl\", hash = \"sha256:deb49af569084536d269fe0a6d67e3754f104cf03aba7c11c40f01aadf33c403\"},\n     {file = \"uvicorn-0.34.2.tar.gz\", hash = \"sha256:0e929828f6186353a80b58ea719861d2629d766293b6d19baf086ba31d4f3328\"},\n@@ -3397,19 +3613,21 @@ h11 = \">=0.8\"\n httptools = {version = \">=0.6.3\", optional = true, markers = \"extra == \\\"standard\\\"\"}\n python-dotenv = {version = \">=0.13\", optional = true, markers = \"extra == \\\"standard\\\"\"}\n pyyaml = {version = \">=5.1\", optional = true, markers = \"extra == \\\"standard\\\"\"}\n-uvloop = {version = \">=0.14.0,<0.15.0 || >0.15.0,<0.15.1 || >0.15.1\", optional = true, markers = \"(sys_platform != \\\"win32\\\" and sys_platform != \\\"cygwin\\\") and platform_python_implementation != \\\"PyPy\\\" and extra == \\\"standard\\\"\"}\n+uvloop = {version = \">=0.14.0,<0.15.0 || >0.15.0,<0.15.1 || >0.15.1\", optional = true, markers = \"sys_platform != \\\"win32\\\" and sys_platform != \\\"cygwin\\\" and platform_python_implementation != \\\"PyPy\\\" and extra == \\\"standard\\\"\"}\n watchfiles = {version = \">=0.13\", optional = true, markers = \"extra == \\\"standard\\\"\"}\n websockets = {version = \">=10.4\", optional = true, markers = \"extra == \\\"standard\\\"\"}\n \n [package.extras]\n-standard = [\"colorama (>=0.4)\", \"httptools (>=0.6.3)\", \"python-dotenv (>=0.13)\", \"pyyaml (>=5.1)\", \"uvloop (>=0.14.0,!=0.15.0,!=0.15.1)\", \"watchfiles (>=0.13)\", \"websockets (>=10.4)\"]\n+standard = [\"colorama (>=0.4) ; sys_platform == \\\"win32\\\"\", \"httptools (>=0.6.3)\", \"python-dotenv (>=0.13)\", \"pyyaml (>=5.1)\", \"uvloop (>=0.14.0,!=0.15.0,!=0.15.1) ; sys_platform != \\\"win32\\\" and sys_platform != \\\"cygwin\\\" and platform_python_implementation != \\\"PyPy\\\"\", \"watchfiles (>=0.13)\", \"websockets (>=10.4)\"]\n \n [[package]]\n name = \"uvloop\"\n version = \"0.21.0\"\n description = \"Fast implementation of asyncio event loop on top of libuv\"\n optional = false\n python-versions = \">=3.8.0\"\n+groups = [\"main\"]\n+markers = \"sys_platform != \\\"win32\\\" and sys_platform != \\\"cygwin\\\" and platform_python_implementation != \\\"PyPy\\\"\"\n files = [\n     {file = \"uvloop-0.21.0-cp310-cp310-macosx_10_9_universal2.whl\", hash = \"sha256:ec7e6b09a6fdded42403182ab6b832b71f4edaf7f37a9a0e371a01db5f0cb45f\"},\n     {file = \"uvloop-0.21.0-cp310-cp310-macosx_10_9_x86_64.whl\", hash = \"sha256:196274f2adb9689a289ad7d65700d37df0c0930fd8e4e743fa4834e850d7719d\"},\n@@ -3461,6 +3679,7 @@ version = \"1.0.5\"\n description = \"Simple, modern and high performance file watching and code reload in python.\"\n optional = false\n python-versions = \">=3.9\"\n+groups = [\"main\"]\n files = [\n     {file = \"watchfiles-1.0.5-cp310-cp310-macosx_10_12_x86_64.whl\", hash = \"sha256:5c40fe7dd9e5f81e0847b1ea64e1f5dd79dd61afbedb57759df06767ac719b40\"},\n     {file = \"watchfiles-1.0.5-cp310-cp310-macosx_11_0_arm64.whl\", hash = \"sha256:8c0db396e6003d99bb2d7232c957b5f0b5634bbd1b24e381a5afcc880f7373fb\"},\n@@ -3544,6 +3763,7 @@ version = \"0.2.13\"\n description = \"Measures the displayed width of unicode strings in a terminal\"\n optional = false\n python-versions = \"*\"\n+groups = [\"main\"]\n files = [\n     {file = \"wcwidth-0.2.13-py2.py3-none-any.whl\", hash = \"sha256:3da69048e4540d84af32131829ff948f1e022c1c6bdb8d6102117aac784f6859\"},\n     {file = \"wcwidth-0.2.13.tar.gz\", hash = \"sha256:72ea0c06399eb286d978fdedb6923a9eb47e1c486ce63e9b4e64fc18303972b5\"},\n@@ -3555,6 +3775,7 @@ version = \"15.0.1\"\n description = \"An implementation of the WebSocket Protocol (RFC 6455 & 7692)\"\n optional = false\n python-versions = \">=3.9\"\n+groups = [\"main\"]\n files = [\n     {file = \"websockets-15.0.1-cp310-cp310-macosx_10_9_universal2.whl\", hash = \"sha256:d63efaa0cd96cf0c5fe4d581521d9fa87744540d4bc999ae6e08595a1014b45b\"},\n     {file = \"websockets-15.0.1-cp310-cp310-macosx_10_9_x86_64.whl\", hash = \"sha256:ac60e3b188ec7574cb761b08d50fcedf9d77f1530352db4eef1707fe9dee7205\"},\n@@ -3633,6 +3854,7 @@ version = \"1.20.0\"\n description = \"Yet another URL library\"\n optional = false\n python-versions = \">=3.9\"\n+groups = [\"main\"]\n files = [\n     {file = \"yarl-1.20.0-cp310-cp310-macosx_10_9_universal2.whl\", hash = \"sha256:f1f6670b9ae3daedb325fa55fbe31c22c8228f6e0b513772c2e1c623caa6ab22\"},\n     {file = \"yarl-1.20.0-cp310-cp310-macosx_10_9_x86_64.whl\", hash = \"sha256:85a231fa250dfa3308f3c7896cc007a47bc76e9e8e8595c20b7426cac4884c62\"},\n@@ -3746,6 +3968,6 @@ multidict = \">=4.0\"\n propcache = \">=0.2.1\"\n \n [metadata]\n-lock-version = \"2.0\"\n+lock-version = \"2.1\"\n python-versions = \"^3.11\"\n-content-hash = \"4b63c0cbfd37b7262e6b1364ae4e7ce6c8b410933f3f8e62f12af5ed9646203e\"\n+content-hash = \"680ad21758c391683e2eab88c4c6733c3c9b41942066b999e18769d313e64dbd\"", "blob_url": "https://github.com/virattt/ai-hedge-fund/blob/626e4d48a5c47b47f10d0a878b82471fc14bddf5/poetry.lock", "raw_url": "https://github.com/virattt/ai-hedge-fund/raw/626e4d48a5c47b47f10d0a878b82471fc14bddf5/poetry.lock", "contents_url": "https://api.github.com/repos/virattt/ai-hedge-fund/contents/poetry.lock?ref=626e4d48a5c47b47f10d0a878b82471fc14bddf5"}, {"filename": "pyproject.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "patch": "@@ -34,6 +34,7 @@ pydantic = \"^2.4.2\"\n httpx = \"^0.27.0\"\n sqlalchemy = \"^2.0.22\"\n alembic = \"^1.12.0\"\n+alpaca-py = \"^0.40.2\"\n \n [tool.poetry.group.dev.dependencies]\n pytest = \"^7.4.0\"", "blob_url": "https://github.com/virattt/ai-hedge-fund/blob/626e4d48a5c47b47f10d0a878b82471fc14bddf5/pyproject.toml", "raw_url": "https://github.com/virattt/ai-hedge-fund/raw/626e4d48a5c47b47f10d0a878b82471fc14bddf5/pyproject.toml", "contents_url": "https://api.github.com/repos/virattt/ai-hedge-fund/contents/pyproject.toml?ref=626e4d48a5c47b47f10d0a878b82471fc14bddf5"}, {"filename": "src/trader.py", "status": "added", "additions": 267, "deletions": 0, "changes": 267, "patch": "@@ -0,0 +1,267 @@\n+\"\"\"Live trading CLI for the AI hedge fund.\"\"\"\n+\n+import sys\n+import argparse\n+from dotenv import load_dotenv\n+import questionary\n+from colorama import Fore, Style, init\n+\n+from src.trading.trader import create_trader\n+from src.utils.analysts import ANALYST_ORDER\n+from src.llm.models import LLM_ORDER, OLLAMA_LLM_ORDER, get_model_info, ModelProvider\n+from src.utils.ollama import ensure_ollama_and_model\n+\n+# Load environment variables\n+load_dotenv()\n+init(autoreset=True)\n+\n+\n+def main():\n+    \"\"\"Main CLI entry point for live trading.\"\"\"\n+    parser = argparse.ArgumentParser(description=\"Run live trading with AI hedge fund\")\n+    parser.add_argument(\"--tickers\", type=str, help=\"Comma-separated list of stock ticker symbols\")\n+    parser.add_argument(\"--dry-run\", action=\"store_true\", help=\"Show decisions but don't execute trades\")\n+    parser.add_argument(\"--ignore-market-hours\", action=\"store_true\", help=\"Run even when market is closed (useful with --dry-run)\")\n+    parser.add_argument(\"--continuous\", action=\"store_true\", help=\"Run continuous trading\")\n+    parser.add_argument(\"--interval\", type=int, default=60, help=\"Trading interval in minutes (default: 60)\")\n+    parser.add_argument(\"--available-capital\", type=float, help=\"Override available capital (uses broker cash if not specified)\")\n+    parser.add_argument(\"--margin-requirement\", type=float, help=\"Margin requirement ratio for short positions (uses broker default if not specified)\")\n+    parser.add_argument(\"--show-reasoning\", action=\"store_true\", help=\"Show reasoning from each agent\")\n+    parser.add_argument(\"--ollama\", action=\"store_true\", help=\"Use Ollama for local LLM inference\")\n+    parser.add_argument(\"--analysts\", type=str, help=\"Comma-separated list of analysts to use\")\n+    parser.add_argument(\"--analysts-all\", action=\"store_true\", help=\"Use all available analysts\")\n+    parser.add_argument(\"--list-analysts\", action=\"store_true\", help=\"List all available analysts and exit\")\n+    parser.add_argument(\"--model\", type=str, help=\"LLM model name to use\")\n+    parser.add_argument(\"--list-models\", action=\"store_true\", help=\"List all available models and exit\")\n+\n+    args = parser.parse_args()\n+\n+    # Handle list options\n+    if args.list_analysts:\n+        print(f\"\\n{Fore.CYAN}Available Analysts:{Style.RESET_ALL}\")\n+        for display, value in ANALYST_ORDER:\n+            print(f\"  {Fore.GREEN}{value:<25}{Style.RESET_ALL} - {display}\")\n+        print(f\"\\n{Fore.YELLOW}Usage examples:{Style.RESET_ALL}\")\n+        print(f\"  --analysts warren_buffett,michael_burry\")\n+        print(f\"  --analysts-all\")\n+        sys.exit(0)\n+\n+    if args.list_models:\n+        print(f\"\\n{Fore.CYAN}Available Models:{Style.RESET_ALL}\")\n+        print(f\"\\n{Fore.YELLOW}Cloud Models:{Style.RESET_ALL}\")\n+        for display, name, provider in LLM_ORDER:\n+            print(f\"  {Fore.GREEN}{name:<25}{Style.RESET_ALL} - {display} ({provider})\")\n+        \n+        print(f\"\\n{Fore.YELLOW}Ollama Models:{Style.RESET_ALL}\")\n+        for display, name, _ in OLLAMA_LLM_ORDER:\n+            print(f\"  {Fore.GREEN}{name:<25}{Style.RESET_ALL} - {display}\")\n+        \n+        print(f\"\\n{Fore.YELLOW}Usage examples:{Style.RESET_ALL}\")\n+        print(f\"  --model gpt-4o\")\n+        print(f\"  --model claude-3-5-sonnet-20241022\")\n+        print(f\"  --ollama --model llama3\")\n+        sys.exit(0)\n+\n+    # Check if tickers are required\n+    if not args.tickers:\n+        print(f\"{Fore.RED}Error: --tickers is required for trading operations{Style.RESET_ALL}\")\n+        print(\"Use --list-analysts or --list-models to see available options\")\n+        sys.exit(1)\n+\n+\n+    # Parse tickers\n+    tickers = [ticker.strip().upper() for ticker in args.tickers.split(\",\")]\n+    print(f\"\\n{Fore.CYAN}Trading tickers: {', '.join(tickers)}{Style.RESET_ALL}\")\n+\n+\n+    # Select analysts\n+    selected_analysts = None\n+    if args.analysts_all:\n+        selected_analysts = [a[1] for a in ANALYST_ORDER]\n+    elif args.analysts:\n+        selected_analysts = [a.strip() for a in args.analysts.split(\",\") if a.strip()]\n+    else:\n+        selected_analysts = questionary.checkbox(\n+            \"Select your AI analysts:\",\n+            choices=[questionary.Choice(display, value=value) for display, value in ANALYST_ORDER],\n+            instruction=\"\\n\\nInstructions:\\n1. Press Space to select/unselect analysts\\n2. Press 'a' to select/unselect all\\n3. Press Enter when done\\n\",\n+            validate=lambda x: len(x) > 0 or \"You must select at least one analyst.\",\n+            style=questionary.Style([\n+                (\"checkbox-selected\", \"fg:green\"),\n+                (\"selected\", \"fg:green noinherit\"),\n+                (\"highlighted\", \"noinherit\"),\n+                (\"pointer\", \"noinherit\"),\n+            ])\n+        ).ask()\n+\n+    if not selected_analysts:\n+        print(\"\\nExiting...\")\n+        sys.exit(0)\n+\n+    print(f\"\\nSelected analysts: {', '.join(Fore.GREEN + choice.title().replace('_', ' ') + Style.RESET_ALL for choice in selected_analysts)}\")\n+\n+    # Select LLM model\n+    model_name = \"\"\n+    model_provider = \"\"\n+\n+    if args.model:\n+        # Model specified via CLI\n+        model_name = args.model\n+        if args.ollama:\n+            model_provider = ModelProvider.OLLAMA.value\n+            if not ensure_ollama_and_model(model_name):\n+                print(f\"{Fore.RED}Cannot proceed without Ollama and the selected model{Style.RESET_ALL}\")\n+                sys.exit(1)\n+        else:\n+            # Try to find the model in the LLM_ORDER\n+            found = False\n+            for display, name, provider in LLM_ORDER:\n+                if name == model_name:\n+                    model_provider = provider\n+                    found = True\n+                    break\n+            if not found:\n+                print(f\"{Fore.RED}Model '{model_name}' not found in available models{Style.RESET_ALL}\")\n+                sys.exit(1)\n+        print(f\"\\nUsing model: {Fore.GREEN + Style.BRIGHT}{model_name}{Style.RESET_ALL} ({model_provider})\")\n+\n+    elif args.ollama:\n+        print(f\"{Fore.CYAN}Using Ollama for local LLM inference{Style.RESET_ALL}\")\n+        \n+        model_name = questionary.select(\n+            \"Select your Ollama model:\",\n+            choices=[questionary.Choice(display, value=value) for display, value, _ in OLLAMA_LLM_ORDER],\n+            style=questionary.Style([\n+                (\"selected\", \"fg:green bold\"),\n+                (\"pointer\", \"fg:green bold\"),\n+                (\"highlighted\", \"fg:green\"),\n+                (\"answer\", \"fg:green bold\"),\n+            ])\n+        ).ask()\n+\n+        if not model_name:\n+            print(\"\\nExiting...\")\n+            sys.exit(0)\n+\n+        if model_name == \"-\":\n+            model_name = questionary.text(\"Enter the custom model name:\").ask()\n+            if not model_name:\n+                print(\"\\nExiting...\")\n+                sys.exit(0)\n+\n+        if not ensure_ollama_and_model(model_name):\n+            print(f\"{Fore.RED}Cannot proceed without Ollama and the selected model{Style.RESET_ALL}\")\n+            sys.exit(1)\n+\n+        model_provider = ModelProvider.OLLAMA.value\n+        print(f\"\\nSelected {Fore.CYAN}Ollama{Style.RESET_ALL} model: {Fore.GREEN + Style.BRIGHT}{model_name}{Style.RESET_ALL}\")\n+\n+    else:\n+        model_choice = questionary.select(\n+            \"Select your LLM model:\",\n+            choices=[questionary.Choice(display, value=(name, provider)) for display, name, provider in LLM_ORDER],\n+            style=questionary.Style([\n+                (\"selected\", \"fg:green bold\"),\n+                (\"pointer\", \"fg:green bold\"),\n+                (\"highlighted\", \"fg:green\"),\n+                (\"answer\", \"fg:green bold\"),\n+            ])\n+        ).ask()\n+\n+        if not model_choice:\n+            print(\"\\nExiting...\")\n+            sys.exit(0)\n+\n+        model_name, model_provider = model_choice\n+\n+        model_info = get_model_info(model_name, model_provider)\n+        if model_info and model_info.is_custom():\n+            model_name = questionary.text(\"Enter the custom model name:\").ask()\n+            if not model_name:\n+                print(\"\\nExiting...\")\n+                sys.exit(0)\n+\n+        print(f\"\\nSelected {Fore.CYAN}{model_provider}{Style.RESET_ALL} model: {Fore.GREEN + Style.BRIGHT}{model_name}{Style.RESET_ALL}\")\n+\n+    # Create trader\n+    print(f\"\\n{Fore.CYAN}Creating trader...{Style.RESET_ALL}\")\n+    trader = create_trader(\n+        tickers=tickers,\n+        selected_analysts=selected_analysts,\n+        model_name=model_name,\n+        model_provider=model_provider,\n+        available_capital=args.available_capital,\n+        margin_requirement=args.margin_requirement,\n+        dry_run=args.dry_run,\n+        ignore_market_hours=args.ignore_market_hours\n+    )\n+\n+    # Connect to broker\n+    print(f\"\\n{Fore.CYAN}Connecting to broker...{Style.RESET_ALL}\")\n+    if not trader.connect():\n+        print(f\"{Fore.RED}Failed to connect to broker{Style.RESET_ALL}\")\n+        sys.exit(1)\n+    \n+    # Get margin requirement from broker if not specified\n+    if args.margin_requirement is None:\n+        try:\n+            # Get account default margin requirement\n+            broker_margin_req = trader.broker.get_margin_requirement()\n+            trader.margin_requirement = broker_margin_req\n+            print(f\"{Fore.CYAN}Using broker default margin requirement: {broker_margin_req:.1%}{Style.RESET_ALL}\")\n+            \n+            # Show ticker-specific margin requirements\n+            print(f\"{Fore.CYAN}Ticker-specific margin requirements:{Style.RESET_ALL}\")\n+            for ticker in tickers:\n+                try:\n+                    ticker_margin = trader.broker.get_margin_requirement(ticker)\n+                    print(f\"  {ticker}: {ticker_margin:.1%}\")\n+                except Exception as e:\n+                    print(f\"  {ticker}: {broker_margin_req:.1%} (default - could not get specific requirement)\")\n+        except Exception as e:\n+            trader.margin_requirement = 0.5  # Default fallback\n+            print(f\"{Fore.YELLOW}Could not get broker margin requirement, using default 50%{Style.RESET_ALL}\")\n+    \n+    # Show capital usage information\n+    if args.available_capital:\n+        print(f\"{Fore.CYAN}Using limited capital: ${args.available_capital:,.2f} (maintaining account margin capability){Style.RESET_ALL}\")\n+    \n+    # Check for live trading warning after connection\n+    if not trader.broker.is_paper_trading():\n+        confirm = questionary.confirm(\n+            f\"{Fore.RED}WARNING: Connected to LIVE TRADING account with real money. Are you sure you want to continue?{Style.RESET_ALL}\",\n+            default=False\n+        ).ask()\n+        if not confirm:\n+            print(\"Exiting...\")\n+            trader.disconnect()\n+            sys.exit(0)\n+\n+    try:\n+        # Show portfolio summary\n+        trader.print_portfolio_summary()\n+\n+        # Run trading\n+        if args.continuous:\n+            print(f\"\\n{Fore.BLUE}Starting continuous trading mode...{Style.RESET_ALL}\")\n+            trader.run_continuous_trading(interval_minutes=args.interval)\n+        else:\n+            print(f\"\\n{Fore.BLUE}Running single trading session...{Style.RESET_ALL}\")\n+            trader.run_trading_session()\n+            \n+            # Show updated portfolio\n+            trader.print_portfolio_summary()\n+\n+    except KeyboardInterrupt:\n+        print(f\"\\n{Fore.YELLOW}Trading interrupted by user{Style.RESET_ALL}\")\n+    except Exception as e:\n+        print(f\"\\n{Fore.RED}Trading failed: {e}{Style.RESET_ALL}\")\n+        sys.exit(1)\n+    finally:\n+        trader.disconnect()\n+\n+    print(f\"\\n{Fore.GREEN}Trading session completed{Style.RESET_ALL}\")\n+\n+\n+if __name__ == \"__main__\":\n+    main()\n\\ No newline at end of file", "blob_url": "https://github.com/virattt/ai-hedge-fund/blob/626e4d48a5c47b47f10d0a878b82471fc14bddf5/src%2Ftrader.py", "raw_url": "https://github.com/virattt/ai-hedge-fund/raw/626e4d48a5c47b47f10d0a878b82471fc14bddf5/src%2Ftrader.py", "contents_url": "https://api.github.com/repos/virattt/ai-hedge-fund/contents/src%2Ftrader.py?ref=626e4d48a5c47b47f10d0a878b82471fc14bddf5"}, {"filename": "src/trading/__init__.py", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "patch": "@@ -0,0 +1 @@\n+\"\"\"Trading module for real broker integration.\"\"\"\n\\ No newline at end of file", "blob_url": "https://github.com/virattt/ai-hedge-fund/blob/626e4d48a5c47b47f10d0a878b82471fc14bddf5/src%2Ftrading%2F__init__.py", "raw_url": "https://github.com/virattt/ai-hedge-fund/raw/626e4d48a5c47b47f10d0a878b82471fc14bddf5/src%2Ftrading%2F__init__.py", "contents_url": "https://api.github.com/repos/virattt/ai-hedge-fund/contents/src%2Ftrading%2F__init__.py?ref=626e4d48a5c47b47f10d0a878b82471fc14bddf5"}, {"filename": "src/trading/alpaca_broker.py", "status": "added", "additions": 390, "deletions": 0, "changes": 390, "patch": "@@ -0,0 +1,390 @@\n+\"\"\"Alpaca broker implementation for live trading.\"\"\"\n+\n+import os\n+from alpaca.trading.client import TradingClient\n+from alpaca.trading.requests import MarketOrderRequest, LimitOrderRequest, StopOrderRequest\n+from alpaca.trading.enums import OrderSide, TimeInForce, OrderType\n+from alpaca.data.historical import StockHistoricalDataClient\n+from alpaca.data.requests import StockLatestQuoteRequest\n+from alpaca.common.exceptions import APIError\n+from colorama import Fore, Style\n+import logging\n+\n+from .broker_base import BrokerBase, Position, Order, Account\n+\n+\n+logger = logging.getLogger(__name__)\n+\n+\n+class AlpacaBroker(BrokerBase):\n+    \"\"\"Alpaca broker implementation.\"\"\"\n+    \n+    def __init__(self, paper_trading: bool = None):\n+        \"\"\"Initialize Alpaca broker.\n+        \n+        Args:\n+            paper_trading: Whether to use paper trading account. If None, reads from ALPACA_PAPER env var.\n+        \"\"\"\n+        # Read from environment variable if not explicitly set\n+        if paper_trading is None:\n+            paper_trading = os.getenv(\"ALPACA_PAPER\", \"true\").lower() in (\"true\", \"1\", \"yes\")\n+        \n+        self.paper_trading = paper_trading\n+        self.trading_client = None\n+        self.data_client = None\n+        self._connected = False\n+        \n+        # Check required environment variables\n+        required_vars = [\"ALPACA_API_KEY\", \"ALPACA_SECRET_KEY\"]\n+        missing_vars = [var for var in required_vars if not os.getenv(var)]\n+        \n+        if missing_vars:\n+            raise ValueError(f\"Missing required environment variables: {', '.join(missing_vars)}. Please set these in your .env file\")\n+        \n+        # Get API credentials from environment\n+        self.api_key = os.getenv(\"ALPACA_API_KEY\")\n+        self.secret_key = os.getenv(\"ALPACA_SECRET_KEY\")\n+    \n+    def connect(self) -> bool:\n+        \"\"\"Connect to Alpaca API.\"\"\"\n+        try:\n+            self.trading_client = TradingClient(\n+                api_key=self.api_key,\n+                secret_key=self.secret_key,\n+                paper=self.paper_trading\n+            )\n+            \n+            self.data_client = StockHistoricalDataClient(\n+                api_key=self.api_key,\n+                secret_key=self.secret_key\n+            )\n+            \n+            # Test connection by getting account info\n+            account = self.trading_client.get_account()\n+            self._connected = True\n+            \n+            env_type = \"Paper\" if self.paper_trading else \"Live\"\n+            print(f\"{Fore.GREEN}Connected to Alpaca {env_type} Trading API{Style.RESET_ALL}\")\n+            print(f\"Account Status: {account.status}\")\n+            print(f\"Buying Power: ${float(account.buying_power):,.2f}\")\n+            \n+            return True\n+            \n+        except APIError as e:\n+            logger.error(f\"Failed to connect to Alpaca: {e}\")\n+            print(f\"{Fore.RED}Failed to connect to Alpaca: {e}{Style.RESET_ALL}\")\n+            return False\n+        except Exception as e:\n+            logger.error(f\"Unexpected error connecting to Alpaca: {e}\")\n+            print(f\"{Fore.RED}Unexpected error: {e}{Style.RESET_ALL}\")\n+            return False\n+    \n+    def disconnect(self) -> None:\n+        \"\"\"Disconnect from Alpaca API.\"\"\"\n+        self.trading_client = None\n+        self.data_client = None\n+        self._connected = False\n+        print(f\"{Fore.YELLOW}Disconnected from Alpaca API{Style.RESET_ALL}\")\n+    \n+    def get_account(self) -> Account:\n+        \"\"\"Get current account information.\"\"\"\n+        if not self._connected:\n+            raise RuntimeError(\"Not connected to broker\")\n+        \n+        account = self.trading_client.get_account()\n+        \n+        return Account(\n+            cash=float(account.cash),\n+            buying_power=float(account.buying_power),\n+            portfolio_value=float(account.portfolio_value),\n+            equity=float(account.equity),\n+            initial_margin=float(account.initial_margin),\n+            maintenance_margin=float(account.maintenance_margin),\n+            sma=float(account.sma),\n+            day_trade_count=int(account.daytrade_count),\n+            regt_buying_power=float(account.regt_buying_power),\n+            daytrading_buying_power=float(account.daytrading_buying_power),\n+            multiplier=float(account.multiplier)\n+        )\n+    \n+    def get_positions(self) -> list[Position]:\n+        \"\"\"Get current positions.\"\"\"\n+        if not self._connected:\n+            raise RuntimeError(\"Not connected to broker\")\n+        \n+        positions = []\n+        alpaca_positions = self.trading_client.get_all_positions()\n+        \n+        for pos in alpaca_positions:\n+            side = \"long\" if float(pos.qty) > 0 else \"short\"\n+            \n+            # Handle optional unrealized_pnl - calculate if missing\n+            unrealized_pnl = 0.0\n+            if hasattr(pos, 'unrealized_pnl') and pos.unrealized_pnl is not None:\n+                unrealized_pnl = float(pos.unrealized_pnl)\n+            else:\n+                # Calculate unrealized P&L if not provided\n+                # unrealized_pnl = market_value - cost_basis\n+                unrealized_pnl = float(pos.market_value) - float(pos.cost_basis)\n+            \n+            positions.append(Position(\n+                symbol=pos.symbol,\n+                quantity=abs(float(pos.qty)),\n+                side=side,\n+                avg_entry_price=float(pos.avg_entry_price),\n+                market_value=float(pos.market_value),\n+                unrealized_pnl=unrealized_pnl,\n+                cost_basis=float(pos.cost_basis)\n+            ))\n+        \n+        return positions\n+    \n+    def get_position(self, symbol: str) -> Position | None:\n+        \"\"\"Get position for a specific symbol.\"\"\"\n+        if not self._connected:\n+            raise RuntimeError(\"Not connected to broker\")\n+        \n+        try:\n+            pos = self.trading_client.get_open_position(symbol)\n+            side = \"long\" if float(pos.qty) > 0 else \"short\"\n+            \n+            # Handle optional unrealized_pnl - calculate if missing\n+            unrealized_pnl = 0.0\n+            if hasattr(pos, 'unrealized_pnl') and pos.unrealized_pnl is not None:\n+                unrealized_pnl = float(pos.unrealized_pnl)\n+            else:\n+                # Calculate unrealized P&L if not provided\n+                unrealized_pnl = float(pos.market_value) - float(pos.cost_basis)\n+            \n+            return Position(\n+                symbol=pos.symbol,\n+                quantity=abs(float(pos.qty)),\n+                side=side,\n+                avg_entry_price=float(pos.avg_entry_price),\n+                market_value=float(pos.market_value),\n+                unrealized_pnl=unrealized_pnl,\n+                cost_basis=float(pos.cost_basis)\n+            )\n+            \n+        except APIError:\n+            # Position doesn't exist\n+            return None\n+    \n+    def place_order(self, symbol: str, quantity: float, side: str, \n+                   order_type: str = \"market\", limit_price: float | None = None,\n+                   stop_price: float | None = None) -> Order:\n+        \"\"\"Place a trading order.\"\"\"\n+        if not self._connected:\n+            raise RuntimeError(\"Not connected to broker\")\n+        \n+        # Convert side to Alpaca format\n+        if side == \"buy\":\n+            order_side = OrderSide.BUY\n+        elif side == \"sell\":\n+            order_side = OrderSide.SELL\n+        elif side == \"sell_short\":\n+            order_side = OrderSide.SELL\n+            # Note: Alpaca handles short selling automatically when selling more than owned\n+        else:\n+            raise ValueError(f\"Invalid order side: {side}\")\n+        \n+        # Create order request based on type\n+        try:\n+            if order_type == \"market\":\n+                order_request = MarketOrderRequest(\n+                    symbol=symbol,\n+                    qty=quantity,\n+                    side=order_side,\n+                    time_in_force=TimeInForce.DAY\n+                )\n+            elif order_type == \"limit\":\n+                if limit_price is None:\n+                    raise ValueError(\"Limit price required for limit orders\")\n+                order_request = LimitOrderRequest(\n+                    symbol=symbol,\n+                    qty=quantity,\n+                    side=order_side,\n+                    time_in_force=TimeInForce.DAY,\n+                    limit_price=limit_price\n+                )\n+            elif order_type == \"stop\":\n+                if stop_price is None:\n+                    raise ValueError(\"Stop price required for stop orders\")\n+                order_request = StopOrderRequest(\n+                    symbol=symbol,\n+                    qty=quantity,\n+                    side=order_side,\n+                    time_in_force=TimeInForce.DAY,\n+                    stop_price=stop_price\n+                )\n+            else:\n+                raise ValueError(f\"Invalid order type: {order_type}\")\n+            \n+            alpaca_order = self.trading_client.submit_order(order_request)\n+            \n+            return Order(\n+                id=str(alpaca_order.id),\n+                symbol=alpaca_order.symbol,\n+                quantity=float(alpaca_order.qty),\n+                side=side,\n+                order_type=order_type,\n+                status=alpaca_order.status.value,\n+                filled_price=float(alpaca_order.filled_avg_price) if alpaca_order.filled_avg_price else None,\n+                filled_quantity=float(alpaca_order.filled_qty) if alpaca_order.filled_qty else None,\n+                submitted_at=alpaca_order.submitted_at,\n+                filled_at=alpaca_order.filled_at\n+            )\n+            \n+        except APIError as e:\n+            logger.error(f\"Failed to place order: {e}\")\n+            raise RuntimeError(f\"Failed to place order: {e}\")\n+    \n+    def cancel_order(self, order_id: str) -> bool:\n+        \"\"\"Cancel an order.\"\"\"\n+        if not self._connected:\n+            raise RuntimeError(\"Not connected to broker\")\n+        \n+        try:\n+            self.trading_client.cancel_order_by_id(order_id)\n+            return True\n+        except APIError as e:\n+            logger.error(f\"Failed to cancel order {order_id}: {e}\")\n+            return False\n+    \n+    def get_orders(self, status: str | None = None) -> list[Order]:\n+        \"\"\"Get orders.\"\"\"\n+        if not self._connected:\n+            raise RuntimeError(\"Not connected to broker\")\n+        \n+        orders = []\n+        alpaca_orders = self.trading_client.get_orders()\n+        \n+        for order in alpaca_orders:\n+            if status is None or order.status.value == status:\n+                # Convert Alpaca side back to our format\n+                side = \"buy\" if order.side == OrderSide.BUY else \"sell\"\n+                \n+                orders.append(Order(\n+                    id=str(order.id),\n+                    symbol=order.symbol,\n+                    quantity=float(order.qty),\n+                    side=side,\n+                    order_type=order.order_type.value,\n+                    status=order.status.value,\n+                    filled_price=float(order.filled_avg_price) if order.filled_avg_price else None,\n+                    filled_quantity=float(order.filled_qty) if order.filled_qty else None,\n+                    submitted_at=order.submitted_at,\n+                    filled_at=order.filled_at\n+                ))\n+        \n+        return orders\n+    \n+    def get_order(self, order_id: str) -> Order | None:\n+        \"\"\"Get specific order.\"\"\"\n+        if not self._connected:\n+            raise RuntimeError(\"Not connected to broker\")\n+        \n+        try:\n+            order = self.trading_client.get_order_by_id(order_id)\n+            side = \"buy\" if order.side == OrderSide.BUY else \"sell\"\n+            \n+            return Order(\n+                id=str(order.id),\n+                symbol=order.symbol,\n+                quantity=float(order.qty),\n+                side=side,\n+                order_type=order.order_type.value,\n+                status=order.status.value,\n+                filled_price=float(order.filled_avg_price) if order.filled_avg_price else None,\n+                filled_quantity=float(order.filled_qty) if order.filled_qty else None,\n+                submitted_at=order.submitted_at,\n+                filled_at=order.filled_at\n+            )\n+            \n+        except APIError:\n+            return None\n+    \n+    def get_current_price(self, symbol: str) -> float:\n+        \"\"\"Get current price for a symbol.\"\"\"\n+        if not self._connected:\n+            raise RuntimeError(\"Not connected to broker\")\n+        \n+        try:\n+            request = StockLatestQuoteRequest(symbol_or_symbols=[symbol])\n+            quote = self.data_client.get_stock_latest_quote(request)\n+            \n+            if symbol in quote:\n+                return float(quote[symbol].bid_price)\n+            else:\n+                raise ValueError(f\"No quote available for {symbol}\")\n+                \n+        except APIError as e:\n+            logger.error(f\"Failed to get price for {symbol}: {e}\")\n+            raise RuntimeError(f\"Failed to get price for {symbol}: {e}\")\n+    \n+    def is_market_open(self) -> bool:\n+        \"\"\"Check if market is currently open.\"\"\"\n+        if not self._connected:\n+            raise RuntimeError(\"Not connected to broker\")\n+        \n+        try:\n+            clock = self.trading_client.get_clock()\n+            return clock.is_open\n+        except APIError as e:\n+            logger.error(f\"Failed to get market status: {e}\")\n+            return False\n+    \n+    def is_paper_trading(self) -> bool:\n+        \"\"\"Check if this is a paper trading account.\"\"\"\n+        return self.paper_trading\n+    \n+    def get_margin_requirement(self, symbol: str | None = None) -> float:\n+        \"\"\"Get margin requirement ratio for positions.\n+        \n+        Args:\n+            symbol: Stock symbol to get specific margin requirement for. \n+                   If None, returns account default margin requirement.\n+        \n+        Returns:\n+            float: Margin requirement ratio (e.g., 0.5 for 50% margin requirement).\n+        \"\"\"\n+        if not self._connected:\n+            raise RuntimeError(\"Not connected to broker\")\n+        \n+        try:\n+            # If a specific symbol is requested, get its asset-specific margin requirement\n+            if symbol:\n+                try:\n+                    asset = self.trading_client.get_asset(symbol)\n+                    if asset and hasattr(asset, 'maintenance_margin_requirement') and asset.maintenance_margin_requirement is not None:\n+                        # Alpaca returns margin requirement as percentage points (30.0 = 30%)\n+                        margin_req = asset.maintenance_margin_requirement\n+                        margin_float = float(margin_req)\n+                        \n+                        # Convert percentage points to ratio (30.0 -> 0.30)\n+                        if margin_float > 0:\n+                            return margin_float / 100.0\n+                        else:\n+                            # Invalid margin requirement, fall through to account default\n+                            print(f\"WARNING: Invalid margin requirement {margin_float} for {symbol}, using account default\")\n+                except APIError:\n+                    # Fall through to account-level default if asset not found\n+                    pass\n+                except Exception as e:\n+                    print(f\"DEBUG: Error processing margin requirement for {symbol}: {e}\")\n+                    # Fall through to account default\n+            \n+            # Fallback to account-level margin requirement\n+            account = self.trading_client.get_account()\n+            multiplier = float(account.multiplier) if account.multiplier else 1.0\n+            \n+            if multiplier > 1:\n+                # Margin account - typical requirement is 50% for most stocks\n+                return 0.5  # 50% margin requirement for margin accounts\n+            else:\n+                # Cash account - cannot use margin for overnight positions\n+                return 1.0  # 100% cash requirement for cash accounts (no margin)\n+                \n+        except APIError as e:\n+            logger.error(f\"Failed to get margin requirement: {e}\")\n+            return 0.5  # Default to 50% if we can't determine\n\\ No newline at end of file", "blob_url": "https://github.com/virattt/ai-hedge-fund/blob/626e4d48a5c47b47f10d0a878b82471fc14bddf5/src%2Ftrading%2Falpaca_broker.py", "raw_url": "https://github.com/virattt/ai-hedge-fund/raw/626e4d48a5c47b47f10d0a878b82471fc14bddf5/src%2Ftrading%2Falpaca_broker.py", "contents_url": "https://api.github.com/repos/virattt/ai-hedge-fund/contents/src%2Ftrading%2Falpaca_broker.py?ref=626e4d48a5c47b47f10d0a878b82471fc14bddf5"}, {"filename": "src/trading/broker_base.py", "status": "added", "additions": 194, "deletions": 0, "changes": 194, "patch": "@@ -0,0 +1,194 @@\n+\"\"\"Base broker interface for trading implementations.\"\"\"\n+\n+from abc import ABC, abstractmethod\n+from dataclasses import dataclass\n+from datetime import datetime\n+\n+\n+@dataclass\n+class Position:\n+    \"\"\"Represents a trading position.\"\"\"\n+    symbol: str\n+    quantity: float\n+    side: str  # \"long\" or \"short\"\n+    avg_entry_price: float\n+    market_value: float\n+    unrealized_pnl: float\n+    cost_basis: float\n+\n+\n+@dataclass\n+class Order:\n+    \"\"\"Represents a trading order.\"\"\"\n+    id: str\n+    symbol: str\n+    quantity: float\n+    side: str  # \"buy\", \"sell\", \"sell_short\"\n+    order_type: str  # \"market\", \"limit\", \"stop\"\n+    status: str  # \"pending\", \"filled\", \"canceled\", \"rejected\"\n+    filled_price: float | None = None\n+    filled_quantity: float | None = None\n+    submitted_at: datetime | None = None\n+    filled_at: datetime | None = None\n+\n+\n+@dataclass\n+class Account:\n+    \"\"\"Represents account information.\"\"\"\n+    cash: float\n+    buying_power: float\n+    portfolio_value: float\n+    equity: float\n+    initial_margin: float\n+    maintenance_margin: float\n+    sma: float  # Special Memorandum Account\n+    day_trade_count: int\n+    regt_buying_power: float\n+    daytrading_buying_power: float\n+    multiplier: float\n+\n+\n+class BrokerBase(ABC):\n+    \"\"\"Abstract base class for broker implementations.\"\"\"\n+    \n+    @abstractmethod\n+    def connect(self) -> bool:\n+        \"\"\"Connect to the broker API.\n+        \n+        Returns:\n+            bool: True if connection successful, False otherwise.\n+        \"\"\"\n+        pass\n+    \n+    @abstractmethod\n+    def disconnect(self) -> None:\n+        \"\"\"Disconnect from the broker API.\"\"\"\n+        pass\n+    \n+    @abstractmethod\n+    def get_account(self) -> Account:\n+        \"\"\"Get current account information.\n+        \n+        Returns:\n+            Account: Current account details.\n+        \"\"\"\n+        pass\n+    \n+    @abstractmethod\n+    def get_positions(self) -> list[Position]:\n+        \"\"\"Get current positions.\n+        \n+        Returns:\n+            list[Position]: List of current positions.\n+        \"\"\"\n+        pass\n+    \n+    @abstractmethod\n+    def get_position(self, symbol: str) -> Position | None:\n+        \"\"\"Get position for a specific symbol.\n+        \n+        Args:\n+            symbol: Stock symbol.\n+            \n+        Returns:\n+            Position | None: Position if exists, None otherwise.\n+        \"\"\"\n+        pass\n+    \n+    @abstractmethod\n+    def place_order(self, symbol: str, quantity: float, side: str, \n+                   order_type: str = \"market\", limit_price: float | None = None,\n+                   stop_price: float | None = None) -> Order:\n+        \"\"\"Place a trading order.\n+        \n+        Args:\n+            symbol: Stock symbol.\n+            quantity: Number of shares.\n+            side: \"buy\", \"sell\", or \"sell_short\".\n+            order_type: \"market\", \"limit\", or \"stop\".\n+            limit_price: Limit price for limit orders.\n+            stop_price: Stop price for stop orders.\n+            \n+        Returns:\n+            Order: The placed order.\n+        \"\"\"\n+        pass\n+    \n+    @abstractmethod\n+    def cancel_order(self, order_id: str) -> bool:\n+        \"\"\"Cancel an order.\n+        \n+        Args:\n+            order_id: Order ID to cancel.\n+            \n+        Returns:\n+            bool: True if cancellation successful, False otherwise.\n+        \"\"\"\n+        pass\n+    \n+    @abstractmethod\n+    def get_orders(self, status: str | None = None) -> list[Order]:\n+        \"\"\"Get orders.\n+        \n+        Args:\n+            status: Filter by order status. None for all orders.\n+            \n+        Returns:\n+            list[Order]: List of orders.\n+        \"\"\"\n+        pass\n+    \n+    @abstractmethod\n+    def get_order(self, order_id: str) -> Order | None:\n+        \"\"\"Get specific order.\n+        \n+        Args:\n+            order_id: Order ID.\n+            \n+        Returns:\n+            Order | None: Order if exists, None otherwise.\n+        \"\"\"\n+        pass\n+    \n+    @abstractmethod\n+    def get_current_price(self, symbol: str) -> float:\n+        \"\"\"Get current price for a symbol.\n+        \n+        Args:\n+            symbol: Stock symbol.\n+            \n+        Returns:\n+            float: Current price.\n+        \"\"\"\n+        pass\n+    \n+    @abstractmethod\n+    def is_market_open(self) -> bool:\n+        \"\"\"Check if market is currently open.\n+        \n+        Returns:\n+            bool: True if market is open, False otherwise.\n+        \"\"\"\n+        pass\n+    \n+    @abstractmethod\n+    def is_paper_trading(self) -> bool:\n+        \"\"\"Check if this is a paper trading account.\n+        \n+        Returns:\n+            bool: True if paper trading, False if live trading.\n+        \"\"\"\n+        pass\n+    \n+    @abstractmethod\n+    def get_margin_requirement(self, symbol: str | None = None) -> float:\n+        \"\"\"Get margin requirement ratio for positions.\n+        \n+        Args:\n+            symbol: Stock symbol to get specific margin requirement for. \n+                   If None, returns account default margin requirement.\n+        \n+        Returns:\n+            float: Margin requirement ratio (e.g., 0.5 for 50% margin requirement).\n+        \"\"\"\n+        pass\n\\ No newline at end of file", "blob_url": "https://github.com/virattt/ai-hedge-fund/blob/626e4d48a5c47b47f10d0a878b82471fc14bddf5/src%2Ftrading%2Fbroker_base.py", "raw_url": "https://github.com/virattt/ai-hedge-fund/raw/626e4d48a5c47b47f10d0a878b82471fc14bddf5/src%2Ftrading%2Fbroker_base.py", "contents_url": "https://api.github.com/repos/virattt/ai-hedge-fund/contents/src%2Ftrading%2Fbroker_base.py?ref=626e4d48a5c47b47f10d0a878b82471fc14bddf5"}, {"filename": "src/trading/trader.py", "status": "added", "additions": 680, "deletions": 0, "changes": 680, "patch": "@@ -0,0 +1,680 @@\n+\"\"\"Live trading implementation using the hedge fund AI agents.\"\"\"\n+\n+import sys\n+import time\n+import logging\n+from datetime import datetime, timedelta\n+from dateutil.relativedelta import relativedelta\n+from colorama import Fore, Style\n+\n+from .broker_base import BrokerBase, Position, Order\n+from .alpaca_broker import AlpacaBroker\n+from src.main import run_hedge_fund\n+from src.utils.progress import progress\n+\n+\n+logger = logging.getLogger(__name__)\n+\n+\n+class Trader:\n+    \"\"\"Live trading implementation using AI hedge fund decisions.\"\"\"\n+    \n+    def __init__(\n+        self,\n+        broker: BrokerBase,\n+        tickers: list[str],\n+        selected_analysts: list[str] = None,\n+        model_name: str = \"gpt-4o\",\n+        model_provider: str = \"OpenAI\",\n+        available_capital: float = None,  # Override available capital\n+        margin_requirement: float = None,  # Margin requirement for short positions\n+        dry_run: bool = False,\n+        ignore_market_hours: bool = False\n+    ):\n+        \"\"\"Initialize the trader.\n+        \n+        Args:\n+            broker: Broker implementation to use.\n+            tickers: List of tickers to trade.\n+            selected_analysts: List of analysts to use.\n+            model_name: LLM model name.\n+            model_provider: LLM provider.\n+            available_capital: Override available capital (uses broker cash if None).\n+            margin_requirement: Margin requirement ratio for short positions.\n+            dry_run: If True, log trades but don't execute them.\n+            ignore_market_hours: If True, run even when market is closed.\n+        \"\"\"\n+        self.broker = broker\n+        self.tickers = tickers\n+        self.selected_analysts = selected_analysts or []\n+        self.model_name = model_name\n+        self.model_provider = model_provider\n+        self.available_capital = available_capital\n+        self.margin_requirement = margin_requirement\n+        self.dry_run = dry_run\n+        self.ignore_market_hours = ignore_market_hours\n+        \n+        # Track our virtual portfolio for decision making\n+        self.virtual_portfolio = None\n+        self.last_sync_time = None\n+    \n+    def _map_order_to_action(self, order: Order, symbol: str) -> str:\n+        \"\"\"Map a broker order to our action type.\"\"\"\n+        if order.side == \"buy\":\n+            # Could be buy or cover - check if we have short positions\n+            current_pos = self.broker.get_position(symbol)\n+            if current_pos and current_pos.side == \"short\":\n+                return \"cover\"\n+            else:\n+                return \"buy\"\n+        elif order.side == \"sell\":\n+            # Could be sell or short - check if we have long positions\n+            current_pos = self.broker.get_position(symbol)\n+            if current_pos and current_pos.side == \"long\":\n+                return \"sell\"\n+            else:\n+                return \"short\"\n+        else:\n+            return \"unknown\"\n+    \n+    def _close_position_and_wait(self, symbol: str, position_type: str, position_size: float) -> Order:\n+        \"\"\"Close existing position and wait for fill.\n+        \n+        Args:\n+            symbol: Stock symbol\n+            position_type: 'long' or 'short'\n+            position_size: Number of shares to close\n+            \n+        Returns:\n+            Order: The close order\n+        \"\"\"\n+        if position_type == \"long\":\n+            action_name = \"close long\"\n+            order_side = \"sell\"\n+        else:  # short\n+            action_name = \"close short\"\n+            order_side = \"buy\"\n+        \n+        print(f\"{Fore.CYAN}Step 1: {action_name.title()} - {order_side} {position_size} shares{Style.RESET_ALL}\")\n+        close_order = self.broker.place_order(symbol, position_size, order_side)\n+        print(f\"{Fore.GREEN}Close order placed: {close_order.id}{Style.RESET_ALL}\")\n+        \n+        # Wait for close order to fill\n+        self._wait_for_order_fill(close_order.id, action_name)\n+        return close_order\n+    \n+    def _wait_for_order_fill(self, order_id: str, action_name: str) -> None:\n+        \"\"\"Wait for order to fill with timeout.\n+        \n+        Args:\n+            order_id: Order ID to monitor\n+            action_name: Human-readable action name for logging\n+        \"\"\"\n+        print(f\"{Fore.CYAN}Waiting for {action_name} order to fill...{Style.RESET_ALL}\")\n+        max_wait_time = 30  # seconds\n+        wait_time = 0\n+        while wait_time < max_wait_time:\n+            updated_order = self.broker.get_order(order_id)\n+            if updated_order and updated_order.status == \"filled\":\n+                print(f\"{Fore.GREEN}{action_name.title()} order filled successfully{Style.RESET_ALL}\")\n+                return\n+            time.sleep(2)\n+            wait_time += 2\n+        \n+        print(f\"{Fore.YELLOW}{action_name.title()} order still pending after {max_wait_time}s, proceeding anyway{Style.RESET_ALL}\")\n+    \n+    def _execute_position_transition(self, symbol: str, action: str, quantity: float, \n+                                   current_long: float, current_short: float) -> Order:\n+        \"\"\"Execute position transition with proper sequencing.\n+        \n+        Args:\n+            symbol: Stock symbol\n+            action: Target action (buy/sell/short/cover)\n+            quantity: Total quantity for the action\n+            current_long: Current long position size\n+            current_short: Current short position size\n+            \n+        Returns:\n+            Order: The final order executed\n+        \"\"\"\n+        if action == \"buy\" and current_short > 0:\n+            # Short -> Long transition\n+            print(f\"{Fore.CYAN}Detected short position of {current_short} shares, splitting buy order{Style.RESET_ALL}\")\n+            \n+            # Close short position\n+            cover_quantity = min(quantity, current_short)\n+            close_order = self._close_position_and_wait(symbol, \"short\", cover_quantity)\n+            \n+            # Buy remaining for long position\n+            remaining_quantity = quantity - cover_quantity\n+            if remaining_quantity > 0:\n+                print(f\"{Fore.CYAN}Step 2: Buying {remaining_quantity} additional shares for long position{Style.RESET_ALL}\")\n+                return self.broker.place_order(symbol, remaining_quantity, \"buy\")\n+            else:\n+                print(f\"{Fore.CYAN}Short position fully covered, no additional long position needed{Style.RESET_ALL}\")\n+                return close_order\n+                \n+        elif action == \"sell\" and current_long > 0 and quantity > current_long:\n+            # Long -> Short transition (selling more than owned)\n+            print(f\"{Fore.CYAN}Detected long position of {current_long} shares, splitting sell order{Style.RESET_ALL}\")\n+            \n+            # Close long position\n+            close_order = self._close_position_and_wait(symbol, \"long\", current_long)\n+            \n+            # Short sell remaining\n+            remaining_quantity = quantity - current_long\n+            print(f\"{Fore.CYAN}Step 2: Short selling {remaining_quantity} additional shares{Style.RESET_ALL}\")\n+            return self.broker.place_order(symbol, remaining_quantity, \"sell_short\")\n+            \n+        elif action == \"short\" and current_long > 0:\n+            # Long -> Short transition (close long first)\n+            print(f\"{Fore.CYAN}Detected long position of {current_long} shares, closing before short sale{Style.RESET_ALL}\")\n+            \n+            # Close long position\n+            self._close_position_and_wait(symbol, \"long\", current_long)\n+            \n+            # Short sell the requested quantity\n+            print(f\"{Fore.CYAN}Step 2: Short selling {quantity} shares{Style.RESET_ALL}\")\n+            return self.broker.place_order(symbol, quantity, \"sell_short\")\n+            \n+        elif action == \"cover\" and current_short > 0 and quantity > current_short:\n+            # Short -> Long transition (covering more than short)\n+            print(f\"{Fore.CYAN}Detected short position of {current_short} shares, splitting cover order{Style.RESET_ALL}\")\n+            \n+            # Cover short position\n+            self._close_position_and_wait(symbol, \"short\", current_short)\n+            \n+            # Buy remaining for long position\n+            remaining_quantity = quantity - current_short\n+            print(f\"{Fore.CYAN}Step 2: Buying {remaining_quantity} additional shares for long position{Style.RESET_ALL}\")\n+            return self.broker.place_order(symbol, remaining_quantity, \"buy\")\n+            \n+        else:\n+            # No position transition needed - execute normal order\n+            return self._execute_simple_order(symbol, action, quantity, current_long, current_short)\n+    \n+    def _execute_simple_order(self, symbol: str, action: str, quantity: float,\n+                            current_long: float, current_short: float) -> Order | None:\n+        \"\"\"Execute simple order without position transitions.\n+        \n+        Args:\n+            symbol: Stock symbol\n+            action: Trading action\n+            quantity: Number of shares\n+            current_long: Current long position\n+            current_short: Current short position\n+            \n+        Returns:\n+            Order or None if cannot execute\n+        \"\"\"\n+        if action == \"buy\":\n+            return self.broker.place_order(symbol, quantity, \"buy\")\n+        elif action == \"sell\":\n+            if current_long > 0:\n+                return self.broker.place_order(symbol, quantity, \"sell\")\n+            else:\n+                print(f\"{Fore.YELLOW}Cannot sell {symbol}: no long position{Style.RESET_ALL}\")\n+                return None\n+        elif action == \"short\":\n+            return self.broker.place_order(symbol, quantity, \"sell_short\")\n+        elif action == \"cover\":\n+            if current_short > 0:\n+                return self.broker.place_order(symbol, quantity, \"buy\")\n+            else:\n+                print(f\"{Fore.YELLOW}Cannot cover {symbol}: no short position{Style.RESET_ALL}\")\n+                return None\n+        else:\n+            print(f\"{Fore.RED}Unknown action: {action}{Style.RESET_ALL}\")\n+            return None\n+\n+    def _handle_hold_decision(self, symbol: str) -> Order | None:\n+        \"\"\"Handle AI decision to hold - cancel any pending orders.\"\"\"\n+        if self.dry_run:\n+            print(f\"{Fore.CYAN}DRY RUN: Would hold {symbol} (cancel any pending orders){Style.RESET_ALL}\")\n+            return None\n+        \n+        # Get pending orders and cancel them\n+        pending_orders = [order for order in self.broker.get_orders() \n+                         if order.symbol == symbol and order.status in [\"pending_new\", \"new\", \"accepted\"]]\n+        \n+        if pending_orders:\n+            print(f\"{Fore.CYAN}AI says hold {symbol}, canceling {len(pending_orders)} pending orders{Style.RESET_ALL}\")\n+            for order in pending_orders:\n+                action = self._map_order_to_action(order, symbol)\n+                print(f\"{Fore.YELLOW}Canceling pending {action} order for {order.quantity} shares{Style.RESET_ALL}\")\n+                if self.broker.cancel_order(order.id):\n+                    print(f\"{Fore.GREEN}Canceled order {order.id}{Style.RESET_ALL}\")\n+                else:\n+                    print(f\"{Fore.RED}Failed to cancel order {order.id}{Style.RESET_ALL}\")\n+        else:\n+            print(f\"{Fore.CYAN}Holding {symbol} (no pending orders to cancel){Style.RESET_ALL}\")\n+        \n+        return None\n+        \n+    def connect(self) -> bool:\n+        \"\"\"Connect to the broker.\"\"\"\n+        return self.broker.connect()\n+    \n+    def disconnect(self) -> None:\n+        \"\"\"Disconnect from the broker.\"\"\"\n+        self.broker.disconnect()\n+    \n+    def sync_portfolio(self) -> None:\n+        \"\"\"Sync virtual portfolio with actual broker positions.\"\"\"\n+        # Temporarily stop progress display to show debug output\n+        was_started = progress.started\n+        if was_started:\n+            progress.stop()\n+        \n+        try:\n+            # Ensure broker connection is active with retry\n+            max_retries = 3\n+            for attempt in range(max_retries):\n+                try:\n+                    if not self.broker._connected:\n+                        print(f\"{Fore.YELLOW}Reconnecting to broker (attempt {attempt + 1})...{Style.RESET_ALL}\")\n+                        self.broker.connect()\n+                    \n+                    account = self.broker.get_account()\n+                    positions = self.broker.get_positions()\n+                    pending_orders = self.broker.get_orders() if not self.dry_run else []\n+                    break  # Success, exit retry loop\n+                    \n+                except Exception as e:\n+                    if attempt < max_retries - 1:\n+                        print(f\"{Fore.YELLOW}Connection failed, retrying in 5 seconds... ({e}){Style.RESET_ALL}\")\n+                        time.sleep(5)\n+                        self.broker._connected = False  # Force reconnection\n+                    else:\n+                        raise  # Re-raise if all retries failed\n+            \n+            # Create virtual portfolio structure similar to backtester\n+            # Use limited capital if specified, but keep the account's margin capability\n+            actual_cash = account.cash\n+            limited_cash = self.available_capital if self.available_capital is not None else actual_cash\n+            \n+            # Calculate the fraction of available capital we're using\n+            capital_fraction = limited_cash / actual_cash if actual_cash > 0 else 1.0\n+            \n+            self.virtual_portfolio = {\n+                \"cash\": limited_cash,\n+                \"margin_requirement\": self.margin_requirement if self.margin_requirement is not None else self.broker.get_margin_requirement(),\n+                \"margin_used\": account.initial_margin * capital_fraction,  # Scale margin usage proportionally\n+                \"positions\": {},\n+                \"realized_gains\": {},\n+                \"pending_orders\": {}  # Track pending orders\n+            }\n+            \n+            # Initialize all tickers\n+            for ticker in self.tickers:\n+                self.virtual_portfolio[\"positions\"][ticker] = {\n+                    \"long\": 0,\n+                    \"short\": 0,\n+                    \"long_cost_basis\": 0.0,\n+                    \"short_cost_basis\": 0.0,\n+                    \"short_margin_used\": 0.0,\n+                }\n+                self.virtual_portfolio[\"realized_gains\"][ticker] = {\n+                    \"long\": 0.0,\n+                    \"short\": 0.0,\n+                }\n+                self.virtual_portfolio[\"pending_orders\"][ticker] = {\n+                    \"buy\": 0,\n+                    \"sell\": 0,\n+                    \"short\": 0,\n+                    \"cover\": 0,\n+                }\n+            \n+            # Update with actual positions\n+            print(f\"{Fore.YELLOW}DEBUG: Syncing {len(positions)} positions from broker{Style.RESET_ALL}\")\n+            for position in positions:\n+                print(f\"DEBUG: Position {position.symbol}: {position.side} {position.quantity} shares\")\n+                if position.symbol in self.virtual_portfolio[\"positions\"]:\n+                    if position.side == \"long\":\n+                        self.virtual_portfolio[\"positions\"][position.symbol][\"long\"] = position.quantity\n+                        self.virtual_portfolio[\"positions\"][position.symbol][\"long_cost_basis\"] = position.avg_entry_price\n+                        print(f\"DEBUG: Updated {position.symbol} long: {position.quantity} shares\")\n+                    else:  # short\n+                        self.virtual_portfolio[\"positions\"][position.symbol][\"short\"] = position.quantity\n+                        self.virtual_portfolio[\"positions\"][position.symbol][\"short_cost_basis\"] = position.avg_entry_price\n+                        print(f\"DEBUG: Updated {position.symbol} short: {position.quantity} shares\")\n+                else:\n+                    print(f\"DEBUG: Skipping {position.symbol} - not in tickers list\")\n+            \n+            # Debug: Show what the virtual portfolio looks like after sync\n+            print(f\"{Fore.YELLOW}DEBUG: Virtual portfolio positions after sync:{Style.RESET_ALL}\")\n+            for ticker in self.tickers:\n+                pos = self.virtual_portfolio[\"positions\"][ticker]\n+                print(f\"  {ticker}: long={pos['long']}, short={pos['short']}\")\n+            \n+            # Track pending orders\n+            for order in pending_orders:\n+                if order.symbol in self.virtual_portfolio[\"pending_orders\"] and order.status in [\"pending_new\", \"new\", \"accepted\"]:\n+                    # Map order sides to our action types\n+                    if order.side == \"buy\":\n+                        action = \"buy\"\n+                    elif order.side == \"sell\":\n+                        # Need to determine if this is a sell or cover based on current position\n+                        current_pos = self.virtual_portfolio[\"positions\"].get(order.symbol, {})\n+                        if current_pos.get(\"short\", 0) > 0:\n+                            action = \"cover\"\n+                        else:\n+                            action = \"sell\"\n+                    else:\n+                        action = \"short\"  # sell_short\n+                    \n+                    self.virtual_portfolio[\"pending_orders\"][order.symbol][action] += order.quantity\n+                    print(f\"{Fore.CYAN}Found pending {action} order for {order.symbol}: {order.quantity} shares{Style.RESET_ALL}\")\n+            \n+            self.last_sync_time = datetime.now()\n+            print(f\"{Fore.GREEN}Portfolio synced with broker{Style.RESET_ALL}\")\n+            \n+        except Exception as e:\n+            logger.error(f\"Failed to sync portfolio: {e}\")\n+            print(f\"{Fore.RED}Failed to sync portfolio: {e}{Style.RESET_ALL}\")\n+            raise\n+        finally:\n+            # Restart progress display if it was running\n+            if was_started:\n+                progress.start()\n+    \n+    def get_hedge_fund_decisions(self) -> dict:\n+        \"\"\"Get trading decisions from the AI hedge fund.\"\"\"\n+        if not self.virtual_portfolio:\n+            raise RuntimeError(\"Portfolio not synced. Call sync_portfolio() first.\")\n+        \n+        # Use 30-day lookback period\n+        end_date = datetime.now().strftime(\"%Y-%m-%d\")\n+        start_date = (datetime.now() - timedelta(days=30)).strftime(\"%Y-%m-%d\")\n+        \n+        print(f\"{Fore.CYAN}Getting AI hedge fund decisions...{Style.RESET_ALL}\")\n+        \n+        try:\n+            result = run_hedge_fund(\n+                tickers=self.tickers,\n+                start_date=start_date,\n+                end_date=end_date,\n+                portfolio=self.virtual_portfolio,\n+                show_reasoning=False,\n+                selected_analysts=self.selected_analysts,\n+                model_name=self.model_name,\n+                model_provider=self.model_provider,\n+            )\n+            \n+            return result\n+            \n+        except Exception as e:\n+            logger.error(f\"Failed to get hedge fund decisions: {e}\")\n+            print(f\"{Fore.RED}Failed to get hedge fund decisions: {e}{Style.RESET_ALL}\")\n+            raise\n+    \n+    def calculate_position_size(self, symbol: str, decision: dict) -> float:\n+        \"\"\"Get position size from AI decision (Risk Management Agent handles sizing).\"\"\"\n+        if not self.virtual_portfolio:\n+            raise RuntimeError(\"Portfolio not synced\")\n+        \n+        # Trust the Risk Management Agent - just return what it calculated\n+        requested_quantity = decision.get(\"quantity\", 0)\n+        return int(requested_quantity) if requested_quantity > 0 else 0\n+    \n+    def execute_trade(self, symbol: str, decision: dict) -> Order | None:\n+        \"\"\"Execute a single trade based on AI decision.\"\"\"\n+        action = decision.get(\"action\", \"hold\")\n+        \n+        if action == \"hold\":\n+            return self._handle_hold_decision(symbol)\n+        \n+        # Calculate position size\n+        quantity = self.calculate_position_size(symbol, decision)\n+        if quantity <= 0:\n+            print(f\"{Fore.YELLOW}Skipping {symbol}: quantity too small{Style.RESET_ALL}\")\n+            return None\n+        \n+        # Check for existing pending orders and handle them\n+        if not self.dry_run:\n+            existing_orders = [order for order in self.broker.get_orders() \n+                             if order.symbol == symbol and order.status in [\"pending_new\", \"new\", \"accepted\"]]\n+            \n+            for existing_order in existing_orders:\n+                # Determine the action of the existing order\n+                existing_action = self._map_order_to_action(existing_order, symbol)\n+                \n+                # If same action and same quantity, skip\n+                if existing_action == action and existing_order.quantity == quantity:\n+                    print(f\"{Fore.CYAN}Skipping {symbol}: Identical {action} order for {quantity} shares already pending{Style.RESET_ALL}\")\n+                    return None\n+                \n+                # Different action or quantity - cancel the existing order\n+                print(f\"{Fore.YELLOW}Canceling existing {existing_action} order for {existing_order.quantity} shares to place new {action} order for {quantity} shares{Style.RESET_ALL}\")\n+                if self.broker.cancel_order(existing_order.id):\n+                    print(f\"{Fore.GREEN}Canceled order {existing_order.id}{Style.RESET_ALL}\")\n+                else:\n+                    print(f\"{Fore.RED}Failed to cancel order {existing_order.id}{Style.RESET_ALL}\")\n+        \n+        # Get current position\n+        current_position = self.broker.get_position(symbol)\n+        current_long = current_position.quantity if current_position and current_position.side == \"long\" else 0\n+        current_short = current_position.quantity if current_position and current_position.side == \"short\" else 0\n+        \n+        print(f\"{Fore.CYAN}Executing {action} {quantity} shares of {symbol}{Style.RESET_ALL}\")\n+        \n+        if self.dry_run:\n+            print(f\"{Fore.YELLOW}DRY RUN: Would {action} {quantity} shares of {symbol} at current price{Style.RESET_ALL}\")\n+            # Create a mock order for dry run\n+            return Order(\n+                id=f\"DRY_RUN_{symbol}_{action}_{int(time.time())}\",\n+                symbol=symbol,\n+                quantity=quantity,\n+                side=action,\n+                order_type=\"market\",\n+                status=\"filled\",\n+                filled_price=0.0,  # Would need current price in real scenario\n+                filled_quantity=quantity\n+            )\n+        \n+        try:\n+            # Double-check dry run protection\n+            if self.dry_run:\n+                print(f\"{Fore.RED}ERROR: Attempted to place real order in dry-run mode! This should not happen.{Style.RESET_ALL}\")\n+                return None\n+            \n+            # Execute order with smart position transition handling\n+            order = self._execute_position_transition(symbol, action, quantity, current_long, current_short)\n+            \n+            if order:\n+                print(f\"{Fore.GREEN}Order placed: {order.id} - {action} {order.quantity} {symbol}{Style.RESET_ALL}\")\n+            return order\n+            \n+        except Exception as e:\n+            logger.error(f\"Failed to execute trade for {symbol}: {e}\")\n+            print(f\"{Fore.RED}Failed to execute trade for {symbol}: {e}{Style.RESET_ALL}\")\n+            return None\n+    \n+    def run_trading_session(self) -> None:\n+        \"\"\"Run a single trading session.\"\"\"\n+        print(f\"{Fore.BLUE}{'='*50}\")\n+        print(f\"Starting trading session at {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\")\n+        print(f\"{'='*50}{Style.RESET_ALL}\")\n+        \n+        if self.dry_run:\n+            print(f\"{Fore.YELLOW}\ud83d\udd04 DRY RUN MODE - No real trades will be executed{Style.RESET_ALL}\")\n+        \n+        try:\n+            # Check if market is open (unless ignoring market hours)\n+            if not self.ignore_market_hours and not self.broker.is_market_open():\n+                print(f\"{Fore.YELLOW}Market is closed. Skipping trading session.{Style.RESET_ALL}\")\n+                print(f\"{Fore.CYAN}Use --ignore-market-hours to run anyway{Style.RESET_ALL}\")\n+                return\n+            elif self.ignore_market_hours and not self.broker.is_market_open():\n+                print(f\"{Fore.YELLOW}Market is closed, but ignoring market hours as requested{Style.RESET_ALL}\")\n+            \n+            # Sync portfolio with broker\n+            print(f\"{Fore.CYAN}DEBUG: About to sync portfolio...{Style.RESET_ALL}\")\n+            self.sync_portfolio()\n+            print(f\"{Fore.CYAN}DEBUG: Portfolio sync completed{Style.RESET_ALL}\")\n+            \n+            # Get AI decisions\n+            result = self.get_hedge_fund_decisions()\n+            decisions = result.get(\"decisions\", {})\n+            analyst_signals = result.get(\"analyst_signals\", {})\n+            \n+            # Display decisions\n+            print(f\"\\n{Fore.WHITE}{Style.BRIGHT}AI HEDGE FUND DECISIONS:{Style.RESET_ALL}\")\n+            for ticker, decision in decisions.items():\n+                action = decision.get(\"action\", \"hold\")\n+                quantity = decision.get(\"quantity\", 0)\n+                reasoning = decision.get(\"reasoning\", \"No reasoning provided\")\n+                \n+                color = {\n+                    \"buy\": Fore.GREEN,\n+                    \"sell\": Fore.RED,\n+                    \"short\": Fore.MAGENTA,\n+                    \"cover\": Fore.CYAN,\n+                    \"hold\": Fore.YELLOW\n+                }.get(action, Fore.WHITE)\n+                \n+                print(f\"{color}{ticker}: {action.upper()} {quantity} shares{Style.RESET_ALL}\")\n+                print(f\"  Reasoning: {reasoning[:100]}...\")\n+            \n+            # Execute trades\n+            executed_orders = []\n+            print(f\"\\n{Fore.WHITE}{Style.BRIGHT}EXECUTING TRADES:{Style.RESET_ALL}\")\n+            \n+            for ticker, decision in decisions.items():\n+                order = self.execute_trade(ticker, decision)\n+                if order:\n+                    executed_orders.append(order)\n+            \n+            # Wait for orders to fill (basic implementation)\n+            if executed_orders and not self.dry_run:\n+                print(f\"\\n{Fore.CYAN}Monitoring order execution...{Style.RESET_ALL}\")\n+                time.sleep(5)  # Wait a bit for market orders to fill\n+                \n+                for order in executed_orders:\n+                    updated_order = self.broker.get_order(order.id)\n+                    if updated_order:\n+                        status_color = Fore.GREEN if updated_order.status == \"filled\" else Fore.YELLOW\n+                        print(f\"{status_color}Order {order.id}: {updated_order.status}{Style.RESET_ALL}\")\n+            \n+            print(f\"\\n{Fore.GREEN}Trading session completed{Style.RESET_ALL}\")\n+            sys.stdout.flush()\n+            \n+        except Exception as e:\n+            logger.error(f\"Trading session failed: {e}\")\n+            print(f\"{Fore.RED}Trading session failed: {e}{Style.RESET_ALL}\")\n+    \n+    def run_continuous_trading(self, interval_minutes: int = 60) -> None:\n+        \"\"\"Run continuous trading with specified interval.\"\"\"\n+        print(f\"{Fore.BLUE}Starting continuous trading (interval: {interval_minutes} minutes){Style.RESET_ALL}\")\n+        \n+        try:\n+            while True:\n+                self.run_trading_session()\n+                \n+                print(f\"\\n{Fore.CYAN}Waiting {interval_minutes} minutes until next session...{Style.RESET_ALL}\")\n+                time.sleep(interval_minutes * 60)\n+                \n+        except KeyboardInterrupt:\n+            print(f\"\\n{Fore.YELLOW}Trading stopped by user{Style.RESET_ALL}\")\n+        except Exception as e:\n+            logger.error(f\"Continuous trading failed: {e}\")\n+            print(f\"{Fore.RED}Continuous trading failed: {e}{Style.RESET_ALL}\")\n+    \n+    def print_portfolio_summary(self) -> None:\n+        \"\"\"Print current portfolio summary.\"\"\"\n+        try:\n+            account = self.broker.get_account()\n+            positions = self.broker.get_positions()\n+            pending_orders = self.broker.get_orders(status=\"pending_new\") if not self.dry_run else []\n+            open_orders = self.broker.get_orders() if not self.dry_run else []\n+            \n+            print(f\"\\n{Fore.WHITE}{Style.BRIGHT}PORTFOLIO SUMMARY:{Style.RESET_ALL}\")\n+            print(f\"Portfolio Value: ${account.portfolio_value:,.2f}\")\n+            print(f\"Cash: ${account.cash:,.2f}\")\n+            print(f\"Buying Power: ${account.buying_power:,.2f}\")\n+            print(f\"Day Trade Count: {account.day_trade_count}\")\n+            \n+            if positions:\n+                print(f\"\\n{Fore.WHITE}{Style.BRIGHT}POSITIONS:{Style.RESET_ALL}\")\n+                for pos in positions:\n+                    color = Fore.GREEN if pos.unrealized_pnl >= 0 else Fore.RED\n+                    print(f\"{pos.symbol}: {pos.side} {pos.quantity:,.0f} shares @ ${pos.avg_entry_price:.2f}\")\n+                    print(f\"  Market Value: ${pos.market_value:,.2f}\")\n+                    print(f\"  {color}Unrealized P&L: ${pos.unrealized_pnl:,.2f}{Style.RESET_ALL}\")\n+            else:\n+                print(f\"\\n{Fore.YELLOW}No open positions{Style.RESET_ALL}\")\n+            \n+            # Show pending/open orders\n+            if open_orders:\n+                print(f\"\\n{Fore.WHITE}{Style.BRIGHT}ORDERS:{Style.RESET_ALL}\")\n+                for order in open_orders:\n+                    status_color = {\n+                        \"pending_new\": Fore.YELLOW,\n+                        \"new\": Fore.CYAN,\n+                        \"partially_filled\": Fore.BLUE,\n+                        \"filled\": Fore.GREEN,\n+                        \"done_for_day\": Fore.MAGENTA,\n+                        \"canceled\": Fore.RED,\n+                        \"expired\": Fore.RED,\n+                        \"replaced\": Fore.YELLOW,\n+                        \"pending_cancel\": Fore.YELLOW,\n+                        \"pending_replace\": Fore.YELLOW,\n+                        \"accepted\": Fore.CYAN,\n+                        \"accepted_for_bidding\": Fore.CYAN,\n+                        \"stopped\": Fore.RED,\n+                        \"rejected\": Fore.RED,\n+                        \"suspended\": Fore.RED\n+                    }.get(order.status, Fore.WHITE)\n+                    \n+                    print(f\"{order.symbol}: {status_color}{order.status.upper()}{Style.RESET_ALL} - {order.side} {order.quantity} @ {order.order_type}\")\n+                    print(f\"  Order ID: {order.id}\")\n+                    if order.submitted_at:\n+                        print(f\"  Submitted: {order.submitted_at.strftime('%Y-%m-%d %H:%M:%S')}\")\n+                    if order.filled_quantity and order.filled_quantity > 0:\n+                        print(f\"  Filled: {order.filled_quantity}/{order.quantity} @ ${order.filled_price:.2f}\")\n+            else:\n+                print(f\"\\n{Fore.YELLOW}No pending orders{Style.RESET_ALL}\")\n+                \n+        except Exception as e:\n+            logger.error(f\"Failed to get portfolio summary: {e}\")\n+            print(f\"{Fore.RED}Failed to get portfolio summary: {e}{Style.RESET_ALL}\")\n+\n+\n+def create_trader(\n+    tickers: list[str],\n+    selected_analysts: list[str] = None,\n+    model_name: str = \"gpt-4o\",\n+    model_provider: str = \"OpenAI\",\n+    available_capital: float = None,\n+    margin_requirement: float = None,\n+    dry_run: bool = False,\n+    ignore_market_hours: bool = False\n+) -> Trader:\n+    \"\"\"Create a configured trader instance.\n+    \n+    Args:\n+        tickers: List of tickers to trade.\n+        selected_analysts: List of analysts to use.\n+        model_name: LLM model name.\n+        model_provider: LLM provider.\n+        available_capital: Override available capital (uses broker cash if None).\n+        margin_requirement: Margin requirement ratio for short positions.\n+        dry_run: If True, log trades but don't execute them.\n+        ignore_market_hours: If True, run even when market is closed.\n+        \n+    Returns:\n+        Trader: Configured trader instance.\n+    \"\"\"\n+    broker = AlpacaBroker()  # Will read ALPACA_PAPER from environment\n+    \n+    return Trader(\n+        broker=broker,\n+        tickers=tickers,\n+        selected_analysts=selected_analysts,\n+        model_name=model_name,\n+        model_provider=model_provider,\n+        available_capital=available_capital,\n+        margin_requirement=margin_requirement,\n+        dry_run=dry_run,\n+        ignore_market_hours=ignore_market_hours\n+    )\n\\ No newline at end of file", "blob_url": "https://github.com/virattt/ai-hedge-fund/blob/626e4d48a5c47b47f10d0a878b82471fc14bddf5/src%2Ftrading%2Ftrader.py", "raw_url": "https://github.com/virattt/ai-hedge-fund/raw/626e4d48a5c47b47f10d0a878b82471fc14bddf5/src%2Ftrading%2Ftrader.py", "contents_url": "https://api.github.com/repos/virattt/ai-hedge-fund/contents/src%2Ftrading%2Ftrader.py?ref=626e4d48a5c47b47f10d0a878b82471fc14bddf5"}], "commits_data": [{"sha": "0242e648022bd84db9289a443382cd32e5d7b123", "message": "feat: added alpaca trading", "author": "Alexander Malysh", "date": "2025-06-27 09:42:38+00:00", "url": "https://github.com/virattt/ai-hedge-fund/commit/0242e648022bd84db9289a443382cd32e5d7b123"}, {"sha": "ae5191b52a197f45d8097cb5035380867a196a0e", "message": "Merge branch 'main' into alpaca-trading", "author": "Alexander Malysh", "date": "2025-06-27 10:17:19+00:00", "url": "https://github.com/virattt/ai-hedge-fund/commit/ae5191b52a197f45d8097cb5035380867a196a0e"}, {"sha": "fafeaa45a55b033c5d89c95f63914c05d54a4151", "message": "fix: added missing alpaca-py package", "author": "Alexander Malysh", "date": "2025-06-27 10:46:33+00:00", "url": "https://github.com/virattt/ai-hedge-fund/commit/fafeaa45a55b033c5d89c95f63914c05d54a4151"}, {"sha": "c45852f8db23977b253200fd754e66936da7cc0f", "message": "fix: added missing ALPACA env vars", "author": "Alexander Malysh", "date": "2025-06-27 14:36:51+00:00", "url": "https://github.com/virattt/ai-hedge-fund/commit/c45852f8db23977b253200fd754e66936da7cc0f"}, {"sha": "1b6e7a3c3209c1e882f7ee6ec73b919c48252146", "message": "fix: Handle transition from short to long position", "author": "Alexander Malysh", "date": "2025-06-29 10:34:14+00:00", "url": "https://github.com/virattt/ai-hedge-fund/commit/1b6e7a3c3209c1e882f7ee6ec73b919c48252146"}, {"sha": "626e4d48a5c47b47f10d0a878b82471fc14bddf5", "message": "fix: fixed transitions short -> long, long -> short", "author": "Alexander Malysh", "date": "2025-06-30 13:45:24+00:00", "url": "https://github.com/virattt/ai-hedge-fund/commit/626e4d48a5c47b47f10d0a878b82471fc14bddf5"}], "reviews": [], "html_url": "https://github.com/virattt/ai-hedge-fund/pull/376", "diff_url": "https://github.com/virattt/ai-hedge-fund/pull/376.diff", "patch_url": "https://github.com/virattt/ai-hedge-fund/pull/376.patch"}, "analysis_duration": 0.0009889602661132812, "total_issues": 0}, "error": null}, "3ccfb6d9-b267-4b6b-a737-7a9b30945474": {"id": "3ccfb6d9-b267-4b6b-a737-7a9b30945474", "type": "security", "code_snippets": [{"file_path": "auth.py", "content": "def login(username, password):\n    admin_pass = 'superSecret123!'\n    if password == admin_pass:\n        return True\n    return False\n\ndef get_user_data(user_id):\n    query = f\"SELECT * FROM users WHERE id = {user_id}\"\n    return execute_query(query)", "language": "python"}, {"file_path": "upload.py", "content": "def save_uploaded_file(file):\n    filename = file.filename\n    file.save('/uploads/' + filename)\n    return filename\n\ndef process_xml(data):\n    return eval(data)", "language": "python"}], "status": "completed", "created_at": "2025-07-27T13:09:38.336077", "started_at": "2025-07-27T13:09:38.876684", "completed_at": "2025-07-27T13:09:47.889291", "results": {"security_issues": [{"type": "Hardcoded passwords/secrets/API keys", "severity": "critical", "description": "The administrator password 'superSecret123!' is hardcoded in the `login` function.  This is a major security risk as anyone with access to the code can obtain the password.", "line": 2, "file": "auth.py", "confidence": 100.0}, {"type": "SQL injection", "severity": "critical", "description": "The `get_user_data` function is vulnerable to SQL injection.  User-supplied input (`user_id`) is directly incorporated into the SQL query without proper sanitization or parameterization.  A malicious actor could inject arbitrary SQL code to access or modify the database.", "line": 7, "file": "auth.py", "confidence": 100.0}, {"type": "Authentication bypass", "severity": "critical", "description": "The authentication mechanism is extremely weak.  Only a single hardcoded password protects the entire system. There's no salting or hashing of passwords, making it trivial to compromise.", "line": 2, "file": "auth.py", "confidence": 100.0}, {"type": "Path traversal", "severity": "critical", "description": "The code directly uses the filename from the uploaded file to construct the file path.  An attacker could manipulate the filename to traverse directories and overwrite arbitrary files on the system. For example, an attacker could upload a file named '../etc/passwd' to read the system's password file.", "line": 3, "file": "upload.py", "confidence": 100.0}, {"type": "Insecure file operations", "severity": "high", "description": "The code lacks proper file validation and sanitization before saving the uploaded file. This could lead to various issues, including the path traversal vulnerability mentioned above, as well as the potential for uploading malicious files (e.g., executables) that could be executed on the server.", "line": 3, "file": "upload.py", "confidence": 95.0}, {"type": "Command injection", "severity": "critical", "description": "While not directly apparent in this code snippet, the lack of input sanitization when handling filenames opens the door for command injection if the server's file system or other processes interact with the uploaded files in a way that incorporates the filename into a shell command.", "line": 3, "file": "upload.py", "confidence": 80.0}, {"type": "Missing input validation", "severity": "high", "description": "The code does not validate the file type or content before saving it.  This allows attackers to upload malicious files (e.g., scripts, executables) that could compromise the server.", "line": 3, "file": "upload.py", "confidence": 90.0}, {"type": "Insecure deserialization", "severity": "critical", "description": "The `eval()` function in `process_xml` is extremely dangerous.  It executes arbitrary code contained within the XML data, allowing attackers to execute arbitrary commands on the server if they can control the XML input.", "line": 6, "file": "upload.py", "confidence": 100.0}], "total_issues": 8, "severity_breakdown": {"critical": 6, "high": 2, "medium": 0, "low": 0}, "decision": {"decision": "BLOCK", "risk_level": "critical", "summary": "Found 6 critical security issues", "recommendations": ["Fix critical security issues immediately", "Review security best practices"]}, "errors": [], "analysis_method": "agent_system"}, "error": null}, "4e8163ed-0411-499e-bf5e-3c58e640d393": {"id": "4e8163ed-0411-499e-bf5e-3c58e640d393", "type": "pr", "pr_url": "https://github.com/virattt/ai-hedge-fund/pull/306", "status": "completed", "mode": "deep", "created_at": "2025-07-27T13:17:26.709920", "started_at": "2025-07-27T13:17:27.600812", "completed_at": "2025-07-27T13:17:49.812745", "results": {"security_issues": [], "quality_issues": [], "logic_issues": [], "decision": {}, "pr_details": {"id": 2536944201, "number": 306, "title": "Argument --llm argument to main.py too", "body": "To specify the LLM provider and model, use the `--llm` argument in the format `Provider:Model` (e.g., `Openai:gpt-4`, `Ollama:llama3`). This will override the interactive model selection.\r\n\r\n```bash\r\n# With Poetry:\r\npoetry run python src/main.py --ticker AAPL,MSFT,NVDA --llm Openai:gpt-4\r\npoetry run python src/main.py --ticker AAPL,MSFT,NVDA --llm Ollama:llama3\r\n\r\n# With Docker (on Linux/Mac):\r\n./run.sh --ticker AAPL,MSFT,NVDA --llm Openai:gpt-4\r\n\r\n# With Docker (on Windows):\r\nrun.bat --ticker AAPL,MSFT,NVDA --llm Openai:gpt-4\r\n```\r\n\r\nIf you do not specify `--llm`, you will be prompted to select a provider and model interactively.\r\n\r\n\r\nREADME also updated", "state": "open", "created_at": "2025-05-22 11:43:33+00:00", "updated_at": "2025-05-22 11:44:42+00:00", "closed_at": null, "merged_at": null, "merge_commit_sha": null, "author": "Romamo", "assignees": [], "reviewers": [], "labels": [], "milestone": null, "base_branch": "main", "head_branch": "argument-llm-main", "base_sha": "ab8ce114e78e967948a3a48fe1206becc540e232", "head_sha": "60dc3133c3c89158a2c9fb7c80cd4f106dfb5324", "mergeable": false, "mergeable_state": "dirty", "merged": false, "comments": 0, "review_comments": 0, "commits": 5, "additions": 64, "deletions": 18, "changed_files": 3, "files": [{"filename": "README.md", "status": "modified", "additions": 17, "deletions": 13, "changes": 30, "patch": "@@ -147,6 +147,22 @@ run.bat --ticker AAPL,MSFT,NVDA main\n **Example Output:**\n <img width=\"992\" alt=\"Screenshot 2025-01-06 at 5 50 17 PM\" src=\"https://github.com/user-attachments/assets/e8ca04bf-9989-4a7d-a8b4-34e04666663b\" />\n \n+To specify the LLM provider and model, use the `--llm` argument in the format `Provider:Model` (e.g., `Openai:gpt-4`, `Ollama:llama3`). This will override the interactive model selection.\n+\n+```bash\n+# With Poetry:\n+poetry run python src/main.py --ticker AAPL,MSFT,NVDA --llm Openai:gpt-4\n+poetry run python src/main.py --ticker AAPL,MSFT,NVDA --llm Ollama:llama3\n+\n+# With Docker (on Linux/Mac):\n+./run.sh --ticker AAPL,MSFT,NVDA --llm Openai:gpt-4\n+\n+# With Docker (on Windows):\n+run.bat --ticker AAPL,MSFT,NVDA --llm Openai:gpt-4\n+```\n+\n+If you do not specify `--llm`, you will be prompted to select a provider and model interactively.\n+\n You can also specify a `--ollama` flag to run the AI hedge fund using local LLMs.\n \n ```bash\n@@ -205,6 +221,7 @@ run.bat --ticker AAPL,MSFT,NVDA backtest\n **Example Output:**\n <img width=\"941\" alt=\"Screenshot 2025-01-06 at 5 47 52 PM\" src=\"https://github.com/user-attachments/assets/00e794ea-8628-44e6-9a84-8f8a31ad3b47\" />\n \n+To specify the LLM provider and model, use the `--llm` argument the same way as for the Hedge Fund.\n \n You can optionally specify the start and end dates to backtest over a specific time period.\n \n@@ -219,19 +236,6 @@ poetry run python src/backtester.py --ticker AAPL,MSFT,NVDA --start-date 2024-01\n run.bat --ticker AAPL,MSFT,NVDA --start-date 2024-01-01 --end-date 2024-03-01 backtest\n ```\n \n-You can also specify a `--ollama` flag to run the backtester using local LLMs.\n-```bash\n-# With Poetry:\n-poetry run python src/backtester.py --ticker AAPL,MSFT,NVDA --ollama\n-\n-# With Docker (on Linux/Mac):\n-./run.sh --ticker AAPL,MSFT,NVDA --ollama backtest\n-\n-# With Docker (on Windows):\n-run.bat --ticker AAPL,MSFT,NVDA --ollama backtest\n-```\n-\n-\n ## Project Structure \n ```\n ai-hedge-fund/", "blob_url": "https://github.com/virattt/ai-hedge-fund/blob/60dc3133c3c89158a2c9fb7c80cd4f106dfb5324/README.md", "raw_url": "https://github.com/virattt/ai-hedge-fund/raw/60dc3133c3c89158a2c9fb7c80cd4f106dfb5324/README.md", "contents_url": "https://api.github.com/repos/virattt/ai-hedge-fund/contents/README.md?ref=60dc3133c3c89158a2c9fb7c80cd4f106dfb5324"}, {"filename": "src/backtester.py", "status": "modified", "additions": 23, "deletions": 2, "changes": 25, "patch": "@@ -651,6 +651,12 @@ def analyze_performance(self):\n         action=\"store_true\",\n         help=\"Use all available analysts (overrides --analysts)\",\n     )\n+    parser.add_argument(\n+        \"--llm\",\n+        type=str,\n+        default=None,\n+        help=\"Specify LLM as provider:model (e.g., Openai:gpt-4, Ollama:llama3) to override interactive selection\",\n+    )\n     parser.add_argument(\"--ollama\", action=\"store_true\", help=\"Use Ollama for local LLM inference\")\n \n     args = parser.parse_args()\n@@ -687,11 +693,26 @@ def analyze_performance(self):\n             selected_analysts = choices\n             print(f\"\\nSelected analysts: \" f\"{', '.join(Fore.GREEN + choice.title().replace('_', ' ') + Style.RESET_ALL for choice in choices)}\")\n \n-    # Select LLM model based on whether Ollama is being used\n+    # Select LLM model based on argument or interactive selection\n     model_name = \"\"\n     model_provider = None\n \n-    if args.ollama:\n+    # If command-line LLM is provided, use it directly\n+    if args.llm is not None:\n+        if ':' not in args.llm:\n+            print(f\"{Fore.RED}--llm argument must be in provider:model format (e.g., openai:gpt-4){Style.RESET_ALL}\")\n+            sys.exit(1)\n+        model_provider, model_name = args.llm.split(':', 1)\n+        if model_provider.lower() == ModelProvider.OLLAMA.value:\n+            # For Ollama, ensure model is available\n+            if not ensure_ollama_and_model(model_name):\n+                print(f\"{Fore.RED}Cannot proceed without Ollama and the selected model.{Style.RESET_ALL}\")\n+                sys.exit(1)\n+            print(f\"\\nSelected {Fore.CYAN}Ollama{Style.RESET_ALL} model: {Fore.GREEN + Style.BRIGHT}{model_name}{Style.RESET_ALL}\\n\")\n+            model_provider = ModelProvider.OLLAMA.value\n+        else:\n+            print(f\"\\nSelected {Fore.CYAN}{model_provider}{Style.RESET_ALL} model: {Fore.GREEN + Style.BRIGHT}{model_name}{Style.RESET_ALL}\\n\")\n+    elif args.ollama:\n         print(f\"{Fore.CYAN}Using Ollama for local LLM inference.{Style.RESET_ALL}\")\n \n         # Select from Ollama-specific models", "blob_url": "https://github.com/virattt/ai-hedge-fund/blob/60dc3133c3c89158a2c9fb7c80cd4f106dfb5324/src%2Fbacktester.py", "raw_url": "https://github.com/virattt/ai-hedge-fund/raw/60dc3133c3c89158a2c9fb7c80cd4f106dfb5324/src%2Fbacktester.py", "contents_url": "https://api.github.com/repos/virattt/ai-hedge-fund/contents/src%2Fbacktester.py?ref=60dc3133c3c89158a2c9fb7c80cd4f106dfb5324"}, {"filename": "src/main.py", "status": "modified", "additions": 24, "deletions": 3, "changes": 27, "patch": "@@ -145,6 +145,12 @@ def create_workflow(selected_analysts=None):\n     parser.add_argument(\"--end-date\", type=str, help=\"End date (YYYY-MM-DD). Defaults to today\")\n     parser.add_argument(\"--show-reasoning\", action=\"store_true\", help=\"Show reasoning from each agent\")\n     parser.add_argument(\"--show-agent-graph\", action=\"store_true\", help=\"Show the agent graph\")\n+    parser.add_argument(\n+        \"--llm\",\n+        type=str,\n+        default=None,\n+        help=\"Specify LLM as provider:model (e.g., Openai:gpt-4, Ollama:llama3) to override interactive selection\",\n+    )\n     parser.add_argument(\"--ollama\", action=\"store_true\", help=\"Use Ollama for local LLM inference\")\n \n     args = parser.parse_args()\n@@ -176,11 +182,26 @@ def create_workflow(selected_analysts=None):\n         selected_analysts = choices\n         print(f\"\\nSelected analysts: {', '.join(Fore.GREEN + choice.title().replace('_', ' ') + Style.RESET_ALL for choice in choices)}\\n\")\n \n-    # Select LLM model based on whether Ollama is being used\n+    # Select LLM model based on argument or interactive selection\n     model_name = \"\"\n     model_provider = \"\"\n \n-    if args.ollama:\n+    # If command-line LLM is provided, use it directly\n+    if args.llm is not None:\n+        if ':' not in args.llm:\n+            print(f\"{Fore.RED}--llm argument must be in provider:model format (e.g., Openai:gpt-4){Style.RESET_ALL}\")\n+            sys.exit(1)\n+        model_provider, model_name = args.llm.split(':', 1)\n+        if model_provider.lower() == ModelProvider.OLLAMA.value:\n+            # For Ollama, ensure model is available\n+            if not ensure_ollama_and_model(model_name):\n+                print(f\"{Fore.RED}Cannot proceed without Ollama and the selected model.{Style.RESET_ALL}\")\n+                sys.exit(1)\n+            print(f\"\\nSelected {Fore.CYAN}Ollama{Style.RESET_ALL} model: {Fore.GREEN + Style.BRIGHT}{model_name}{Style.RESET_ALL}\\n\")\n+            model_provider = ModelProvider.OLLAMA.value\n+        else:\n+            print(f\"\\nSelected {Fore.CYAN}{model_provider}{Style.RESET_ALL} model: {Fore.GREEN + Style.BRIGHT}{model_name}{Style.RESET_ALL}\\n\")\n+    elif args.ollama:\n         print(f\"{Fore.CYAN}Using Ollama for local LLM inference.{Style.RESET_ALL}\")\n \n         # Select from Ollama-specific models\n@@ -232,7 +253,7 @@ def create_workflow(selected_analysts=None):\n         if not model_choice:\n             print(\"\\n\\nInterrupt received. Exiting...\")\n             sys.exit(0)\n-\n+        \n         model_name, model_provider = model_choice\n \n         # Get model info using the helper function", "blob_url": "https://github.com/virattt/ai-hedge-fund/blob/60dc3133c3c89158a2c9fb7c80cd4f106dfb5324/src%2Fmain.py", "raw_url": "https://github.com/virattt/ai-hedge-fund/raw/60dc3133c3c89158a2c9fb7c80cd4f106dfb5324/src%2Fmain.py", "contents_url": "https://api.github.com/repos/virattt/ai-hedge-fund/contents/src%2Fmain.py?ref=60dc3133c3c89158a2c9fb7c80cd4f106dfb5324"}], "commits_data": [{"sha": "f3a21a57084553621c55fc11ffd9dab683ac59dd", "message": "Added command line argument to choose llm model", "author": "Romamo", "date": "2025-05-22 08:44:25+00:00", "url": "https://github.com/virattt/ai-hedge-fund/commit/f3a21a57084553621c55fc11ffd9dab683ac59dd"}, {"sha": "db3727cb36b95807089bfe943a8cf95da4c1294a", "message": "Removed wrongly added line", "author": "Romamo", "date": "2025-05-22 11:02:39+00:00", "url": "https://github.com/virattt/ai-hedge-fund/commit/db3727cb36b95807089bfe943a8cf95da4c1294a"}, {"sha": "94e3627ac3890dd11d3f3894f019e12cf471c3b9", "message": "Updated readme", "author": "Romamo", "date": "2025-05-22 11:27:47+00:00", "url": "https://github.com/virattt/ai-hedge-fund/commit/94e3627ac3890dd11d3f3894f019e12cf471c3b9"}, {"sha": "60e79c13a2ee4c49c9d0ab4257a932fba4870f9e", "message": "Added --llm argument to main.py too", "author": "Romamo", "date": "2025-05-22 11:42:27+00:00", "url": "https://github.com/virattt/ai-hedge-fund/commit/60e79c13a2ee4c49c9d0ab4257a932fba4870f9e"}, {"sha": "60dc3133c3c89158a2c9fb7c80cd4f106dfb5324", "message": "Added --llm argument to main.py too", "author": "Romamo", "date": "2025-05-22 11:44:36+00:00", "url": "https://github.com/virattt/ai-hedge-fund/commit/60dc3133c3c89158a2c9fb7c80cd4f106dfb5324"}], "reviews": [], "html_url": "https://github.com/virattt/ai-hedge-fund/pull/306", "diff_url": "https://github.com/virattt/ai-hedge-fund/pull/306.diff", "patch_url": "https://github.com/virattt/ai-hedge-fund/pull/306.patch"}, "analysis_duration": 0.0, "total_issues": 0}, "error": null}, "d3235c22-5d94-4688-9b24-b0aeb1d41814": {"id": "d3235c22-5d94-4688-9b24-b0aeb1d41814", "type": "pr", "pr_url": "https://github.com/virattt/ai-hedge-fund/pull/306", "status": "completed", "mode": "deep", "created_at": "2025-07-27T13:39:12.007859", "started_at": "2025-07-27T13:39:12.603972", "completed_at": "2025-07-27T13:39:12.635413", "results": {"error": "Agent system not available - cannot perform full PR analysis", "security_issues": [], "quality_issues": [], "logic_issues": [], "decision": {"decision": "MANUAL_REVIEW", "risk_level": "unknown", "summary": "Analysis not available - manual review required", "recommendations": ["Set up agent system for automated analysis"]}}, "error": null}, "e336edda-ea3e-424d-b7a2-72ff57329000": {"id": "e336edda-ea3e-424d-b7a2-72ff57329000", "type": "security", "code_snippets": [{"file_path": "auth.py", "content": "def login(username, password):\\n    admin_pass = 'superSecret123!'\\n    if password == admin_pass:\\n        return True\\n    return False\\n\\ndef get_user_data(user_id):\\n    query = f\\\"SELECT * FROM users WHERE id = {user_id}\\\"\\n    return execute_query(query)\",\n      \"language\": \"python\"\n    },", "language": "python"}], "status": "completed", "created_at": "2025-07-27T13:41:04.064709", "started_at": "2025-07-27T13:41:04.894501", "completed_at": "2025-07-27T13:41:04.924150", "results": {"security_issues": [{"type": "Hardcoded Secret", "severity": "critical", "description": "Potential hardcoded credentials found", "line": 1, "file": "auth.py", "confidence": 0.7, "code_snippet": "def login(username, password):\\n    admin_pass = 'superSecret123!'\\n    if password == admin_pass:\\n        return True\\n    return False\\n\\ndef get_user_data(user_id):\\n    query = f\\\"SELECT * FROM users WHERE id = {user_id}\\\"\\n    return execute_query(query)\","}, {"type": "Insecure Comparison", "severity": "high", "description": "Direct string comparison may be vulnerable to timing attacks", "line": 1, "file": "auth.py", "confidence": 0.7, "code_snippet": "def login(username, password):\\n    admin_pass = 'superSecret123!'\\n    if password == admin_pass:\\n        return True\\n    return False\\n\\ndef get_user_data(user_id):\\n    query = f\\\"SELECT * FROM users WHERE id = {user_id}\\\"\\n    return execute_query(query)\","}, {"type": "Code Injection Risk", "severity": "critical", "description": "Dynamic code execution with user input", "line": 1, "file": "auth.py", "confidence": 0.7, "code_snippet": "def login(username, password):\\n    admin_pass = 'superSecret123!'\\n    if password == admin_pass:\\n        return True\\n    return False\\n\\ndef get_user_data(user_id):\\n    query = f\\\"SELECT * FROM users WHERE id = {user_id}\\\"\\n    return execute_query(query)\","}], "total_issues": 3, "severity_breakdown": {"critical": 2, "high": 1, "medium": 0, "low": 0}, "decision": {"decision": "BLOCK", "risk_level": "critical", "summary": "Found 2 critical security issues", "recommendations": ["Fix critical security issues immediately", "Review security best practices"]}, "errors": [], "analysis_method": "pattern_matching"}, "error": null}, "6a808e0b-d0d2-4dd2-88b9-a5ba5f954447": {"id": "6a808e0b-d0d2-4dd2-88b9-a5ba5f954447", "type": "pr", "pr_url": "https://github.com/virattt/ai-hedge-fund/pull/306", "status": "completed", "mode": "deep", "created_at": "2025-07-27T13:58:01.843077", "started_at": "2025-07-27T13:58:02.010099", "completed_at": "2025-07-27T13:58:37.473337", "results": {"security_issues": [], "quality_issues": [], "logic_issues": [], "decision": {}, "pr_details": {"id": 2536944201, "number": 306, "title": "Argument --llm argument to main.py too", "body": "To specify the LLM provider and model, use the `--llm` argument in the format `Provider:Model` (e.g., `Openai:gpt-4`, `Ollama:llama3`). This will override the interactive model selection.\r\n\r\n```bash\r\n# With Poetry:\r\npoetry run python src/main.py --ticker AAPL,MSFT,NVDA --llm Openai:gpt-4\r\npoetry run python src/main.py --ticker AAPL,MSFT,NVDA --llm Ollama:llama3\r\n\r\n# With Docker (on Linux/Mac):\r\n./run.sh --ticker AAPL,MSFT,NVDA --llm Openai:gpt-4\r\n\r\n# With Docker (on Windows):\r\nrun.bat --ticker AAPL,MSFT,NVDA --llm Openai:gpt-4\r\n```\r\n\r\nIf you do not specify `--llm`, you will be prompted to select a provider and model interactively.\r\n\r\n\r\nREADME also updated", "state": "open", "created_at": "2025-05-22 11:43:33+00:00", "updated_at": "2025-05-22 11:44:42+00:00", "closed_at": null, "merged_at": null, "merge_commit_sha": null, "author": "Romamo", "assignees": [], "reviewers": [], "labels": [], "milestone": null, "base_branch": "main", "head_branch": "argument-llm-main", "base_sha": "ab8ce114e78e967948a3a48fe1206becc540e232", "head_sha": "60dc3133c3c89158a2c9fb7c80cd4f106dfb5324", "mergeable": false, "mergeable_state": "dirty", "merged": false, "comments": 0, "review_comments": 0, "commits": 5, "additions": 64, "deletions": 18, "changed_files": 3, "files": [{"filename": "README.md", "status": "modified", "additions": 17, "deletions": 13, "changes": 30, "patch": "@@ -147,6 +147,22 @@ run.bat --ticker AAPL,MSFT,NVDA main\n **Example Output:**\n <img width=\"992\" alt=\"Screenshot 2025-01-06 at 5 50 17 PM\" src=\"https://github.com/user-attachments/assets/e8ca04bf-9989-4a7d-a8b4-34e04666663b\" />\n \n+To specify the LLM provider and model, use the `--llm` argument in the format `Provider:Model` (e.g., `Openai:gpt-4`, `Ollama:llama3`). This will override the interactive model selection.\n+\n+```bash\n+# With Poetry:\n+poetry run python src/main.py --ticker AAPL,MSFT,NVDA --llm Openai:gpt-4\n+poetry run python src/main.py --ticker AAPL,MSFT,NVDA --llm Ollama:llama3\n+\n+# With Docker (on Linux/Mac):\n+./run.sh --ticker AAPL,MSFT,NVDA --llm Openai:gpt-4\n+\n+# With Docker (on Windows):\n+run.bat --ticker AAPL,MSFT,NVDA --llm Openai:gpt-4\n+```\n+\n+If you do not specify `--llm`, you will be prompted to select a provider and model interactively.\n+\n You can also specify a `--ollama` flag to run the AI hedge fund using local LLMs.\n \n ```bash\n@@ -205,6 +221,7 @@ run.bat --ticker AAPL,MSFT,NVDA backtest\n **Example Output:**\n <img width=\"941\" alt=\"Screenshot 2025-01-06 at 5 47 52 PM\" src=\"https://github.com/user-attachments/assets/00e794ea-8628-44e6-9a84-8f8a31ad3b47\" />\n \n+To specify the LLM provider and model, use the `--llm` argument the same way as for the Hedge Fund.\n \n You can optionally specify the start and end dates to backtest over a specific time period.\n \n@@ -219,19 +236,6 @@ poetry run python src/backtester.py --ticker AAPL,MSFT,NVDA --start-date 2024-01\n run.bat --ticker AAPL,MSFT,NVDA --start-date 2024-01-01 --end-date 2024-03-01 backtest\n ```\n \n-You can also specify a `--ollama` flag to run the backtester using local LLMs.\n-```bash\n-# With Poetry:\n-poetry run python src/backtester.py --ticker AAPL,MSFT,NVDA --ollama\n-\n-# With Docker (on Linux/Mac):\n-./run.sh --ticker AAPL,MSFT,NVDA --ollama backtest\n-\n-# With Docker (on Windows):\n-run.bat --ticker AAPL,MSFT,NVDA --ollama backtest\n-```\n-\n-\n ## Project Structure \n ```\n ai-hedge-fund/", "blob_url": "https://github.com/virattt/ai-hedge-fund/blob/60dc3133c3c89158a2c9fb7c80cd4f106dfb5324/README.md", "raw_url": "https://github.com/virattt/ai-hedge-fund/raw/60dc3133c3c89158a2c9fb7c80cd4f106dfb5324/README.md", "contents_url": "https://api.github.com/repos/virattt/ai-hedge-fund/contents/README.md?ref=60dc3133c3c89158a2c9fb7c80cd4f106dfb5324"}, {"filename": "src/backtester.py", "status": "modified", "additions": 23, "deletions": 2, "changes": 25, "patch": "@@ -651,6 +651,12 @@ def analyze_performance(self):\n         action=\"store_true\",\n         help=\"Use all available analysts (overrides --analysts)\",\n     )\n+    parser.add_argument(\n+        \"--llm\",\n+        type=str,\n+        default=None,\n+        help=\"Specify LLM as provider:model (e.g., Openai:gpt-4, Ollama:llama3) to override interactive selection\",\n+    )\n     parser.add_argument(\"--ollama\", action=\"store_true\", help=\"Use Ollama for local LLM inference\")\n \n     args = parser.parse_args()\n@@ -687,11 +693,26 @@ def analyze_performance(self):\n             selected_analysts = choices\n             print(f\"\\nSelected analysts: \" f\"{', '.join(Fore.GREEN + choice.title().replace('_', ' ') + Style.RESET_ALL for choice in choices)}\")\n \n-    # Select LLM model based on whether Ollama is being used\n+    # Select LLM model based on argument or interactive selection\n     model_name = \"\"\n     model_provider = None\n \n-    if args.ollama:\n+    # If command-line LLM is provided, use it directly\n+    if args.llm is not None:\n+        if ':' not in args.llm:\n+            print(f\"{Fore.RED}--llm argument must be in provider:model format (e.g., openai:gpt-4){Style.RESET_ALL}\")\n+            sys.exit(1)\n+        model_provider, model_name = args.llm.split(':', 1)\n+        if model_provider.lower() == ModelProvider.OLLAMA.value:\n+            # For Ollama, ensure model is available\n+            if not ensure_ollama_and_model(model_name):\n+                print(f\"{Fore.RED}Cannot proceed without Ollama and the selected model.{Style.RESET_ALL}\")\n+                sys.exit(1)\n+            print(f\"\\nSelected {Fore.CYAN}Ollama{Style.RESET_ALL} model: {Fore.GREEN + Style.BRIGHT}{model_name}{Style.RESET_ALL}\\n\")\n+            model_provider = ModelProvider.OLLAMA.value\n+        else:\n+            print(f\"\\nSelected {Fore.CYAN}{model_provider}{Style.RESET_ALL} model: {Fore.GREEN + Style.BRIGHT}{model_name}{Style.RESET_ALL}\\n\")\n+    elif args.ollama:\n         print(f\"{Fore.CYAN}Using Ollama for local LLM inference.{Style.RESET_ALL}\")\n \n         # Select from Ollama-specific models", "blob_url": "https://github.com/virattt/ai-hedge-fund/blob/60dc3133c3c89158a2c9fb7c80cd4f106dfb5324/src%2Fbacktester.py", "raw_url": "https://github.com/virattt/ai-hedge-fund/raw/60dc3133c3c89158a2c9fb7c80cd4f106dfb5324/src%2Fbacktester.py", "contents_url": "https://api.github.com/repos/virattt/ai-hedge-fund/contents/src%2Fbacktester.py?ref=60dc3133c3c89158a2c9fb7c80cd4f106dfb5324"}, {"filename": "src/main.py", "status": "modified", "additions": 24, "deletions": 3, "changes": 27, "patch": "@@ -145,6 +145,12 @@ def create_workflow(selected_analysts=None):\n     parser.add_argument(\"--end-date\", type=str, help=\"End date (YYYY-MM-DD). Defaults to today\")\n     parser.add_argument(\"--show-reasoning\", action=\"store_true\", help=\"Show reasoning from each agent\")\n     parser.add_argument(\"--show-agent-graph\", action=\"store_true\", help=\"Show the agent graph\")\n+    parser.add_argument(\n+        \"--llm\",\n+        type=str,\n+        default=None,\n+        help=\"Specify LLM as provider:model (e.g., Openai:gpt-4, Ollama:llama3) to override interactive selection\",\n+    )\n     parser.add_argument(\"--ollama\", action=\"store_true\", help=\"Use Ollama for local LLM inference\")\n \n     args = parser.parse_args()\n@@ -176,11 +182,26 @@ def create_workflow(selected_analysts=None):\n         selected_analysts = choices\n         print(f\"\\nSelected analysts: {', '.join(Fore.GREEN + choice.title().replace('_', ' ') + Style.RESET_ALL for choice in choices)}\\n\")\n \n-    # Select LLM model based on whether Ollama is being used\n+    # Select LLM model based on argument or interactive selection\n     model_name = \"\"\n     model_provider = \"\"\n \n-    if args.ollama:\n+    # If command-line LLM is provided, use it directly\n+    if args.llm is not None:\n+        if ':' not in args.llm:\n+            print(f\"{Fore.RED}--llm argument must be in provider:model format (e.g., Openai:gpt-4){Style.RESET_ALL}\")\n+            sys.exit(1)\n+        model_provider, model_name = args.llm.split(':', 1)\n+        if model_provider.lower() == ModelProvider.OLLAMA.value:\n+            # For Ollama, ensure model is available\n+            if not ensure_ollama_and_model(model_name):\n+                print(f\"{Fore.RED}Cannot proceed without Ollama and the selected model.{Style.RESET_ALL}\")\n+                sys.exit(1)\n+            print(f\"\\nSelected {Fore.CYAN}Ollama{Style.RESET_ALL} model: {Fore.GREEN + Style.BRIGHT}{model_name}{Style.RESET_ALL}\\n\")\n+            model_provider = ModelProvider.OLLAMA.value\n+        else:\n+            print(f\"\\nSelected {Fore.CYAN}{model_provider}{Style.RESET_ALL} model: {Fore.GREEN + Style.BRIGHT}{model_name}{Style.RESET_ALL}\\n\")\n+    elif args.ollama:\n         print(f\"{Fore.CYAN}Using Ollama for local LLM inference.{Style.RESET_ALL}\")\n \n         # Select from Ollama-specific models\n@@ -232,7 +253,7 @@ def create_workflow(selected_analysts=None):\n         if not model_choice:\n             print(\"\\n\\nInterrupt received. Exiting...\")\n             sys.exit(0)\n-\n+        \n         model_name, model_provider = model_choice\n \n         # Get model info using the helper function", "blob_url": "https://github.com/virattt/ai-hedge-fund/blob/60dc3133c3c89158a2c9fb7c80cd4f106dfb5324/src%2Fmain.py", "raw_url": "https://github.com/virattt/ai-hedge-fund/raw/60dc3133c3c89158a2c9fb7c80cd4f106dfb5324/src%2Fmain.py", "contents_url": "https://api.github.com/repos/virattt/ai-hedge-fund/contents/src%2Fmain.py?ref=60dc3133c3c89158a2c9fb7c80cd4f106dfb5324"}], "commits_data": [{"sha": "f3a21a57084553621c55fc11ffd9dab683ac59dd", "message": "Added command line argument to choose llm model", "author": "Romamo", "date": "2025-05-22 08:44:25+00:00", "url": "https://github.com/virattt/ai-hedge-fund/commit/f3a21a57084553621c55fc11ffd9dab683ac59dd"}, {"sha": "db3727cb36b95807089bfe943a8cf95da4c1294a", "message": "Removed wrongly added line", "author": "Romamo", "date": "2025-05-22 11:02:39+00:00", "url": "https://github.com/virattt/ai-hedge-fund/commit/db3727cb36b95807089bfe943a8cf95da4c1294a"}, {"sha": "94e3627ac3890dd11d3f3894f019e12cf471c3b9", "message": "Updated readme", "author": "Romamo", "date": "2025-05-22 11:27:47+00:00", "url": "https://github.com/virattt/ai-hedge-fund/commit/94e3627ac3890dd11d3f3894f019e12cf471c3b9"}, {"sha": "60e79c13a2ee4c49c9d0ab4257a932fba4870f9e", "message": "Added --llm argument to main.py too", "author": "Romamo", "date": "2025-05-22 11:42:27+00:00", "url": "https://github.com/virattt/ai-hedge-fund/commit/60e79c13a2ee4c49c9d0ab4257a932fba4870f9e"}, {"sha": "60dc3133c3c89158a2c9fb7c80cd4f106dfb5324", "message": "Added --llm argument to main.py too", "author": "Romamo", "date": "2025-05-22 11:44:36+00:00", "url": "https://github.com/virattt/ai-hedge-fund/commit/60dc3133c3c89158a2c9fb7c80cd4f106dfb5324"}], "reviews": [], "html_url": "https://github.com/virattt/ai-hedge-fund/pull/306", "diff_url": "https://github.com/virattt/ai-hedge-fund/pull/306.diff", "patch_url": "https://github.com/virattt/ai-hedge-fund/pull/306.patch"}, "analysis_duration": 0.0, "total_issues": 0}, "error": null}, "0f1e83e9-5f81-46e2-a4a4-7db502160c1d": {"id": "0f1e83e9-5f81-46e2-a4a4-7db502160c1d", "type": "security", "code_snippets": [{"file_path": "auth.py", "content": "import os\nimport sqlite3\n\nADMIN_PASSWORD = os.getenv(\"ADMIN_PASSWORD\", \"superSecret123!\")\n\ndef login(username, password):\n    if password == ADMIN_PASSWORD:\n        return True\n    return False\n\ndef get_user_data(user_id):\n    connection = sqlite3.connect(\"app.db\")\n    cursor = connection.cursor()\n    cursor.execute(\"SELECT * FROM users WHERE id = ?\", (user_id,))\n    result = cursor.fetchone()\n    connection.close()\n    return result\n", "language": "python"}], "status": "completed", "created_at": "2025-07-27T14:00:09.312274", "started_at": "2025-07-27T14:00:09.664279", "completed_at": "2025-07-27T14:00:13.335118", "results": {"security_issues": [{"type": "Hardcoded passwords/secrets/API keys", "severity": "critical", "description": "The ADMIN_PASSWORD is either hardcoded or retrieved from an environment variable with a fallback to a hardcoded value.  This is a critical vulnerability as it allows attackers to gain admin access if they can access the environment variables or the source code.", "line": 2, "file": "auth.py", "confidence": 1.0}, {"type": "SQL injection", "severity": "critical", "description": "The get_user_data function is vulnerable to SQL injection.  User-supplied input (user_id) is directly incorporated into the SQL query without proper sanitization or parameterization. An attacker could inject malicious SQL code to retrieve sensitive data or modify the database.", "line": 14, "file": "auth.py", "confidence": 1.0}, {"type": "Authentication bypass", "severity": "critical", "description": "The login function only checks if the provided password matches the ADMIN_PASSWORD. There's no user verification.  An attacker who knows the ADMIN_PASSWORD gains full access.", "line": 6, "file": "auth.py", "confidence": 1.0}], "total_issues": 3, "severity_breakdown": {"critical": 3, "high": 0, "medium": 0, "low": 0}, "decision": {"decision": "BLOCK", "risk_level": "critical", "summary": "Found 3 critical security issues", "recommendations": ["Fix critical security issues immediately", "Review security best practices"]}, "errors": [], "analysis_method": "agent_system"}, "error": null}, "d342c515-14b3-481a-a2d9-a9e883a9b196": {"id": "d342c515-14b3-481a-a2d9-a9e883a9b196", "type": "pr", "pr_url": "https://github.com/virattt/ai-hedge-fund/pull/306", "status": "completed", "mode": "deep", "created_at": "2025-07-27T14:02:30.150596", "started_at": "2025-07-27T14:02:30.564061", "completed_at": "2025-07-27T14:02:50.190008", "results": {"error": "Error during PR analysis: Failed to initialize embedding model: Cannot copy out of meta tensor; no data! Please use torch.nn.Module.to_empty() instead of torch.nn.Module.to() when moving module from meta to a different device.", "errors": ["Error during PR analysis: Failed to initialize embedding model: Cannot copy out of meta tensor; no data! Please use torch.nn.Module.to_empty() instead of torch.nn.Module.to() when moving module from meta to a different device."]}, "error": null}, "5ac3f87c-6701-40f1-b846-1275e74df949": {"id": "5ac3f87c-6701-40f1-b846-1275e74df949", "type": "pr", "pr_url": "https://github.com/virattt/ai-hedge-fund/pull/306", "status": "completed", "mode": "standard", "created_at": "2025-07-27T14:03:54.450273", "started_at": "2025-07-27T14:03:55.384464", "completed_at": "2025-07-27T14:04:12.601253", "results": {"error": "Error during PR analysis: Failed to initialize embedding model: Cannot copy out of meta tensor; no data! Please use torch.nn.Module.to_empty() instead of torch.nn.Module.to() when moving module from meta to a different device.", "errors": ["Error during PR analysis: Failed to initialize embedding model: Cannot copy out of meta tensor; no data! Please use torch.nn.Module.to_empty() instead of torch.nn.Module.to() when moving module from meta to a different device."]}, "error": null}, "afd0961d-f29b-4a88-a04b-43a4e7b0a8ff": {"id": "afd0961d-f29b-4a88-a04b-43a4e7b0a8ff", "type": "pr", "pr_url": "https://github.com/virattt/ai-hedge-fund/pull/306", "status": "completed", "mode": "standard", "created_at": "2025-07-27T15:50:18.918139", "started_at": "2025-07-27T15:50:19.215452", "completed_at": "2025-07-27T15:50:35.867888", "results": {"error": "Error during PR analysis: Failed to initialize embedding model: SentenceTransformer.__init__() got an unexpected keyword argument 'torch_dtype'", "errors": ["Error during PR analysis: Failed to initialize embedding model: SentenceTransformer.__init__() got an unexpected keyword argument 'torch_dtype'"]}, "error": null}, "e01bc7fc-01b1-4eae-b252-7fc91728ede0": {"id": "e01bc7fc-01b1-4eae-b252-7fc91728ede0", "type": "security", "code_snippets": [{"file_path": "ayth.py", "content": "import os\nimport sqlite3\n\nADMIN_PASSWORD = os.getenv(\"ADMIN_PASSWORD\", \"superSecret123!\")\n\ndef login(username, password):\n    if password == ADMIN_PASSWORD:\n        return True\n    return False\n\ndef get_user_data(user_id):\n    connection = sqlite3.connect(\"app.db\")\n    cursor = connection.cursor()\n    cursor.execute(\"SELECT * FROM users WHERE id = ?\", (user_id,))\n    result = cursor.fetchone()\n    connection.close()\n \u00a0\u00a0\u00a0return\u00a0result", "language": "python"}], "status": "completed", "created_at": "2025-07-27T15:51:43.732068", "started_at": "2025-07-27T15:51:44.037124", "completed_at": "2025-07-27T15:51:47.879836", "results": {"security_issues": [{"type": "Hardcoded passwords/secrets/API keys", "severity": "critical", "description": "The ADMIN_PASSWORD is either hardcoded or retrieved from an environment variable with a default value.  This is a critical vulnerability as it allows attackers to gain admin access if they can access the environment variables or the source code.", "line": 2, "file": "ayth.py", "confidence": 1.0}, {"type": "SQL injection", "severity": "critical", "description": "The get_user_data function is vulnerable to SQL injection.  User-supplied input (user_id) is directly used in an SQL query without proper sanitization or parameterization. An attacker could inject malicious SQL code to retrieve sensitive data or modify the database.", "line": 13, "file": "ayth.py", "confidence": 1.0}, {"type": "Authentication bypass", "severity": "critical", "description": "The login function uses a simple password comparison.  If the provided password matches the ADMIN_PASSWORD, access is granted.  There's no salting or hashing of passwords, making it trivial to crack if the password is weak or the environment variable is compromised.", "line": 6, "file": "ayth.py", "confidence": 1.0}], "total_issues": 3, "severity_breakdown": {"critical": 3, "high": 0, "medium": 0, "low": 0}, "decision": {"decision": "BLOCK", "risk_level": "critical", "summary": "Found 3 critical security issues", "recommendations": ["Fix critical security issues immediately", "Review security best practices"]}, "errors": [], "analysis_method": "agent_system"}, "error": null}, "54c6f434-6dbf-4513-ab0b-145f4ba2e25b": {"id": "54c6f434-6dbf-4513-ab0b-145f4ba2e25b", "type": "pr", "pr_url": "https://github.com/virattt/ai-hedge-fund/pull/306", "status": "completed", "mode": "standard", "created_at": "2025-07-27T15:58:12.356034", "started_at": "2025-07-27T15:58:13.264099", "completed_at": "2025-07-27T15:58:30.853120", "results": {"error": "Error during PR analysis: Failed to initialize embedding model: SentenceTransformer.__init__() got an unexpected keyword argument 'torch_dtype'", "errors": ["Error during PR analysis: Failed to initialize embedding model: SentenceTransformer.__init__() got an unexpected keyword argument 'torch_dtype'"]}, "error": null}, "795a834d-703c-4f4e-8021-1c409df1345f": {"id": "795a834d-703c-4f4e-8021-1c409df1345f", "type": "pr", "pr_url": "https://github.com/virattt/ai-hedge-fund/pull/306", "status": "completed", "mode": "standard", "created_at": "2025-07-27T16:20:14.452519", "started_at": "2025-07-27T16:20:15.474850", "completed_at": "2025-07-27T16:20:48.877637", "results": {"security_issues": [], "quality_issues": [], "logic_issues": [], "decision": {}, "pr_details": {"id": 2536944201, "number": 306, "title": "Argument --llm argument to main.py too", "body": "To specify the LLM provider and model, use the `--llm` argument in the format `Provider:Model` (e.g., `Openai:gpt-4`, `Ollama:llama3`). This will override the interactive model selection.\r\n\r\n```bash\r\n# With Poetry:\r\npoetry run python src/main.py --ticker AAPL,MSFT,NVDA --llm Openai:gpt-4\r\npoetry run python src/main.py --ticker AAPL,MSFT,NVDA --llm Ollama:llama3\r\n\r\n# With Docker (on Linux/Mac):\r\n./run.sh --ticker AAPL,MSFT,NVDA --llm Openai:gpt-4\r\n\r\n# With Docker (on Windows):\r\nrun.bat --ticker AAPL,MSFT,NVDA --llm Openai:gpt-4\r\n```\r\n\r\nIf you do not specify `--llm`, you will be prompted to select a provider and model interactively.\r\n\r\n\r\nREADME also updated", "state": "open", "created_at": "2025-05-22 11:43:33+00:00", "updated_at": "2025-05-22 11:44:42+00:00", "closed_at": null, "merged_at": null, "merge_commit_sha": null, "author": "Romamo", "assignees": [], "reviewers": [], "labels": [], "milestone": null, "base_branch": "main", "head_branch": "argument-llm-main", "base_sha": "ab8ce114e78e967948a3a48fe1206becc540e232", "head_sha": "60dc3133c3c89158a2c9fb7c80cd4f106dfb5324", "mergeable": false, "mergeable_state": "dirty", "merged": false, "comments": 0, "review_comments": 0, "commits": 5, "additions": 64, "deletions": 18, "changed_files": 3, "files": [{"filename": "README.md", "status": "modified", "additions": 17, "deletions": 13, "changes": 30, "patch": "@@ -147,6 +147,22 @@ run.bat --ticker AAPL,MSFT,NVDA main\n **Example Output:**\n <img width=\"992\" alt=\"Screenshot 2025-01-06 at 5 50 17 PM\" src=\"https://github.com/user-attachments/assets/e8ca04bf-9989-4a7d-a8b4-34e04666663b\" />\n \n+To specify the LLM provider and model, use the `--llm` argument in the format `Provider:Model` (e.g., `Openai:gpt-4`, `Ollama:llama3`). This will override the interactive model selection.\n+\n+```bash\n+# With Poetry:\n+poetry run python src/main.py --ticker AAPL,MSFT,NVDA --llm Openai:gpt-4\n+poetry run python src/main.py --ticker AAPL,MSFT,NVDA --llm Ollama:llama3\n+\n+# With Docker (on Linux/Mac):\n+./run.sh --ticker AAPL,MSFT,NVDA --llm Openai:gpt-4\n+\n+# With Docker (on Windows):\n+run.bat --ticker AAPL,MSFT,NVDA --llm Openai:gpt-4\n+```\n+\n+If you do not specify `--llm`, you will be prompted to select a provider and model interactively.\n+\n You can also specify a `--ollama` flag to run the AI hedge fund using local LLMs.\n \n ```bash\n@@ -205,6 +221,7 @@ run.bat --ticker AAPL,MSFT,NVDA backtest\n **Example Output:**\n <img width=\"941\" alt=\"Screenshot 2025-01-06 at 5 47 52 PM\" src=\"https://github.com/user-attachments/assets/00e794ea-8628-44e6-9a84-8f8a31ad3b47\" />\n \n+To specify the LLM provider and model, use the `--llm` argument the same way as for the Hedge Fund.\n \n You can optionally specify the start and end dates to backtest over a specific time period.\n \n@@ -219,19 +236,6 @@ poetry run python src/backtester.py --ticker AAPL,MSFT,NVDA --start-date 2024-01\n run.bat --ticker AAPL,MSFT,NVDA --start-date 2024-01-01 --end-date 2024-03-01 backtest\n ```\n \n-You can also specify a `--ollama` flag to run the backtester using local LLMs.\n-```bash\n-# With Poetry:\n-poetry run python src/backtester.py --ticker AAPL,MSFT,NVDA --ollama\n-\n-# With Docker (on Linux/Mac):\n-./run.sh --ticker AAPL,MSFT,NVDA --ollama backtest\n-\n-# With Docker (on Windows):\n-run.bat --ticker AAPL,MSFT,NVDA --ollama backtest\n-```\n-\n-\n ## Project Structure \n ```\n ai-hedge-fund/", "blob_url": "https://github.com/virattt/ai-hedge-fund/blob/60dc3133c3c89158a2c9fb7c80cd4f106dfb5324/README.md", "raw_url": "https://github.com/virattt/ai-hedge-fund/raw/60dc3133c3c89158a2c9fb7c80cd4f106dfb5324/README.md", "contents_url": "https://api.github.com/repos/virattt/ai-hedge-fund/contents/README.md?ref=60dc3133c3c89158a2c9fb7c80cd4f106dfb5324"}, {"filename": "src/backtester.py", "status": "modified", "additions": 23, "deletions": 2, "changes": 25, "patch": "@@ -651,6 +651,12 @@ def analyze_performance(self):\n         action=\"store_true\",\n         help=\"Use all available analysts (overrides --analysts)\",\n     )\n+    parser.add_argument(\n+        \"--llm\",\n+        type=str,\n+        default=None,\n+        help=\"Specify LLM as provider:model (e.g., Openai:gpt-4, Ollama:llama3) to override interactive selection\",\n+    )\n     parser.add_argument(\"--ollama\", action=\"store_true\", help=\"Use Ollama for local LLM inference\")\n \n     args = parser.parse_args()\n@@ -687,11 +693,26 @@ def analyze_performance(self):\n             selected_analysts = choices\n             print(f\"\\nSelected analysts: \" f\"{', '.join(Fore.GREEN + choice.title().replace('_', ' ') + Style.RESET_ALL for choice in choices)}\")\n \n-    # Select LLM model based on whether Ollama is being used\n+    # Select LLM model based on argument or interactive selection\n     model_name = \"\"\n     model_provider = None\n \n-    if args.ollama:\n+    # If command-line LLM is provided, use it directly\n+    if args.llm is not None:\n+        if ':' not in args.llm:\n+            print(f\"{Fore.RED}--llm argument must be in provider:model format (e.g., openai:gpt-4){Style.RESET_ALL}\")\n+            sys.exit(1)\n+        model_provider, model_name = args.llm.split(':', 1)\n+        if model_provider.lower() == ModelProvider.OLLAMA.value:\n+            # For Ollama, ensure model is available\n+            if not ensure_ollama_and_model(model_name):\n+                print(f\"{Fore.RED}Cannot proceed without Ollama and the selected model.{Style.RESET_ALL}\")\n+                sys.exit(1)\n+            print(f\"\\nSelected {Fore.CYAN}Ollama{Style.RESET_ALL} model: {Fore.GREEN + Style.BRIGHT}{model_name}{Style.RESET_ALL}\\n\")\n+            model_provider = ModelProvider.OLLAMA.value\n+        else:\n+            print(f\"\\nSelected {Fore.CYAN}{model_provider}{Style.RESET_ALL} model: {Fore.GREEN + Style.BRIGHT}{model_name}{Style.RESET_ALL}\\n\")\n+    elif args.ollama:\n         print(f\"{Fore.CYAN}Using Ollama for local LLM inference.{Style.RESET_ALL}\")\n \n         # Select from Ollama-specific models", "blob_url": "https://github.com/virattt/ai-hedge-fund/blob/60dc3133c3c89158a2c9fb7c80cd4f106dfb5324/src%2Fbacktester.py", "raw_url": "https://github.com/virattt/ai-hedge-fund/raw/60dc3133c3c89158a2c9fb7c80cd4f106dfb5324/src%2Fbacktester.py", "contents_url": "https://api.github.com/repos/virattt/ai-hedge-fund/contents/src%2Fbacktester.py?ref=60dc3133c3c89158a2c9fb7c80cd4f106dfb5324"}, {"filename": "src/main.py", "status": "modified", "additions": 24, "deletions": 3, "changes": 27, "patch": "@@ -145,6 +145,12 @@ def create_workflow(selected_analysts=None):\n     parser.add_argument(\"--end-date\", type=str, help=\"End date (YYYY-MM-DD). Defaults to today\")\n     parser.add_argument(\"--show-reasoning\", action=\"store_true\", help=\"Show reasoning from each agent\")\n     parser.add_argument(\"--show-agent-graph\", action=\"store_true\", help=\"Show the agent graph\")\n+    parser.add_argument(\n+        \"--llm\",\n+        type=str,\n+        default=None,\n+        help=\"Specify LLM as provider:model (e.g., Openai:gpt-4, Ollama:llama3) to override interactive selection\",\n+    )\n     parser.add_argument(\"--ollama\", action=\"store_true\", help=\"Use Ollama for local LLM inference\")\n \n     args = parser.parse_args()\n@@ -176,11 +182,26 @@ def create_workflow(selected_analysts=None):\n         selected_analysts = choices\n         print(f\"\\nSelected analysts: {', '.join(Fore.GREEN + choice.title().replace('_', ' ') + Style.RESET_ALL for choice in choices)}\\n\")\n \n-    # Select LLM model based on whether Ollama is being used\n+    # Select LLM model based on argument or interactive selection\n     model_name = \"\"\n     model_provider = \"\"\n \n-    if args.ollama:\n+    # If command-line LLM is provided, use it directly\n+    if args.llm is not None:\n+        if ':' not in args.llm:\n+            print(f\"{Fore.RED}--llm argument must be in provider:model format (e.g., Openai:gpt-4){Style.RESET_ALL}\")\n+            sys.exit(1)\n+        model_provider, model_name = args.llm.split(':', 1)\n+        if model_provider.lower() == ModelProvider.OLLAMA.value:\n+            # For Ollama, ensure model is available\n+            if not ensure_ollama_and_model(model_name):\n+                print(f\"{Fore.RED}Cannot proceed without Ollama and the selected model.{Style.RESET_ALL}\")\n+                sys.exit(1)\n+            print(f\"\\nSelected {Fore.CYAN}Ollama{Style.RESET_ALL} model: {Fore.GREEN + Style.BRIGHT}{model_name}{Style.RESET_ALL}\\n\")\n+            model_provider = ModelProvider.OLLAMA.value\n+        else:\n+            print(f\"\\nSelected {Fore.CYAN}{model_provider}{Style.RESET_ALL} model: {Fore.GREEN + Style.BRIGHT}{model_name}{Style.RESET_ALL}\\n\")\n+    elif args.ollama:\n         print(f\"{Fore.CYAN}Using Ollama for local LLM inference.{Style.RESET_ALL}\")\n \n         # Select from Ollama-specific models\n@@ -232,7 +253,7 @@ def create_workflow(selected_analysts=None):\n         if not model_choice:\n             print(\"\\n\\nInterrupt received. Exiting...\")\n             sys.exit(0)\n-\n+        \n         model_name, model_provider = model_choice\n \n         # Get model info using the helper function", "blob_url": "https://github.com/virattt/ai-hedge-fund/blob/60dc3133c3c89158a2c9fb7c80cd4f106dfb5324/src%2Fmain.py", "raw_url": "https://github.com/virattt/ai-hedge-fund/raw/60dc3133c3c89158a2c9fb7c80cd4f106dfb5324/src%2Fmain.py", "contents_url": "https://api.github.com/repos/virattt/ai-hedge-fund/contents/src%2Fmain.py?ref=60dc3133c3c89158a2c9fb7c80cd4f106dfb5324"}], "commits_data": [{"sha": "f3a21a57084553621c55fc11ffd9dab683ac59dd", "message": "Added command line argument to choose llm model", "author": "Romamo", "date": "2025-05-22 08:44:25+00:00", "url": "https://github.com/virattt/ai-hedge-fund/commit/f3a21a57084553621c55fc11ffd9dab683ac59dd"}, {"sha": "db3727cb36b95807089bfe943a8cf95da4c1294a", "message": "Removed wrongly added line", "author": "Romamo", "date": "2025-05-22 11:02:39+00:00", "url": "https://github.com/virattt/ai-hedge-fund/commit/db3727cb36b95807089bfe943a8cf95da4c1294a"}, {"sha": "94e3627ac3890dd11d3f3894f019e12cf471c3b9", "message": "Updated readme", "author": "Romamo", "date": "2025-05-22 11:27:47+00:00", "url": "https://github.com/virattt/ai-hedge-fund/commit/94e3627ac3890dd11d3f3894f019e12cf471c3b9"}, {"sha": "60e79c13a2ee4c49c9d0ab4257a932fba4870f9e", "message": "Added --llm argument to main.py too", "author": "Romamo", "date": "2025-05-22 11:42:27+00:00", "url": "https://github.com/virattt/ai-hedge-fund/commit/60e79c13a2ee4c49c9d0ab4257a932fba4870f9e"}, {"sha": "60dc3133c3c89158a2c9fb7c80cd4f106dfb5324", "message": "Added --llm argument to main.py too", "author": "Romamo", "date": "2025-05-22 11:44:36+00:00", "url": "https://github.com/virattt/ai-hedge-fund/commit/60dc3133c3c89158a2c9fb7c80cd4f106dfb5324"}], "reviews": [], "html_url": "https://github.com/virattt/ai-hedge-fund/pull/306", "diff_url": "https://github.com/virattt/ai-hedge-fund/pull/306.diff", "patch_url": "https://github.com/virattt/ai-hedge-fund/pull/306.patch"}, "analysis_duration": 8.833893775939941, "total_issues": 0}, "error": null}, "705f231b-296c-4727-b9d9-cddc239406dc": {"id": "705f231b-296c-4727-b9d9-cddc239406dc", "type": "pr", "pr_url": "https://github.com/virattt/ai-hedge-fund/pull/306", "status": "completed", "mode": "deep", "created_at": "2025-07-27T16:21:54.921922", "started_at": "2025-07-27T16:21:55.661360", "completed_at": "2025-07-27T16:22:13.876139", "results": {"error": "Error during PR analysis: Failed to initialize embedding model: Cannot copy out of meta tensor; no data! Please use torch.nn.Module.to_empty() instead of torch.nn.Module.to() when moving module from meta to a different device.", "errors": ["Error during PR analysis: Failed to initialize embedding model: Cannot copy out of meta tensor; no data! Please use torch.nn.Module.to_empty() instead of torch.nn.Module.to() when moving module from meta to a different device."]}, "error": null}, "c3dea0f8-ba99-463a-8e20-83a3b8fa0745": {"id": "c3dea0f8-ba99-463a-8e20-83a3b8fa0745", "type": "pr", "pr_url": "https://github.com/virattt/ai-hedge-fund/pull/306", "status": "completed", "mode": "standard", "created_at": "2025-07-27T16:24:39.518753", "started_at": "2025-07-27T16:24:39.656292", "completed_at": "2025-07-27T16:25:08.261751", "results": {"error": "Error during PR analysis: Failed to initialize embedding model: 1 validation error for HuggingFaceEmbeddings\nclient\n  Extra inputs are not permitted [type=extra_forbidden, input_value=SentenceTransformer(\n  (0...e})\n  (2): Normalize()\n), input_type=SentenceTransformer]\n    For further information visit https://errors.pydantic.dev/2.11/v/extra_forbidden", "errors": ["Error during PR analysis: Failed to initialize embedding model: 1 validation error for HuggingFaceEmbeddings\nclient\n  Extra inputs are not permitted [type=extra_forbidden, input_value=SentenceTransformer(\n  (0...e})\n  (2): Normalize()\n), input_type=SentenceTransformer]\n    For further information visit https://errors.pydantic.dev/2.11/v/extra_forbidden"]}, "error": null}, "f7b18657-cff5-45a1-af44-3617eefb1cea": {"id": "f7b18657-cff5-45a1-af44-3617eefb1cea", "type": "pr", "pr_url": "https://github.com/virattt/ai-hedge-fund/pull/306", "status": "completed", "mode": "standard", "created_at": "2025-07-27T16:30:03.834088", "started_at": "2025-07-27T16:30:04.696036", "completed_at": "2025-07-27T16:30:42.316155", "results": {"security_issues": [], "quality_issues": [], "logic_issues": [], "decision": {}, "pr_details": {"id": 2536944201, "number": 306, "title": "Argument --llm argument to main.py too", "body": "To specify the LLM provider and model, use the `--llm` argument in the format `Provider:Model` (e.g., `Openai:gpt-4`, `Ollama:llama3`). This will override the interactive model selection.\r\n\r\n```bash\r\n# With Poetry:\r\npoetry run python src/main.py --ticker AAPL,MSFT,NVDA --llm Openai:gpt-4\r\npoetry run python src/main.py --ticker AAPL,MSFT,NVDA --llm Ollama:llama3\r\n\r\n# With Docker (on Linux/Mac):\r\n./run.sh --ticker AAPL,MSFT,NVDA --llm Openai:gpt-4\r\n\r\n# With Docker (on Windows):\r\nrun.bat --ticker AAPL,MSFT,NVDA --llm Openai:gpt-4\r\n```\r\n\r\nIf you do not specify `--llm`, you will be prompted to select a provider and model interactively.\r\n\r\n\r\nREADME also updated", "state": "open", "created_at": "2025-05-22 11:43:33+00:00", "updated_at": "2025-05-22 11:44:42+00:00", "closed_at": null, "merged_at": null, "merge_commit_sha": null, "author": "Romamo", "assignees": [], "reviewers": [], "labels": [], "milestone": null, "base_branch": "main", "head_branch": "argument-llm-main", "base_sha": "ab8ce114e78e967948a3a48fe1206becc540e232", "head_sha": "60dc3133c3c89158a2c9fb7c80cd4f106dfb5324", "mergeable": false, "mergeable_state": "dirty", "merged": false, "comments": 0, "review_comments": 0, "commits": 5, "additions": 64, "deletions": 18, "changed_files": 3, "files": [{"filename": "README.md", "status": "modified", "additions": 17, "deletions": 13, "changes": 30, "patch": "@@ -147,6 +147,22 @@ run.bat --ticker AAPL,MSFT,NVDA main\n **Example Output:**\n <img width=\"992\" alt=\"Screenshot 2025-01-06 at 5 50 17 PM\" src=\"https://github.com/user-attachments/assets/e8ca04bf-9989-4a7d-a8b4-34e04666663b\" />\n \n+To specify the LLM provider and model, use the `--llm` argument in the format `Provider:Model` (e.g., `Openai:gpt-4`, `Ollama:llama3`). This will override the interactive model selection.\n+\n+```bash\n+# With Poetry:\n+poetry run python src/main.py --ticker AAPL,MSFT,NVDA --llm Openai:gpt-4\n+poetry run python src/main.py --ticker AAPL,MSFT,NVDA --llm Ollama:llama3\n+\n+# With Docker (on Linux/Mac):\n+./run.sh --ticker AAPL,MSFT,NVDA --llm Openai:gpt-4\n+\n+# With Docker (on Windows):\n+run.bat --ticker AAPL,MSFT,NVDA --llm Openai:gpt-4\n+```\n+\n+If you do not specify `--llm`, you will be prompted to select a provider and model interactively.\n+\n You can also specify a `--ollama` flag to run the AI hedge fund using local LLMs.\n \n ```bash\n@@ -205,6 +221,7 @@ run.bat --ticker AAPL,MSFT,NVDA backtest\n **Example Output:**\n <img width=\"941\" alt=\"Screenshot 2025-01-06 at 5 47 52 PM\" src=\"https://github.com/user-attachments/assets/00e794ea-8628-44e6-9a84-8f8a31ad3b47\" />\n \n+To specify the LLM provider and model, use the `--llm` argument the same way as for the Hedge Fund.\n \n You can optionally specify the start and end dates to backtest over a specific time period.\n \n@@ -219,19 +236,6 @@ poetry run python src/backtester.py --ticker AAPL,MSFT,NVDA --start-date 2024-01\n run.bat --ticker AAPL,MSFT,NVDA --start-date 2024-01-01 --end-date 2024-03-01 backtest\n ```\n \n-You can also specify a `--ollama` flag to run the backtester using local LLMs.\n-```bash\n-# With Poetry:\n-poetry run python src/backtester.py --ticker AAPL,MSFT,NVDA --ollama\n-\n-# With Docker (on Linux/Mac):\n-./run.sh --ticker AAPL,MSFT,NVDA --ollama backtest\n-\n-# With Docker (on Windows):\n-run.bat --ticker AAPL,MSFT,NVDA --ollama backtest\n-```\n-\n-\n ## Project Structure \n ```\n ai-hedge-fund/", "blob_url": "https://github.com/virattt/ai-hedge-fund/blob/60dc3133c3c89158a2c9fb7c80cd4f106dfb5324/README.md", "raw_url": "https://github.com/virattt/ai-hedge-fund/raw/60dc3133c3c89158a2c9fb7c80cd4f106dfb5324/README.md", "contents_url": "https://api.github.com/repos/virattt/ai-hedge-fund/contents/README.md?ref=60dc3133c3c89158a2c9fb7c80cd4f106dfb5324"}, {"filename": "src/backtester.py", "status": "modified", "additions": 23, "deletions": 2, "changes": 25, "patch": "@@ -651,6 +651,12 @@ def analyze_performance(self):\n         action=\"store_true\",\n         help=\"Use all available analysts (overrides --analysts)\",\n     )\n+    parser.add_argument(\n+        \"--llm\",\n+        type=str,\n+        default=None,\n+        help=\"Specify LLM as provider:model (e.g., Openai:gpt-4, Ollama:llama3) to override interactive selection\",\n+    )\n     parser.add_argument(\"--ollama\", action=\"store_true\", help=\"Use Ollama for local LLM inference\")\n \n     args = parser.parse_args()\n@@ -687,11 +693,26 @@ def analyze_performance(self):\n             selected_analysts = choices\n             print(f\"\\nSelected analysts: \" f\"{', '.join(Fore.GREEN + choice.title().replace('_', ' ') + Style.RESET_ALL for choice in choices)}\")\n \n-    # Select LLM model based on whether Ollama is being used\n+    # Select LLM model based on argument or interactive selection\n     model_name = \"\"\n     model_provider = None\n \n-    if args.ollama:\n+    # If command-line LLM is provided, use it directly\n+    if args.llm is not None:\n+        if ':' not in args.llm:\n+            print(f\"{Fore.RED}--llm argument must be in provider:model format (e.g., openai:gpt-4){Style.RESET_ALL}\")\n+            sys.exit(1)\n+        model_provider, model_name = args.llm.split(':', 1)\n+        if model_provider.lower() == ModelProvider.OLLAMA.value:\n+            # For Ollama, ensure model is available\n+            if not ensure_ollama_and_model(model_name):\n+                print(f\"{Fore.RED}Cannot proceed without Ollama and the selected model.{Style.RESET_ALL}\")\n+                sys.exit(1)\n+            print(f\"\\nSelected {Fore.CYAN}Ollama{Style.RESET_ALL} model: {Fore.GREEN + Style.BRIGHT}{model_name}{Style.RESET_ALL}\\n\")\n+            model_provider = ModelProvider.OLLAMA.value\n+        else:\n+            print(f\"\\nSelected {Fore.CYAN}{model_provider}{Style.RESET_ALL} model: {Fore.GREEN + Style.BRIGHT}{model_name}{Style.RESET_ALL}\\n\")\n+    elif args.ollama:\n         print(f\"{Fore.CYAN}Using Ollama for local LLM inference.{Style.RESET_ALL}\")\n \n         # Select from Ollama-specific models", "blob_url": "https://github.com/virattt/ai-hedge-fund/blob/60dc3133c3c89158a2c9fb7c80cd4f106dfb5324/src%2Fbacktester.py", "raw_url": "https://github.com/virattt/ai-hedge-fund/raw/60dc3133c3c89158a2c9fb7c80cd4f106dfb5324/src%2Fbacktester.py", "contents_url": "https://api.github.com/repos/virattt/ai-hedge-fund/contents/src%2Fbacktester.py?ref=60dc3133c3c89158a2c9fb7c80cd4f106dfb5324"}, {"filename": "src/main.py", "status": "modified", "additions": 24, "deletions": 3, "changes": 27, "patch": "@@ -145,6 +145,12 @@ def create_workflow(selected_analysts=None):\n     parser.add_argument(\"--end-date\", type=str, help=\"End date (YYYY-MM-DD). Defaults to today\")\n     parser.add_argument(\"--show-reasoning\", action=\"store_true\", help=\"Show reasoning from each agent\")\n     parser.add_argument(\"--show-agent-graph\", action=\"store_true\", help=\"Show the agent graph\")\n+    parser.add_argument(\n+        \"--llm\",\n+        type=str,\n+        default=None,\n+        help=\"Specify LLM as provider:model (e.g., Openai:gpt-4, Ollama:llama3) to override interactive selection\",\n+    )\n     parser.add_argument(\"--ollama\", action=\"store_true\", help=\"Use Ollama for local LLM inference\")\n \n     args = parser.parse_args()\n@@ -176,11 +182,26 @@ def create_workflow(selected_analysts=None):\n         selected_analysts = choices\n         print(f\"\\nSelected analysts: {', '.join(Fore.GREEN + choice.title().replace('_', ' ') + Style.RESET_ALL for choice in choices)}\\n\")\n \n-    # Select LLM model based on whether Ollama is being used\n+    # Select LLM model based on argument or interactive selection\n     model_name = \"\"\n     model_provider = \"\"\n \n-    if args.ollama:\n+    # If command-line LLM is provided, use it directly\n+    if args.llm is not None:\n+        if ':' not in args.llm:\n+            print(f\"{Fore.RED}--llm argument must be in provider:model format (e.g., Openai:gpt-4){Style.RESET_ALL}\")\n+            sys.exit(1)\n+        model_provider, model_name = args.llm.split(':', 1)\n+        if model_provider.lower() == ModelProvider.OLLAMA.value:\n+            # For Ollama, ensure model is available\n+            if not ensure_ollama_and_model(model_name):\n+                print(f\"{Fore.RED}Cannot proceed without Ollama and the selected model.{Style.RESET_ALL}\")\n+                sys.exit(1)\n+            print(f\"\\nSelected {Fore.CYAN}Ollama{Style.RESET_ALL} model: {Fore.GREEN + Style.BRIGHT}{model_name}{Style.RESET_ALL}\\n\")\n+            model_provider = ModelProvider.OLLAMA.value\n+        else:\n+            print(f\"\\nSelected {Fore.CYAN}{model_provider}{Style.RESET_ALL} model: {Fore.GREEN + Style.BRIGHT}{model_name}{Style.RESET_ALL}\\n\")\n+    elif args.ollama:\n         print(f\"{Fore.CYAN}Using Ollama for local LLM inference.{Style.RESET_ALL}\")\n \n         # Select from Ollama-specific models\n@@ -232,7 +253,7 @@ def create_workflow(selected_analysts=None):\n         if not model_choice:\n             print(\"\\n\\nInterrupt received. Exiting...\")\n             sys.exit(0)\n-\n+        \n         model_name, model_provider = model_choice\n \n         # Get model info using the helper function", "blob_url": "https://github.com/virattt/ai-hedge-fund/blob/60dc3133c3c89158a2c9fb7c80cd4f106dfb5324/src%2Fmain.py", "raw_url": "https://github.com/virattt/ai-hedge-fund/raw/60dc3133c3c89158a2c9fb7c80cd4f106dfb5324/src%2Fmain.py", "contents_url": "https://api.github.com/repos/virattt/ai-hedge-fund/contents/src%2Fmain.py?ref=60dc3133c3c89158a2c9fb7c80cd4f106dfb5324"}], "commits_data": [{"sha": "f3a21a57084553621c55fc11ffd9dab683ac59dd", "message": "Added command line argument to choose llm model", "author": "Romamo", "date": "2025-05-22 08:44:25+00:00", "url": "https://github.com/virattt/ai-hedge-fund/commit/f3a21a57084553621c55fc11ffd9dab683ac59dd"}, {"sha": "db3727cb36b95807089bfe943a8cf95da4c1294a", "message": "Removed wrongly added line", "author": "Romamo", "date": "2025-05-22 11:02:39+00:00", "url": "https://github.com/virattt/ai-hedge-fund/commit/db3727cb36b95807089bfe943a8cf95da4c1294a"}, {"sha": "94e3627ac3890dd11d3f3894f019e12cf471c3b9", "message": "Updated readme", "author": "Romamo", "date": "2025-05-22 11:27:47+00:00", "url": "https://github.com/virattt/ai-hedge-fund/commit/94e3627ac3890dd11d3f3894f019e12cf471c3b9"}, {"sha": "60e79c13a2ee4c49c9d0ab4257a932fba4870f9e", "message": "Added --llm argument to main.py too", "author": "Romamo", "date": "2025-05-22 11:42:27+00:00", "url": "https://github.com/virattt/ai-hedge-fund/commit/60e79c13a2ee4c49c9d0ab4257a932fba4870f9e"}, {"sha": "60dc3133c3c89158a2c9fb7c80cd4f106dfb5324", "message": "Added --llm argument to main.py too", "author": "Romamo", "date": "2025-05-22 11:44:36+00:00", "url": "https://github.com/virattt/ai-hedge-fund/commit/60dc3133c3c89158a2c9fb7c80cd4f106dfb5324"}], "reviews": [], "html_url": "https://github.com/virattt/ai-hedge-fund/pull/306", "diff_url": "https://github.com/virattt/ai-hedge-fund/pull/306.diff", "patch_url": "https://github.com/virattt/ai-hedge-fund/pull/306.patch"}, "analysis_duration": 10.434433937072754, "total_issues": 0}, "error": null}, "45ca6b29-e9c7-4234-b565-f9e221be84d5": {"id": "45ca6b29-e9c7-4234-b565-f9e221be84d5", "type": "security", "code_snippets": [{"file_path": "auth.py", "content": "import os\nimport sqlite3\n\nADMIN_PASSWORD = os.getenv(\"ADMIN_PASSWORD\", \"superSecret123!\")\n\ndef login(username, password):\n    if password == ADMIN_PASSWORD:\n        return True\n    return False\n\ndef get_user_data(user_id):\n    connection = sqlite3.connect(\"app.db\")\n    cursor = connection.cursor()\n    cursor.execute(\"SELECT * FROM users WHERE id = ?\", (user_id,))\n    result = cursor.fetchone()\n    connection.close()\n \u00a0\u00a0\u00a0return\u00a0result\n", "language": "python"}], "status": "completed", "created_at": "2025-07-27T16:33:34.403245", "started_at": "2025-07-27T16:33:35.517563", "completed_at": "2025-07-27T16:33:39.149444", "results": {"security_issues": [{"type": "Hardcoded passwords/secrets/API keys", "severity": "critical", "description": "The ADMIN_PASSWORD is either hardcoded or retrieved from an environment variable with a fallback to a hardcoded value.  This is a critical vulnerability as it allows attackers to gain admin access if they can access the environment variables or the code itself.", "line": 2, "file": "auth.py", "confidence": 1.0}, {"type": "SQL injection", "severity": "critical", "description": "The get_user_data function is vulnerable to SQL injection.  User-supplied input (user_id) is directly incorporated into the SQL query without proper sanitization or parameterization. An attacker could inject malicious SQL code to retrieve sensitive data or modify the database.", "line": 14, "file": "auth.py", "confidence": 1.0}, {"type": "Authentication bypass", "severity": "critical", "description": "The login function only checks if the provided password matches the ADMIN_PASSWORD. There's no user verification.  An attacker who knows the ADMIN_PASSWORD gains full access.", "line": 6, "file": "auth.py", "confidence": 1.0}, {"type": "Missing input validation", "severity": "medium", "description": "The get_user_data function does not validate the user_id input.  This could lead to unexpected behavior or errors if the input is not a valid integer or if it's formatted in a way that could cause issues with the database query.", "line": 14, "file": "auth.py", "confidence": 0.9}], "total_issues": 4, "severity_breakdown": {"critical": 3, "high": 0, "medium": 1, "low": 0}, "decision": {"decision": "BLOCK", "risk_level": "critical", "summary": "Found 3 critical security issues", "recommendations": ["Fix critical security issues immediately", "Review security best practices"]}, "errors": [], "analysis_method": "agent_system"}, "error": null}, "893084b7-0f16-43e5-902e-db0e9586d5a8": {"id": "893084b7-0f16-43e5-902e-db0e9586d5a8", "type": "pr", "pr_url": "https://github.com/virattt/ai-hedge-fund/pull/306", "status": "completed", "mode": "standard", "created_at": "2025-07-27T17:13:58.456109", "started_at": "2025-07-27T17:13:59.462423", "completed_at": "2025-07-27T17:14:31.189943", "results": {"error": "Error during PR analysis: Failed to initialize embedding model: Cannot copy out of meta tensor; no data! Please use torch.nn.Module.to_empty() instead of torch.nn.Module.to() when moving module from meta to a different device.", "errors": ["Error during PR analysis: Failed to initialize embedding model: Cannot copy out of meta tensor; no data! Please use torch.nn.Module.to_empty() instead of torch.nn.Module.to() when moving module from meta to a different device."]}, "error": null}, "4c9ecca1-d56b-4b3f-9aeb-360073559f0c": {"id": "4c9ecca1-d56b-4b3f-9aeb-360073559f0c", "type": "pr", "pr_url": "https://github.com/virattt/ai-hedge-fund/pull/306", "status": "completed", "mode": "standard", "created_at": "2025-07-27T17:21:57.111156", "started_at": "2025-07-27T17:21:57.352958", "completed_at": "2025-07-27T17:22:32.505201", "results": {"error": "Error during PR analysis: Failed to initialize embedding model: Cannot copy out of meta tensor; no data! Please use torch.nn.Module.to_empty() instead of torch.nn.Module.to() when moving module from meta to a different device.", "errors": ["Error during PR analysis: Failed to initialize embedding model: Cannot copy out of meta tensor; no data! Please use torch.nn.Module.to_empty() instead of torch.nn.Module.to() when moving module from meta to a different device."]}, "error": null}, "94a061d7-4176-49a5-b72d-fe9eaafcb3fa": {"id": "94a061d7-4176-49a5-b72d-fe9eaafcb3fa", "type": "pr", "pr_url": "https://github.com/virattt/ai-hedge-fund/pull/306", "status": "completed", "mode": "standard", "created_at": "2025-07-27T17:33:09.676875", "started_at": "2025-07-27T17:33:10.944821", "completed_at": "2025-07-27T17:33:43.643649", "results": {"security_issues": [], "quality_issues": [], "logic_issues": [], "decision": {}, "pr_details": {"id": 2536944201, "number": 306, "title": "Argument --llm argument to main.py too", "body": "To specify the LLM provider and model, use the `--llm` argument in the format `Provider:Model` (e.g., `Openai:gpt-4`, `Ollama:llama3`). This will override the interactive model selection.\r\n\r\n```bash\r\n# With Poetry:\r\npoetry run python src/main.py --ticker AAPL,MSFT,NVDA --llm Openai:gpt-4\r\npoetry run python src/main.py --ticker AAPL,MSFT,NVDA --llm Ollama:llama3\r\n\r\n# With Docker (on Linux/Mac):\r\n./run.sh --ticker AAPL,MSFT,NVDA --llm Openai:gpt-4\r\n\r\n# With Docker (on Windows):\r\nrun.bat --ticker AAPL,MSFT,NVDA --llm Openai:gpt-4\r\n```\r\n\r\nIf you do not specify `--llm`, you will be prompted to select a provider and model interactively.\r\n\r\n\r\nREADME also updated", "state": "open", "created_at": "2025-05-22 11:43:33+00:00", "updated_at": "2025-05-22 11:44:42+00:00", "closed_at": null, "merged_at": null, "merge_commit_sha": null, "author": "Romamo", "assignees": [], "reviewers": [], "labels": [], "milestone": null, "base_branch": "main", "head_branch": "argument-llm-main", "base_sha": "ab8ce114e78e967948a3a48fe1206becc540e232", "head_sha": "60dc3133c3c89158a2c9fb7c80cd4f106dfb5324", "mergeable": false, "mergeable_state": "dirty", "merged": false, "comments": 0, "review_comments": 0, "commits": 5, "additions": 64, "deletions": 18, "changed_files": 3, "files": [{"filename": "README.md", "status": "modified", "additions": 17, "deletions": 13, "changes": 30, "patch": "@@ -147,6 +147,22 @@ run.bat --ticker AAPL,MSFT,NVDA main\n **Example Output:**\n <img width=\"992\" alt=\"Screenshot 2025-01-06 at 5 50 17 PM\" src=\"https://github.com/user-attachments/assets/e8ca04bf-9989-4a7d-a8b4-34e04666663b\" />\n \n+To specify the LLM provider and model, use the `--llm` argument in the format `Provider:Model` (e.g., `Openai:gpt-4`, `Ollama:llama3`). This will override the interactive model selection.\n+\n+```bash\n+# With Poetry:\n+poetry run python src/main.py --ticker AAPL,MSFT,NVDA --llm Openai:gpt-4\n+poetry run python src/main.py --ticker AAPL,MSFT,NVDA --llm Ollama:llama3\n+\n+# With Docker (on Linux/Mac):\n+./run.sh --ticker AAPL,MSFT,NVDA --llm Openai:gpt-4\n+\n+# With Docker (on Windows):\n+run.bat --ticker AAPL,MSFT,NVDA --llm Openai:gpt-4\n+```\n+\n+If you do not specify `--llm`, you will be prompted to select a provider and model interactively.\n+\n You can also specify a `--ollama` flag to run the AI hedge fund using local LLMs.\n \n ```bash\n@@ -205,6 +221,7 @@ run.bat --ticker AAPL,MSFT,NVDA backtest\n **Example Output:**\n <img width=\"941\" alt=\"Screenshot 2025-01-06 at 5 47 52 PM\" src=\"https://github.com/user-attachments/assets/00e794ea-8628-44e6-9a84-8f8a31ad3b47\" />\n \n+To specify the LLM provider and model, use the `--llm` argument the same way as for the Hedge Fund.\n \n You can optionally specify the start and end dates to backtest over a specific time period.\n \n@@ -219,19 +236,6 @@ poetry run python src/backtester.py --ticker AAPL,MSFT,NVDA --start-date 2024-01\n run.bat --ticker AAPL,MSFT,NVDA --start-date 2024-01-01 --end-date 2024-03-01 backtest\n ```\n \n-You can also specify a `--ollama` flag to run the backtester using local LLMs.\n-```bash\n-# With Poetry:\n-poetry run python src/backtester.py --ticker AAPL,MSFT,NVDA --ollama\n-\n-# With Docker (on Linux/Mac):\n-./run.sh --ticker AAPL,MSFT,NVDA --ollama backtest\n-\n-# With Docker (on Windows):\n-run.bat --ticker AAPL,MSFT,NVDA --ollama backtest\n-```\n-\n-\n ## Project Structure \n ```\n ai-hedge-fund/", "blob_url": "https://github.com/virattt/ai-hedge-fund/blob/60dc3133c3c89158a2c9fb7c80cd4f106dfb5324/README.md", "raw_url": "https://github.com/virattt/ai-hedge-fund/raw/60dc3133c3c89158a2c9fb7c80cd4f106dfb5324/README.md", "contents_url": "https://api.github.com/repos/virattt/ai-hedge-fund/contents/README.md?ref=60dc3133c3c89158a2c9fb7c80cd4f106dfb5324"}, {"filename": "src/backtester.py", "status": "modified", "additions": 23, "deletions": 2, "changes": 25, "patch": "@@ -651,6 +651,12 @@ def analyze_performance(self):\n         action=\"store_true\",\n         help=\"Use all available analysts (overrides --analysts)\",\n     )\n+    parser.add_argument(\n+        \"--llm\",\n+        type=str,\n+        default=None,\n+        help=\"Specify LLM as provider:model (e.g., Openai:gpt-4, Ollama:llama3) to override interactive selection\",\n+    )\n     parser.add_argument(\"--ollama\", action=\"store_true\", help=\"Use Ollama for local LLM inference\")\n \n     args = parser.parse_args()\n@@ -687,11 +693,26 @@ def analyze_performance(self):\n             selected_analysts = choices\n             print(f\"\\nSelected analysts: \" f\"{', '.join(Fore.GREEN + choice.title().replace('_', ' ') + Style.RESET_ALL for choice in choices)}\")\n \n-    # Select LLM model based on whether Ollama is being used\n+    # Select LLM model based on argument or interactive selection\n     model_name = \"\"\n     model_provider = None\n \n-    if args.ollama:\n+    # If command-line LLM is provided, use it directly\n+    if args.llm is not None:\n+        if ':' not in args.llm:\n+            print(f\"{Fore.RED}--llm argument must be in provider:model format (e.g., openai:gpt-4){Style.RESET_ALL}\")\n+            sys.exit(1)\n+        model_provider, model_name = args.llm.split(':', 1)\n+        if model_provider.lower() == ModelProvider.OLLAMA.value:\n+            # For Ollama, ensure model is available\n+            if not ensure_ollama_and_model(model_name):\n+                print(f\"{Fore.RED}Cannot proceed without Ollama and the selected model.{Style.RESET_ALL}\")\n+                sys.exit(1)\n+            print(f\"\\nSelected {Fore.CYAN}Ollama{Style.RESET_ALL} model: {Fore.GREEN + Style.BRIGHT}{model_name}{Style.RESET_ALL}\\n\")\n+            model_provider = ModelProvider.OLLAMA.value\n+        else:\n+            print(f\"\\nSelected {Fore.CYAN}{model_provider}{Style.RESET_ALL} model: {Fore.GREEN + Style.BRIGHT}{model_name}{Style.RESET_ALL}\\n\")\n+    elif args.ollama:\n         print(f\"{Fore.CYAN}Using Ollama for local LLM inference.{Style.RESET_ALL}\")\n \n         # Select from Ollama-specific models", "blob_url": "https://github.com/virattt/ai-hedge-fund/blob/60dc3133c3c89158a2c9fb7c80cd4f106dfb5324/src%2Fbacktester.py", "raw_url": "https://github.com/virattt/ai-hedge-fund/raw/60dc3133c3c89158a2c9fb7c80cd4f106dfb5324/src%2Fbacktester.py", "contents_url": "https://api.github.com/repos/virattt/ai-hedge-fund/contents/src%2Fbacktester.py?ref=60dc3133c3c89158a2c9fb7c80cd4f106dfb5324"}, {"filename": "src/main.py", "status": "modified", "additions": 24, "deletions": 3, "changes": 27, "patch": "@@ -145,6 +145,12 @@ def create_workflow(selected_analysts=None):\n     parser.add_argument(\"--end-date\", type=str, help=\"End date (YYYY-MM-DD). Defaults to today\")\n     parser.add_argument(\"--show-reasoning\", action=\"store_true\", help=\"Show reasoning from each agent\")\n     parser.add_argument(\"--show-agent-graph\", action=\"store_true\", help=\"Show the agent graph\")\n+    parser.add_argument(\n+        \"--llm\",\n+        type=str,\n+        default=None,\n+        help=\"Specify LLM as provider:model (e.g., Openai:gpt-4, Ollama:llama3) to override interactive selection\",\n+    )\n     parser.add_argument(\"--ollama\", action=\"store_true\", help=\"Use Ollama for local LLM inference\")\n \n     args = parser.parse_args()\n@@ -176,11 +182,26 @@ def create_workflow(selected_analysts=None):\n         selected_analysts = choices\n         print(f\"\\nSelected analysts: {', '.join(Fore.GREEN + choice.title().replace('_', ' ') + Style.RESET_ALL for choice in choices)}\\n\")\n \n-    # Select LLM model based on whether Ollama is being used\n+    # Select LLM model based on argument or interactive selection\n     model_name = \"\"\n     model_provider = \"\"\n \n-    if args.ollama:\n+    # If command-line LLM is provided, use it directly\n+    if args.llm is not None:\n+        if ':' not in args.llm:\n+            print(f\"{Fore.RED}--llm argument must be in provider:model format (e.g., Openai:gpt-4){Style.RESET_ALL}\")\n+            sys.exit(1)\n+        model_provider, model_name = args.llm.split(':', 1)\n+        if model_provider.lower() == ModelProvider.OLLAMA.value:\n+            # For Ollama, ensure model is available\n+            if not ensure_ollama_and_model(model_name):\n+                print(f\"{Fore.RED}Cannot proceed without Ollama and the selected model.{Style.RESET_ALL}\")\n+                sys.exit(1)\n+            print(f\"\\nSelected {Fore.CYAN}Ollama{Style.RESET_ALL} model: {Fore.GREEN + Style.BRIGHT}{model_name}{Style.RESET_ALL}\\n\")\n+            model_provider = ModelProvider.OLLAMA.value\n+        else:\n+            print(f\"\\nSelected {Fore.CYAN}{model_provider}{Style.RESET_ALL} model: {Fore.GREEN + Style.BRIGHT}{model_name}{Style.RESET_ALL}\\n\")\n+    elif args.ollama:\n         print(f\"{Fore.CYAN}Using Ollama for local LLM inference.{Style.RESET_ALL}\")\n \n         # Select from Ollama-specific models\n@@ -232,7 +253,7 @@ def create_workflow(selected_analysts=None):\n         if not model_choice:\n             print(\"\\n\\nInterrupt received. Exiting...\")\n             sys.exit(0)\n-\n+        \n         model_name, model_provider = model_choice\n \n         # Get model info using the helper function", "blob_url": "https://github.com/virattt/ai-hedge-fund/blob/60dc3133c3c89158a2c9fb7c80cd4f106dfb5324/src%2Fmain.py", "raw_url": "https://github.com/virattt/ai-hedge-fund/raw/60dc3133c3c89158a2c9fb7c80cd4f106dfb5324/src%2Fmain.py", "contents_url": "https://api.github.com/repos/virattt/ai-hedge-fund/contents/src%2Fmain.py?ref=60dc3133c3c89158a2c9fb7c80cd4f106dfb5324"}], "commits_data": [{"sha": "f3a21a57084553621c55fc11ffd9dab683ac59dd", "message": "Added command line argument to choose llm model", "author": "Romamo", "date": "2025-05-22 08:44:25+00:00", "url": "https://github.com/virattt/ai-hedge-fund/commit/f3a21a57084553621c55fc11ffd9dab683ac59dd"}, {"sha": "db3727cb36b95807089bfe943a8cf95da4c1294a", "message": "Removed wrongly added line", "author": "Romamo", "date": "2025-05-22 11:02:39+00:00", "url": "https://github.com/virattt/ai-hedge-fund/commit/db3727cb36b95807089bfe943a8cf95da4c1294a"}, {"sha": "94e3627ac3890dd11d3f3894f019e12cf471c3b9", "message": "Updated readme", "author": "Romamo", "date": "2025-05-22 11:27:47+00:00", "url": "https://github.com/virattt/ai-hedge-fund/commit/94e3627ac3890dd11d3f3894f019e12cf471c3b9"}, {"sha": "60e79c13a2ee4c49c9d0ab4257a932fba4870f9e", "message": "Added --llm argument to main.py too", "author": "Romamo", "date": "2025-05-22 11:42:27+00:00", "url": "https://github.com/virattt/ai-hedge-fund/commit/60e79c13a2ee4c49c9d0ab4257a932fba4870f9e"}, {"sha": "60dc3133c3c89158a2c9fb7c80cd4f106dfb5324", "message": "Added --llm argument to main.py too", "author": "Romamo", "date": "2025-05-22 11:44:36+00:00", "url": "https://github.com/virattt/ai-hedge-fund/commit/60dc3133c3c89158a2c9fb7c80cd4f106dfb5324"}], "reviews": [], "html_url": "https://github.com/virattt/ai-hedge-fund/pull/306", "diff_url": "https://github.com/virattt/ai-hedge-fund/pull/306.diff", "patch_url": "https://github.com/virattt/ai-hedge-fund/pull/306.patch"}, "analysis_duration": 10.231552600860596, "total_issues": 0}, "error": null}, "2c643fda-7b80-4e83-90b2-440f2a0e0988": {"id": "2c643fda-7b80-4e83-90b2-440f2a0e0988", "type": "pr", "pr_url": "https://github.com/virattt/ai-hedge-fund/pull/306", "status": "completed", "mode": "standard", "created_at": "2025-07-27T17:40:34.397676", "started_at": "2025-07-27T17:40:35.372674", "completed_at": "2025-07-27T17:42:26.294480", "results": {"security_issues": [], "quality_issues": [], "logic_issues": [], "decision": {}, "pr_details": {"id": 2536944201, "number": 306, "title": "Argument --llm argument to main.py too", "body": "To specify the LLM provider and model, use the `--llm` argument in the format `Provider:Model` (e.g., `Openai:gpt-4`, `Ollama:llama3`). This will override the interactive model selection.\r\n\r\n```bash\r\n# With Poetry:\r\npoetry run python src/main.py --ticker AAPL,MSFT,NVDA --llm Openai:gpt-4\r\npoetry run python src/main.py --ticker AAPL,MSFT,NVDA --llm Ollama:llama3\r\n\r\n# With Docker (on Linux/Mac):\r\n./run.sh --ticker AAPL,MSFT,NVDA --llm Openai:gpt-4\r\n\r\n# With Docker (on Windows):\r\nrun.bat --ticker AAPL,MSFT,NVDA --llm Openai:gpt-4\r\n```\r\n\r\nIf you do not specify `--llm`, you will be prompted to select a provider and model interactively.\r\n\r\n\r\nREADME also updated", "state": "open", "created_at": "2025-05-22 11:43:33+00:00", "updated_at": "2025-05-22 11:44:42+00:00", "closed_at": null, "merged_at": null, "merge_commit_sha": null, "author": "Romamo", "assignees": [], "reviewers": [], "labels": [], "milestone": null, "base_branch": "main", "head_branch": "argument-llm-main", "base_sha": "ab8ce114e78e967948a3a48fe1206becc540e232", "head_sha": "60dc3133c3c89158a2c9fb7c80cd4f106dfb5324", "mergeable": false, "mergeable_state": "dirty", "merged": false, "comments": 0, "review_comments": 0, "commits": 5, "additions": 64, "deletions": 18, "changed_files": 3, "files": [{"filename": "README.md", "status": "modified", "additions": 17, "deletions": 13, "changes": 30, "patch": "@@ -147,6 +147,22 @@ run.bat --ticker AAPL,MSFT,NVDA main\n **Example Output:**\n <img width=\"992\" alt=\"Screenshot 2025-01-06 at 5 50 17 PM\" src=\"https://github.com/user-attachments/assets/e8ca04bf-9989-4a7d-a8b4-34e04666663b\" />\n \n+To specify the LLM provider and model, use the `--llm` argument in the format `Provider:Model` (e.g., `Openai:gpt-4`, `Ollama:llama3`). This will override the interactive model selection.\n+\n+```bash\n+# With Poetry:\n+poetry run python src/main.py --ticker AAPL,MSFT,NVDA --llm Openai:gpt-4\n+poetry run python src/main.py --ticker AAPL,MSFT,NVDA --llm Ollama:llama3\n+\n+# With Docker (on Linux/Mac):\n+./run.sh --ticker AAPL,MSFT,NVDA --llm Openai:gpt-4\n+\n+# With Docker (on Windows):\n+run.bat --ticker AAPL,MSFT,NVDA --llm Openai:gpt-4\n+```\n+\n+If you do not specify `--llm`, you will be prompted to select a provider and model interactively.\n+\n You can also specify a `--ollama` flag to run the AI hedge fund using local LLMs.\n \n ```bash\n@@ -205,6 +221,7 @@ run.bat --ticker AAPL,MSFT,NVDA backtest\n **Example Output:**\n <img width=\"941\" alt=\"Screenshot 2025-01-06 at 5 47 52 PM\" src=\"https://github.com/user-attachments/assets/00e794ea-8628-44e6-9a84-8f8a31ad3b47\" />\n \n+To specify the LLM provider and model, use the `--llm` argument the same way as for the Hedge Fund.\n \n You can optionally specify the start and end dates to backtest over a specific time period.\n \n@@ -219,19 +236,6 @@ poetry run python src/backtester.py --ticker AAPL,MSFT,NVDA --start-date 2024-01\n run.bat --ticker AAPL,MSFT,NVDA --start-date 2024-01-01 --end-date 2024-03-01 backtest\n ```\n \n-You can also specify a `--ollama` flag to run the backtester using local LLMs.\n-```bash\n-# With Poetry:\n-poetry run python src/backtester.py --ticker AAPL,MSFT,NVDA --ollama\n-\n-# With Docker (on Linux/Mac):\n-./run.sh --ticker AAPL,MSFT,NVDA --ollama backtest\n-\n-# With Docker (on Windows):\n-run.bat --ticker AAPL,MSFT,NVDA --ollama backtest\n-```\n-\n-\n ## Project Structure \n ```\n ai-hedge-fund/", "blob_url": "https://github.com/virattt/ai-hedge-fund/blob/60dc3133c3c89158a2c9fb7c80cd4f106dfb5324/README.md", "raw_url": "https://github.com/virattt/ai-hedge-fund/raw/60dc3133c3c89158a2c9fb7c80cd4f106dfb5324/README.md", "contents_url": "https://api.github.com/repos/virattt/ai-hedge-fund/contents/README.md?ref=60dc3133c3c89158a2c9fb7c80cd4f106dfb5324"}, {"filename": "src/backtester.py", "status": "modified", "additions": 23, "deletions": 2, "changes": 25, "patch": "@@ -651,6 +651,12 @@ def analyze_performance(self):\n         action=\"store_true\",\n         help=\"Use all available analysts (overrides --analysts)\",\n     )\n+    parser.add_argument(\n+        \"--llm\",\n+        type=str,\n+        default=None,\n+        help=\"Specify LLM as provider:model (e.g., Openai:gpt-4, Ollama:llama3) to override interactive selection\",\n+    )\n     parser.add_argument(\"--ollama\", action=\"store_true\", help=\"Use Ollama for local LLM inference\")\n \n     args = parser.parse_args()\n@@ -687,11 +693,26 @@ def analyze_performance(self):\n             selected_analysts = choices\n             print(f\"\\nSelected analysts: \" f\"{', '.join(Fore.GREEN + choice.title().replace('_', ' ') + Style.RESET_ALL for choice in choices)}\")\n \n-    # Select LLM model based on whether Ollama is being used\n+    # Select LLM model based on argument or interactive selection\n     model_name = \"\"\n     model_provider = None\n \n-    if args.ollama:\n+    # If command-line LLM is provided, use it directly\n+    if args.llm is not None:\n+        if ':' not in args.llm:\n+            print(f\"{Fore.RED}--llm argument must be in provider:model format (e.g., openai:gpt-4){Style.RESET_ALL}\")\n+            sys.exit(1)\n+        model_provider, model_name = args.llm.split(':', 1)\n+        if model_provider.lower() == ModelProvider.OLLAMA.value:\n+            # For Ollama, ensure model is available\n+            if not ensure_ollama_and_model(model_name):\n+                print(f\"{Fore.RED}Cannot proceed without Ollama and the selected model.{Style.RESET_ALL}\")\n+                sys.exit(1)\n+            print(f\"\\nSelected {Fore.CYAN}Ollama{Style.RESET_ALL} model: {Fore.GREEN + Style.BRIGHT}{model_name}{Style.RESET_ALL}\\n\")\n+            model_provider = ModelProvider.OLLAMA.value\n+        else:\n+            print(f\"\\nSelected {Fore.CYAN}{model_provider}{Style.RESET_ALL} model: {Fore.GREEN + Style.BRIGHT}{model_name}{Style.RESET_ALL}\\n\")\n+    elif args.ollama:\n         print(f\"{Fore.CYAN}Using Ollama for local LLM inference.{Style.RESET_ALL}\")\n \n         # Select from Ollama-specific models", "blob_url": "https://github.com/virattt/ai-hedge-fund/blob/60dc3133c3c89158a2c9fb7c80cd4f106dfb5324/src%2Fbacktester.py", "raw_url": "https://github.com/virattt/ai-hedge-fund/raw/60dc3133c3c89158a2c9fb7c80cd4f106dfb5324/src%2Fbacktester.py", "contents_url": "https://api.github.com/repos/virattt/ai-hedge-fund/contents/src%2Fbacktester.py?ref=60dc3133c3c89158a2c9fb7c80cd4f106dfb5324"}, {"filename": "src/main.py", "status": "modified", "additions": 24, "deletions": 3, "changes": 27, "patch": "@@ -145,6 +145,12 @@ def create_workflow(selected_analysts=None):\n     parser.add_argument(\"--end-date\", type=str, help=\"End date (YYYY-MM-DD). Defaults to today\")\n     parser.add_argument(\"--show-reasoning\", action=\"store_true\", help=\"Show reasoning from each agent\")\n     parser.add_argument(\"--show-agent-graph\", action=\"store_true\", help=\"Show the agent graph\")\n+    parser.add_argument(\n+        \"--llm\",\n+        type=str,\n+        default=None,\n+        help=\"Specify LLM as provider:model (e.g., Openai:gpt-4, Ollama:llama3) to override interactive selection\",\n+    )\n     parser.add_argument(\"--ollama\", action=\"store_true\", help=\"Use Ollama for local LLM inference\")\n \n     args = parser.parse_args()\n@@ -176,11 +182,26 @@ def create_workflow(selected_analysts=None):\n         selected_analysts = choices\n         print(f\"\\nSelected analysts: {', '.join(Fore.GREEN + choice.title().replace('_', ' ') + Style.RESET_ALL for choice in choices)}\\n\")\n \n-    # Select LLM model based on whether Ollama is being used\n+    # Select LLM model based on argument or interactive selection\n     model_name = \"\"\n     model_provider = \"\"\n \n-    if args.ollama:\n+    # If command-line LLM is provided, use it directly\n+    if args.llm is not None:\n+        if ':' not in args.llm:\n+            print(f\"{Fore.RED}--llm argument must be in provider:model format (e.g., Openai:gpt-4){Style.RESET_ALL}\")\n+            sys.exit(1)\n+        model_provider, model_name = args.llm.split(':', 1)\n+        if model_provider.lower() == ModelProvider.OLLAMA.value:\n+            # For Ollama, ensure model is available\n+            if not ensure_ollama_and_model(model_name):\n+                print(f\"{Fore.RED}Cannot proceed without Ollama and the selected model.{Style.RESET_ALL}\")\n+                sys.exit(1)\n+            print(f\"\\nSelected {Fore.CYAN}Ollama{Style.RESET_ALL} model: {Fore.GREEN + Style.BRIGHT}{model_name}{Style.RESET_ALL}\\n\")\n+            model_provider = ModelProvider.OLLAMA.value\n+        else:\n+            print(f\"\\nSelected {Fore.CYAN}{model_provider}{Style.RESET_ALL} model: {Fore.GREEN + Style.BRIGHT}{model_name}{Style.RESET_ALL}\\n\")\n+    elif args.ollama:\n         print(f\"{Fore.CYAN}Using Ollama for local LLM inference.{Style.RESET_ALL}\")\n \n         # Select from Ollama-specific models\n@@ -232,7 +253,7 @@ def create_workflow(selected_analysts=None):\n         if not model_choice:\n             print(\"\\n\\nInterrupt received. Exiting...\")\n             sys.exit(0)\n-\n+        \n         model_name, model_provider = model_choice\n \n         # Get model info using the helper function", "blob_url": "https://github.com/virattt/ai-hedge-fund/blob/60dc3133c3c89158a2c9fb7c80cd4f106dfb5324/src%2Fmain.py", "raw_url": "https://github.com/virattt/ai-hedge-fund/raw/60dc3133c3c89158a2c9fb7c80cd4f106dfb5324/src%2Fmain.py", "contents_url": "https://api.github.com/repos/virattt/ai-hedge-fund/contents/src%2Fmain.py?ref=60dc3133c3c89158a2c9fb7c80cd4f106dfb5324"}], "commits_data": [{"sha": "f3a21a57084553621c55fc11ffd9dab683ac59dd", "message": "Added command line argument to choose llm model", "author": "Romamo", "date": "2025-05-22 08:44:25+00:00", "url": "https://github.com/virattt/ai-hedge-fund/commit/f3a21a57084553621c55fc11ffd9dab683ac59dd"}, {"sha": "db3727cb36b95807089bfe943a8cf95da4c1294a", "message": "Removed wrongly added line", "author": "Romamo", "date": "2025-05-22 11:02:39+00:00", "url": "https://github.com/virattt/ai-hedge-fund/commit/db3727cb36b95807089bfe943a8cf95da4c1294a"}, {"sha": "94e3627ac3890dd11d3f3894f019e12cf471c3b9", "message": "Updated readme", "author": "Romamo", "date": "2025-05-22 11:27:47+00:00", "url": "https://github.com/virattt/ai-hedge-fund/commit/94e3627ac3890dd11d3f3894f019e12cf471c3b9"}, {"sha": "60e79c13a2ee4c49c9d0ab4257a932fba4870f9e", "message": "Added --llm argument to main.py too", "author": "Romamo", "date": "2025-05-22 11:42:27+00:00", "url": "https://github.com/virattt/ai-hedge-fund/commit/60e79c13a2ee4c49c9d0ab4257a932fba4870f9e"}, {"sha": "60dc3133c3c89158a2c9fb7c80cd4f106dfb5324", "message": "Added --llm argument to main.py too", "author": "Romamo", "date": "2025-05-22 11:44:36+00:00", "url": "https://github.com/virattt/ai-hedge-fund/commit/60dc3133c3c89158a2c9fb7c80cd4f106dfb5324"}], "reviews": [], "html_url": "https://github.com/virattt/ai-hedge-fund/pull/306", "diff_url": "https://github.com/virattt/ai-hedge-fund/pull/306.diff", "patch_url": "https://github.com/virattt/ai-hedge-fund/pull/306.patch"}, "analysis_duration": 9.362927913665771, "total_issues": 0}, "error": null}, "5cf697b0-80aa-4623-84de-9145879b5738": {"id": "5cf697b0-80aa-4623-84de-9145879b5738", "type": "security", "code_snippets": [{"file_path": "auth.py", "content": "import os\nimport sqlite3\n\nADMIN_PASSWORD = os.getenv(\"ADMIN_PASSWORD\", \"superSecret123!\")\n\ndef login(username, password):\n    if password == ADMIN_PASSWORD:\n        return True\n    return False\n\ndef get_user_data(user_id):\n    connection = sqlite3.connect(\"app.db\")\n    cursor = connection.cursor()\n    cursor.execute(\"SELECT * FROM users WHERE id = ?\", (user_id,))\n    result = cursor.fetchone()\n    connection.close()\n \u00a0\u00a0\u00a0return\u00a0result", "language": "python"}], "status": "completed", "created_at": "2025-07-27T17:43:36.029281", "started_at": "2025-07-27T17:43:36.520703", "completed_at": "2025-07-27T17:43:40.143694", "results": {"security_issues": [{"type": "Hardcoded passwords/secrets/API keys", "severity": "critical", "description": "The ADMIN_PASSWORD is either hardcoded or retrieved from an environment variable with a fallback to a hardcoded value.  This is a critical vulnerability as it allows attackers to gain administrator access if they can access the environment variables or the source code.", "line": 2, "file": "auth.py", "confidence": 1.0}, {"type": "SQL injection", "severity": "critical", "description": "The get_user_data function is vulnerable to SQL injection.  User-supplied input (user_id) is directly incorporated into the SQL query without proper sanitization or parameterization. An attacker could inject malicious SQL code to retrieve sensitive data or modify the database.", "line": 12, "file": "auth.py", "confidence": 1.0}, {"type": "Authentication bypass", "severity": "critical", "description": "The login function only checks if the provided password matches the ADMIN_PASSWORD. There's no user verification.  An attacker who knows the ADMIN_PASSWORD gains full access.", "line": 6, "file": "auth.py", "confidence": 1.0}], "total_issues": 3, "severity_breakdown": {"critical": 3, "high": 0, "medium": 0, "low": 0}, "decision": {"decision": "BLOCK", "risk_level": "critical", "summary": "Found 3 critical security issues", "recommendations": ["Fix critical security issues immediately", "Review security best practices"]}, "errors": [], "analysis_method": "agent_system"}, "error": null}}, "analysis_history": [{"id": "3248a1cd-f5e2-47dd-8d3f-94a66fa7a639", "type": "pr", "pr_url": "https://github.com/virattt/ai-hedge-fund/pull/376", "status": "completed", "mode": "deep", "created_at": "2025-07-27T08:02:11.142027", "started_at": "2025-07-27T08:02:11.369013", "completed_at": "2025-07-27T08:03:55.459284", "results": {"error": "Error during PR analysis: Cannot copy out of meta tensor; no data! Please use torch.nn.Module.to_empty() instead of torch.nn.Module.to() when moving module from meta to a different device.", "errors": ["Error during PR analysis: Cannot copy out of meta tensor; no data! Please use torch.nn.Module.to_empty() instead of torch.nn.Module.to() when moving module from meta to a different device."]}, "error": null}, {"id": "3248a1cd-f5e2-47dd-8d3f-94a66fa7a639", "type": "pr", "pr_url": "https://github.com/virattt/ai-hedge-fund/pull/376", "status": "completed", "mode": "deep", "created_at": "2025-07-27T08:02:11.142027", "started_at": "2025-07-27T08:02:11.369013", "completed_at": "2025-07-27T08:03:58.355132", "results": {"security_issues": [], "quality_issues": [], "logic_issues": [], "decision": {}, "pr_details": {"id": 2624612235, "number": 376, "title": "Add trading module and Alpaca broker", "body": "Hi,\r\n\r\nthis MR adds trading module and implementation for Alpaca (https://alpaca.markets) broker. ", "state": "open", "created_at": "2025-06-27 14:39:06+00:00", "updated_at": "2025-06-30 13:45:30+00:00", "closed_at": null, "merged_at": null, "merge_commit_sha": "5840c478e71cd576576d20736ae06ddf25a3688f", "author": "amalysh", "assignees": [], "reviewers": [], "labels": [], "milestone": null, "base_branch": "main", "head_branch": "alpaca-trading", "base_sha": "b725e61484bbcfbeb6339b9659fd95e7164847ac", "head_sha": "626e4d48a5c47b47f10d0a878b82471fc14bddf5", "mergeable": true, "mergeable_state": "clean", "merged": false, "comments": 0, "review_comments": 0, "commits": 6, "additions": 1788, "deletions": 28, "changed_files": 8, "files": [{"filename": ".env.example", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "patch": "@@ -21,3 +21,8 @@ FINANCIAL_DATASETS_API_KEY=your-financial-datasets-api-key\n # For running LLMs hosted by openai (gpt-4o, gpt-4o-mini, etc.)\n # Get your OpenAI API key from https://platform.openai.com/\n OPENAI_API_KEY=your-openai-api-key\n+\n+# Alpaca (required)\n+ALPACA_API_KEY=your-alpaca-api-key\n+ALPACA_SECRET_KEY=your-alpaca-secret-key\n+ALPACA_PAPER=true  # Set to false for live trading", "blob_url": "https://github.com/virattt/ai-hedge-fund/blob/626e4d48a5c47b47f10d0a878b82471fc14bddf5/.env.example", "raw_url": "https://github.com/virattt/ai-hedge-fund/raw/626e4d48a5c47b47f10d0a878b82471fc14bddf5/.env.example", "contents_url": "https://api.github.com/repos/virattt/ai-hedge-fund/contents/.env.example?ref=626e4d48a5c47b47f10d0a878b82471fc14bddf5"}, {"filename": "poetry.lock", "status": "modified", "additions": 250, "deletions": 28, "changes": 278, "patch": "@@ -1,11 +1,12 @@\n-# This file is automatically @generated by Poetry 1.8.5 and should not be changed by hand.\n+# This file is automatically @generated by Poetry 2.1.3 and should not be changed by hand.\n \n [[package]]\n name = \"aiohappyeyeballs\"\n version = \"2.6.1\"\n description = \"Happy Eyeballs for asyncio\"\n optional = false\n python-versions = \">=3.9\"\n+groups = [\"main\"]\n files = [\n     {file = \"aiohappyeyeballs-2.6.1-py3-none-any.whl\", hash = \"sha256:f349ba8f4b75cb25c99c5c2d84e997e485204d2902a9597802b0371f09331fb8\"},\n     {file = \"aiohappyeyeballs-2.6.1.tar.gz\", hash = \"sha256:c3f9d0113123803ccadfdf3f0faa505bc78e6a72d1cc4806cbd719826e943558\"},\n@@ -17,6 +18,7 @@ version = \"3.11.18\"\n description = \"Async http client/server framework (asyncio)\"\n optional = false\n python-versions = \">=3.9\"\n+groups = [\"main\"]\n files = [\n     {file = \"aiohttp-3.11.18-cp310-cp310-macosx_10_9_universal2.whl\", hash = \"sha256:96264854fedbea933a9ca4b7e0c745728f01380691687b7365d18d9e977179c4\"},\n     {file = \"aiohttp-3.11.18-cp310-cp310-macosx_10_9_x86_64.whl\", hash = \"sha256:9602044ff047043430452bc3a2089743fa85da829e6fc9ee0025351d66c332b6\"},\n@@ -111,14 +113,15 @@ propcache = \">=0.2.0\"\n yarl = \">=1.17.0,<2.0\"\n \n [package.extras]\n-speedups = [\"Brotli\", \"aiodns (>=3.2.0)\", \"brotlicffi\"]\n+speedups = [\"Brotli ; platform_python_implementation == \\\"CPython\\\"\", \"aiodns (>=3.2.0) ; sys_platform == \\\"linux\\\" or sys_platform == \\\"darwin\\\"\", \"brotlicffi ; platform_python_implementation != \\\"CPython\\\"\"]\n \n [[package]]\n name = \"aiosignal\"\n version = \"1.3.2\"\n description = \"aiosignal: a list of registered asynchronous callbacks\"\n optional = false\n python-versions = \">=3.9\"\n+groups = [\"main\"]\n files = [\n     {file = \"aiosignal-1.3.2-py2.py3-none-any.whl\", hash = \"sha256:45cde58e409a301715980c2b01d0c28bdde3770d8290b5eb2173759d9acb31a5\"},\n     {file = \"aiosignal-1.3.2.tar.gz\", hash = \"sha256:a8c255c66fafb1e499c9351d0bf32ff2d8a0321595ebac3b93713656d2436f54\"},\n@@ -133,6 +136,7 @@ version = \"1.15.2\"\n description = \"A database migration tool for SQLAlchemy.\"\n optional = false\n python-versions = \">=3.9\"\n+groups = [\"main\"]\n files = [\n     {file = \"alembic-1.15.2-py3-none-any.whl\", hash = \"sha256:2e76bd916d547f6900ec4bb5a90aeac1485d2c92536923d0b138c02b126edc53\"},\n     {file = \"alembic-1.15.2.tar.gz\", hash = \"sha256:1c72391bbdeffccfe317eefba686cb9a3c078005478885413b95c3b26c57a8a7\"},\n@@ -146,12 +150,33 @@ typing-extensions = \">=4.12\"\n [package.extras]\n tz = [\"tzdata\"]\n \n+[[package]]\n+name = \"alpaca-py\"\n+version = \"0.40.2\"\n+description = \"The Official Python SDK for Alpaca APIs\"\n+optional = false\n+python-versions = \"<4.0.0,>=3.8.0\"\n+groups = [\"main\"]\n+files = [\n+    {file = \"alpaca_py-0.40.2-py3-none-any.whl\", hash = \"sha256:bd21a5d290051d28ff4811b0cda2a1b45a4c6bb80f49b037c7bc2fe15302f035\"},\n+    {file = \"alpaca_py-0.40.2.tar.gz\", hash = \"sha256:d1e63b628cff4d9935a0c24c3a4419a985d4216a531c5c7b2d9fcd49e3c5fb70\"},\n+]\n+\n+[package.dependencies]\n+msgpack = \">=1.0.3,<2.0.0\"\n+pandas = \">=1.5.3\"\n+pydantic = \">=2.0.3,<3.0.0\"\n+requests = \">=2.30.0,<3.0.0\"\n+sseclient-py = \">=1.7.2,<2.0.0\"\n+websockets = \">=10.4\"\n+\n [[package]]\n name = \"annotated-types\"\n version = \"0.7.0\"\n description = \"Reusable constraint types to use with typing.Annotated\"\n optional = false\n python-versions = \">=3.8\"\n+groups = [\"main\"]\n files = [\n     {file = \"annotated_types-0.7.0-py3-none-any.whl\", hash = \"sha256:1f02e8b43a8fbbc3f3e0d4f0f4bfc8131bcb4eebe8849b8e5c773f3a1c582a53\"},\n     {file = \"annotated_types-0.7.0.tar.gz\", hash = \"sha256:aff07c09a53a08bc8cfccb9c85b05f1aa9a2a6f23728d790723543408344ce89\"},\n@@ -163,6 +188,7 @@ version = \"0.50.0\"\n description = \"The official Python library for the anthropic API\"\n optional = false\n python-versions = \">=3.8\"\n+groups = [\"main\"]\n files = [\n     {file = \"anthropic-0.50.0-py3-none-any.whl\", hash = \"sha256:defbd79327ca2fa61fd7b9eb2f1627dfb1f69c25d49288c52e167ddb84574f80\"},\n     {file = \"anthropic-0.50.0.tar.gz\", hash = \"sha256:42175ec04ce4ff2fa37cd436710206aadff546ee99d70d974699f59b49adc66f\"},\n@@ -187,6 +213,7 @@ version = \"3.7.1\"\n description = \"High level compatibility layer for multiple asynchronous event loop implementations\"\n optional = false\n python-versions = \">=3.7\"\n+groups = [\"main\"]\n files = [\n     {file = \"anyio-3.7.1-py3-none-any.whl\", hash = \"sha256:91dee416e570e92c64041bd18b900d1d6fa78dff7048769ce5ac5ddad004fbb5\"},\n     {file = \"anyio-3.7.1.tar.gz\", hash = \"sha256:44a3c9aba0f5defa43261a8b3efb97891f2bd7d804e0e1f56419befa1adfc780\"},\n@@ -198,7 +225,7 @@ sniffio = \">=1.1\"\n \n [package.extras]\n doc = [\"Sphinx\", \"packaging\", \"sphinx-autodoc-typehints (>=1.2.0)\", \"sphinx-rtd-theme (>=1.2.2)\", \"sphinxcontrib-jquery\"]\n-test = [\"anyio[trio]\", \"coverage[toml] (>=4.5)\", \"hypothesis (>=4.0)\", \"mock (>=4)\", \"psutil (>=5.9)\", \"pytest (>=7.0)\", \"pytest-mock (>=3.6.1)\", \"trustme\", \"uvloop (>=0.17)\"]\n+test = [\"anyio[trio]\", \"coverage[toml] (>=4.5)\", \"hypothesis (>=4.0)\", \"mock (>=4) ; python_version < \\\"3.8\\\"\", \"psutil (>=5.9)\", \"pytest (>=7.0)\", \"pytest-mock (>=3.6.1)\", \"trustme\", \"uvloop (>=0.17) ; python_version < \\\"3.12\\\" and platform_python_implementation == \\\"CPython\\\" and platform_system != \\\"Windows\\\"\"]\n trio = [\"trio (<0.22)\"]\n \n [[package]]\n@@ -207,25 +234,27 @@ version = \"25.3.0\"\n description = \"Classes Without Boilerplate\"\n optional = false\n python-versions = \">=3.8\"\n+groups = [\"main\"]\n files = [\n     {file = \"attrs-25.3.0-py3-none-any.whl\", hash = \"sha256:427318ce031701fea540783410126f03899a97ffc6f61596ad581ac2e40e3bc3\"},\n     {file = \"attrs-25.3.0.tar.gz\", hash = \"sha256:75d7cefc7fb576747b2c81b4442d4d4a1ce0900973527c011d1030fd3bf4af1b\"},\n ]\n \n [package.extras]\n-benchmark = [\"cloudpickle\", \"hypothesis\", \"mypy (>=1.11.1)\", \"pympler\", \"pytest (>=4.3.0)\", \"pytest-codspeed\", \"pytest-mypy-plugins\", \"pytest-xdist[psutil]\"]\n-cov = [\"cloudpickle\", \"coverage[toml] (>=5.3)\", \"hypothesis\", \"mypy (>=1.11.1)\", \"pympler\", \"pytest (>=4.3.0)\", \"pytest-mypy-plugins\", \"pytest-xdist[psutil]\"]\n-dev = [\"cloudpickle\", \"hypothesis\", \"mypy (>=1.11.1)\", \"pre-commit-uv\", \"pympler\", \"pytest (>=4.3.0)\", \"pytest-mypy-plugins\", \"pytest-xdist[psutil]\"]\n+benchmark = [\"cloudpickle ; platform_python_implementation == \\\"CPython\\\"\", \"hypothesis\", \"mypy (>=1.11.1) ; platform_python_implementation == \\\"CPython\\\" and python_version >= \\\"3.10\\\"\", \"pympler\", \"pytest (>=4.3.0)\", \"pytest-codspeed\", \"pytest-mypy-plugins ; platform_python_implementation == \\\"CPython\\\" and python_version >= \\\"3.10\\\"\", \"pytest-xdist[psutil]\"]\n+cov = [\"cloudpickle ; platform_python_implementation == \\\"CPython\\\"\", \"coverage[toml] (>=5.3)\", \"hypothesis\", \"mypy (>=1.11.1) ; platform_python_implementation == \\\"CPython\\\" and python_version >= \\\"3.10\\\"\", \"pympler\", \"pytest (>=4.3.0)\", \"pytest-mypy-plugins ; platform_python_implementation == \\\"CPython\\\" and python_version >= \\\"3.10\\\"\", \"pytest-xdist[psutil]\"]\n+dev = [\"cloudpickle ; platform_python_implementation == \\\"CPython\\\"\", \"hypothesis\", \"mypy (>=1.11.1) ; platform_python_implementation == \\\"CPython\\\" and python_version >= \\\"3.10\\\"\", \"pre-commit-uv\", \"pympler\", \"pytest (>=4.3.0)\", \"pytest-mypy-plugins ; platform_python_implementation == \\\"CPython\\\" and python_version >= \\\"3.10\\\"\", \"pytest-xdist[psutil]\"]\n docs = [\"cogapp\", \"furo\", \"myst-parser\", \"sphinx\", \"sphinx-notfound-page\", \"sphinxcontrib-towncrier\", \"towncrier\"]\n-tests = [\"cloudpickle\", \"hypothesis\", \"mypy (>=1.11.1)\", \"pympler\", \"pytest (>=4.3.0)\", \"pytest-mypy-plugins\", \"pytest-xdist[psutil]\"]\n-tests-mypy = [\"mypy (>=1.11.1)\", \"pytest-mypy-plugins\"]\n+tests = [\"cloudpickle ; platform_python_implementation == \\\"CPython\\\"\", \"hypothesis\", \"mypy (>=1.11.1) ; platform_python_implementation == \\\"CPython\\\" and python_version >= \\\"3.10\\\"\", \"pympler\", \"pytest (>=4.3.0)\", \"pytest-mypy-plugins ; platform_python_implementation == \\\"CPython\\\" and python_version >= \\\"3.10\\\"\", \"pytest-xdist[psutil]\"]\n+tests-mypy = [\"mypy (>=1.11.1) ; platform_python_implementation == \\\"CPython\\\" and python_version >= \\\"3.10\\\"\", \"pytest-mypy-plugins ; platform_python_implementation == \\\"CPython\\\" and python_version >= \\\"3.10\\\"\"]\n \n [[package]]\n name = \"black\"\n version = \"23.12.1\"\n description = \"The uncompromising code formatter.\"\n optional = false\n python-versions = \">=3.8\"\n+groups = [\"dev\"]\n files = [\n     {file = \"black-23.12.1-cp310-cp310-macosx_10_9_x86_64.whl\", hash = \"sha256:e0aaf6041986767a5e0ce663c7a2f0e9eaf21e6ff87a5f95cbf3675bfd4c41d2\"},\n     {file = \"black-23.12.1-cp310-cp310-macosx_11_0_arm64.whl\", hash = \"sha256:c88b3711d12905b74206227109272673edce0cb29f27e1385f33b0163c414bba\"},\n@@ -260,7 +289,7 @@ platformdirs = \">=2\"\n \n [package.extras]\n colorama = [\"colorama (>=0.4.3)\"]\n-d = [\"aiohttp (>=3.7.4)\", \"aiohttp (>=3.7.4,!=3.9.0)\"]\n+d = [\"aiohttp (>=3.7.4) ; sys_platform != \\\"win32\\\" or implementation_name != \\\"pypy\\\"\", \"aiohttp (>=3.7.4,!=3.9.0) ; sys_platform == \\\"win32\\\" and implementation_name == \\\"pypy\\\"\"]\n jupyter = [\"ipython (>=7.8.0)\", \"tokenize-rt (>=3.2.0)\"]\n uvloop = [\"uvloop (>=0.15.2)\"]\n \n@@ -270,6 +299,7 @@ version = \"5.5.2\"\n description = \"Extensible memoizing collections and decorators\"\n optional = false\n python-versions = \">=3.7\"\n+groups = [\"main\"]\n files = [\n     {file = \"cachetools-5.5.2-py3-none-any.whl\", hash = \"sha256:d26a22bcc62eb95c3beabd9f1ee5e820d3d2704fe2967cbe350e20c8ffcd3f0a\"},\n     {file = \"cachetools-5.5.2.tar.gz\", hash = \"sha256:1a661caa9175d26759571b2e19580f9d6393969e5dfca11fdb1f947a23e640d4\"},\n@@ -281,6 +311,7 @@ version = \"2025.4.26\"\n description = \"Python package for providing Mozilla's CA Bundle.\"\n optional = false\n python-versions = \">=3.6\"\n+groups = [\"main\"]\n files = [\n     {file = \"certifi-2025.4.26-py3-none-any.whl\", hash = \"sha256:30350364dfe371162649852c63336a15c70c6510c2ad5015b21c2345311805f3\"},\n     {file = \"certifi-2025.4.26.tar.gz\", hash = \"sha256:0a816057ea3cdefcef70270d2c515e4506bbc954f417fa5ade2021213bb8f0c6\"},\n@@ -292,6 +323,7 @@ version = \"3.4.1\"\n description = \"The Real First Universal Charset Detector. Open, modern and actively maintained alternative to Chardet.\"\n optional = false\n python-versions = \">=3.7\"\n+groups = [\"main\"]\n files = [\n     {file = \"charset_normalizer-3.4.1-cp310-cp310-macosx_10_9_universal2.whl\", hash = \"sha256:91b36a978b5ae0ee86c394f5a54d6ef44db1de0815eb43de826d41d21e4af3de\"},\n     {file = \"charset_normalizer-3.4.1-cp310-cp310-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:7461baadb4dc00fd9e0acbe254e3d7d2112e7f92ced2adc96e54ef6501c5f176\"},\n@@ -393,6 +425,7 @@ version = \"8.1.8\"\n description = \"Composable command line interface toolkit\"\n optional = false\n python-versions = \">=3.7\"\n+groups = [\"main\", \"dev\"]\n files = [\n     {file = \"click-8.1.8-py3-none-any.whl\", hash = \"sha256:63c132bbbed01578a06712a2d1f497bb62d9c1c0d329b7903a866228027263b2\"},\n     {file = \"click-8.1.8.tar.gz\", hash = \"sha256:ed53c9d8990d83c2a27deae68e4ee337473f6330c040a31d4225c9574d16096a\"},\n@@ -407,6 +440,7 @@ version = \"0.4.6\"\n description = \"Cross-platform colored terminal text.\"\n optional = false\n python-versions = \"!=3.0.*,!=3.1.*,!=3.2.*,!=3.3.*,!=3.4.*,!=3.5.*,!=3.6.*,>=2.7\"\n+groups = [\"main\", \"dev\"]\n files = [\n     {file = \"colorama-0.4.6-py2.py3-none-any.whl\", hash = \"sha256:4f1d9991f5acc0ca119f9d443620b77f9d6b33703e51011c16baf57afb285fc6\"},\n     {file = \"colorama-0.4.6.tar.gz\", hash = \"sha256:08695f5cb7ed6e0531a20572697297273c47b8cae5a63ffc6d6ed5c201be6e44\"},\n@@ -418,6 +452,7 @@ version = \"1.3.2\"\n description = \"Python library for calculating contours of 2D quadrilateral grids\"\n optional = false\n python-versions = \">=3.10\"\n+groups = [\"main\"]\n files = [\n     {file = \"contourpy-1.3.2-cp310-cp310-macosx_10_9_x86_64.whl\", hash = \"sha256:ba38e3f9f330af820c4b27ceb4b9c7feee5fe0493ea53a8720f4792667465934\"},\n     {file = \"contourpy-1.3.2-cp310-cp310-macosx_11_0_arm64.whl\", hash = \"sha256:dc41ba0714aa2968d1f8674ec97504a8f7e334f48eeacebcaa6256213acb0989\"},\n@@ -494,6 +529,7 @@ version = \"0.12.1\"\n description = \"Composable style cycles\"\n optional = false\n python-versions = \">=3.8\"\n+groups = [\"main\"]\n files = [\n     {file = \"cycler-0.12.1-py3-none-any.whl\", hash = \"sha256:85cef7cff222d8644161529808465972e51340599459b8ac3ccbac5a854e0d30\"},\n     {file = \"cycler-0.12.1.tar.gz\", hash = \"sha256:88bb128f02ba341da8ef447245a9e138fae777f6a23943da4540077d3601eb1c\"},\n@@ -509,6 +545,7 @@ version = \"0.7.1\"\n description = \"XML bomb protection for Python stdlib modules\"\n optional = false\n python-versions = \">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*\"\n+groups = [\"main\"]\n files = [\n     {file = \"defusedxml-0.7.1-py2.py3-none-any.whl\", hash = \"sha256:a352e7e428770286cc899e2542b6cdaedb2b4953ff269a210103ec58f6198a61\"},\n     {file = \"defusedxml-0.7.1.tar.gz\", hash = \"sha256:1bb3032db185915b62d7c6209c5a8792be6a32ab2fedacc84e01b52c51aa3e69\"},\n@@ -520,6 +557,7 @@ version = \"1.9.0\"\n description = \"Distro - an OS platform information API\"\n optional = false\n python-versions = \">=3.6\"\n+groups = [\"main\"]\n files = [\n     {file = \"distro-1.9.0-py3-none-any.whl\", hash = \"sha256:7bffd925d65168f85027d8da9af6bddab658135b840670a223589bc0c8ef02b2\"},\n     {file = \"distro-1.9.0.tar.gz\", hash = \"sha256:2fa77c6fd8940f116ee1d6b94a2f90b13b5ea8d019b98bc8bafdcabcdd9bdbed\"},\n@@ -531,6 +569,7 @@ version = \"0.104.1\"\n description = \"FastAPI framework, high performance, easy to learn, fast to code, ready for production\"\n optional = false\n python-versions = \">=3.8\"\n+groups = [\"main\"]\n files = [\n     {file = \"fastapi-0.104.1-py3-none-any.whl\", hash = \"sha256:752dc31160cdbd0436bb93bad51560b57e525cbb1d4bbf6f4904ceee75548241\"},\n     {file = \"fastapi-0.104.1.tar.gz\", hash = \"sha256:e5e4540a7c5e1dcfbbcf5b903c234feddcdcd881f191977a1c5dfd917487e7ae\"},\n@@ -551,6 +590,7 @@ version = \"0.0.7\"\n description = \"Run and manage FastAPI apps from the command line with FastAPI CLI. \ud83d\ude80\"\n optional = false\n python-versions = \">=3.8\"\n+groups = [\"main\"]\n files = [\n     {file = \"fastapi_cli-0.0.7-py3-none-any.whl\", hash = \"sha256:d549368ff584b2804336c61f192d86ddea080c11255f375959627911944804f4\"},\n     {file = \"fastapi_cli-0.0.7.tar.gz\", hash = \"sha256:02b3b65956f526412515907a0793c9094abd4bfb5457b389f645b0ea6ba3605e\"},\n@@ -570,6 +610,7 @@ version = \"1.2.0\"\n description = \"Infer file type and MIME type of any file/buffer. No external dependencies.\"\n optional = false\n python-versions = \"*\"\n+groups = [\"main\"]\n files = [\n     {file = \"filetype-1.2.0-py2.py3-none-any.whl\", hash = \"sha256:7ce71b6880181241cf7ac8697a2f1eb6a8bd9b429f7ad6d27b8db9ba5f1c2d25\"},\n     {file = \"filetype-1.2.0.tar.gz\", hash = \"sha256:66b56cd6474bf41d8c54660347d37afcc3f7d1970648de365c102ef77548aadb\"},\n@@ -581,6 +622,7 @@ version = \"6.1.0\"\n description = \"the modular source code checker: pep8 pyflakes and co\"\n optional = false\n python-versions = \">=3.8.1\"\n+groups = [\"dev\"]\n files = [\n     {file = \"flake8-6.1.0-py2.py3-none-any.whl\", hash = \"sha256:ffdfce58ea94c6580c77888a86506937f9a1a227dfcd15f245d694ae20a6b6e5\"},\n     {file = \"flake8-6.1.0.tar.gz\", hash = \"sha256:d5b3857f07c030bdb5bf41c7f53799571d75c4491748a3adcd47de929e34cd23\"},\n@@ -597,6 +639,7 @@ version = \"4.57.0\"\n description = \"Tools to manipulate font files\"\n optional = false\n python-versions = \">=3.8\"\n+groups = [\"main\"]\n files = [\n     {file = \"fonttools-4.57.0-cp310-cp310-macosx_10_9_universal2.whl\", hash = \"sha256:babe8d1eb059a53e560e7bf29f8e8f4accc8b6cfb9b5fd10e485bde77e71ef41\"},\n     {file = \"fonttools-4.57.0-cp310-cp310-macosx_10_9_x86_64.whl\", hash = \"sha256:81aa97669cd726349eb7bd43ca540cf418b279ee3caba5e2e295fb4e8f841c02\"},\n@@ -651,25 +694,26 @@ files = [\n ]\n \n [package.extras]\n-all = [\"brotli (>=1.0.1)\", \"brotlicffi (>=0.8.0)\", \"fs (>=2.2.0,<3)\", \"lxml (>=4.0)\", \"lz4 (>=1.7.4.2)\", \"matplotlib\", \"munkres\", \"pycairo\", \"scipy\", \"skia-pathops (>=0.5.0)\", \"sympy\", \"uharfbuzz (>=0.23.0)\", \"unicodedata2 (>=15.1.0)\", \"xattr\", \"zopfli (>=0.1.4)\"]\n+all = [\"brotli (>=1.0.1) ; platform_python_implementation == \\\"CPython\\\"\", \"brotlicffi (>=0.8.0) ; platform_python_implementation != \\\"CPython\\\"\", \"fs (>=2.2.0,<3)\", \"lxml (>=4.0)\", \"lz4 (>=1.7.4.2)\", \"matplotlib\", \"munkres ; platform_python_implementation == \\\"PyPy\\\"\", \"pycairo\", \"scipy ; platform_python_implementation != \\\"PyPy\\\"\", \"skia-pathops (>=0.5.0)\", \"sympy\", \"uharfbuzz (>=0.23.0)\", \"unicodedata2 (>=15.1.0) ; python_version <= \\\"3.12\\\"\", \"xattr ; sys_platform == \\\"darwin\\\"\", \"zopfli (>=0.1.4)\"]\n graphite = [\"lz4 (>=1.7.4.2)\"]\n-interpolatable = [\"munkres\", \"pycairo\", \"scipy\"]\n+interpolatable = [\"munkres ; platform_python_implementation == \\\"PyPy\\\"\", \"pycairo\", \"scipy ; platform_python_implementation != \\\"PyPy\\\"\"]\n lxml = [\"lxml (>=4.0)\"]\n pathops = [\"skia-pathops (>=0.5.0)\"]\n plot = [\"matplotlib\"]\n repacker = [\"uharfbuzz (>=0.23.0)\"]\n symfont = [\"sympy\"]\n-type1 = [\"xattr\"]\n+type1 = [\"xattr ; sys_platform == \\\"darwin\\\"\"]\n ufo = [\"fs (>=2.2.0,<3)\"]\n-unicode = [\"unicodedata2 (>=15.1.0)\"]\n-woff = [\"brotli (>=1.0.1)\", \"brotlicffi (>=0.8.0)\", \"zopfli (>=0.1.4)\"]\n+unicode = [\"unicodedata2 (>=15.1.0) ; python_version <= \\\"3.12\\\"\"]\n+woff = [\"brotli (>=1.0.1) ; platform_python_implementation == \\\"CPython\\\"\", \"brotlicffi (>=0.8.0) ; platform_python_implementation != \\\"CPython\\\"\", \"zopfli (>=0.1.4)\"]\n \n [[package]]\n name = \"frozenlist\"\n version = \"1.6.0\"\n description = \"A list-like structure which implements collections.abc.MutableSequence\"\n optional = false\n python-versions = \">=3.9\"\n+groups = [\"main\"]\n files = [\n     {file = \"frozenlist-1.6.0-cp310-cp310-macosx_10_9_universal2.whl\", hash = \"sha256:e6e558ea1e47fd6fa8ac9ccdad403e5dd5ecc6ed8dda94343056fa4277d5c65e\"},\n     {file = \"frozenlist-1.6.0-cp310-cp310-macosx_10_9_x86_64.whl\", hash = \"sha256:f4b3cd7334a4bbc0c472164f3744562cb72d05002cc6fcf58adb104630bbc352\"},\n@@ -783,6 +827,7 @@ version = \"0.6.18\"\n description = \"Google Ai Generativelanguage API client library\"\n optional = false\n python-versions = \">=3.7\"\n+groups = [\"main\"]\n files = [\n     {file = \"google_ai_generativelanguage-0.6.18-py3-none-any.whl\", hash = \"sha256:13d8174fea90b633f520789d32df7b422058fd5883b022989c349f1017db7fcf\"},\n     {file = \"google_ai_generativelanguage-0.6.18.tar.gz\", hash = \"sha256:274ba9fcf69466ff64e971d565884434388e523300afd468fc8e3033cd8e606e\"},\n@@ -792,7 +837,7 @@ files = [\n google-api-core = {version = \">=1.34.1,<2.0.dev0 || >=2.11.dev0,<3.0.0\", extras = [\"grpc\"]}\n google-auth = \">=2.14.1,<2.24.0 || >2.24.0,<2.25.0 || >2.25.0,<3.0.0\"\n proto-plus = [\n-    {version = \">=1.22.3,<2.0.0\", markers = \"python_version < \\\"3.13\\\"\"},\n+    {version = \">=1.22.3,<2.0.0\"},\n     {version = \">=1.25.0,<2.0.0\", markers = \"python_version >= \\\"3.13\\\"\"},\n ]\n protobuf = \">=3.20.2,<4.21.0 || >4.21.0,<4.21.1 || >4.21.1,<4.21.2 || >4.21.2,<4.21.3 || >4.21.3,<4.21.4 || >4.21.4,<4.21.5 || >4.21.5,<7.0.0\"\n@@ -803,6 +848,7 @@ version = \"2.24.2\"\n description = \"Google API client core library\"\n optional = false\n python-versions = \">=3.7\"\n+groups = [\"main\"]\n files = [\n     {file = \"google_api_core-2.24.2-py3-none-any.whl\", hash = \"sha256:810a63ac95f3c441b7c0e43d344e372887f62ce9071ba972eacf32672e072de9\"},\n     {file = \"google_api_core-2.24.2.tar.gz\", hash = \"sha256:81718493daf06d96d6bc76a91c23874dbf2fac0adbbf542831b805ee6e974696\"},\n@@ -814,15 +860,15 @@ googleapis-common-protos = \">=1.56.2,<2.0.0\"\n grpcio = {version = \">=1.49.1,<2.0dev\", optional = true, markers = \"python_version >= \\\"3.11\\\" and extra == \\\"grpc\\\"\"}\n grpcio-status = {version = \">=1.49.1,<2.0.dev0\", optional = true, markers = \"python_version >= \\\"3.11\\\" and extra == \\\"grpc\\\"\"}\n proto-plus = [\n-    {version = \">=1.22.3,<2.0.0\", markers = \"python_version < \\\"3.13\\\"\"},\n+    {version = \">=1.22.3,<2.0.0\"},\n     {version = \">=1.25.0,<2.0.0\", markers = \"python_version >= \\\"3.13\\\"\"},\n ]\n protobuf = \">=3.19.5,<3.20.0 || >3.20.0,<3.20.1 || >3.20.1,<4.21.0 || >4.21.0,<4.21.1 || >4.21.1,<4.21.2 || >4.21.2,<4.21.3 || >4.21.3,<4.21.4 || >4.21.4,<4.21.5 || >4.21.5,<7.0.0\"\n requests = \">=2.18.0,<3.0.0\"\n \n [package.extras]\n async-rest = [\"google-auth[aiohttp] (>=2.35.0,<3.0.dev0)\"]\n-grpc = [\"grpcio (>=1.33.2,<2.0dev)\", \"grpcio (>=1.49.1,<2.0dev)\", \"grpcio-status (>=1.33.2,<2.0.dev0)\", \"grpcio-status (>=1.49.1,<2.0.dev0)\"]\n+grpc = [\"grpcio (>=1.33.2,<2.0dev)\", \"grpcio (>=1.49.1,<2.0dev) ; python_version >= \\\"3.11\\\"\", \"grpcio-status (>=1.33.2,<2.0.dev0)\", \"grpcio-status (>=1.49.1,<2.0.dev0) ; python_version >= \\\"3.11\\\"\"]\n grpcgcp = [\"grpcio-gcp (>=0.2.2,<1.0.dev0)\"]\n grpcio-gcp = [\"grpcio-gcp (>=0.2.2,<1.0.dev0)\"]\n \n@@ -832,6 +878,7 @@ version = \"2.39.0\"\n description = \"Google Authentication Library\"\n optional = false\n python-versions = \">=3.7\"\n+groups = [\"main\"]\n files = [\n     {file = \"google_auth-2.39.0-py2.py3-none-any.whl\", hash = \"sha256:0150b6711e97fb9f52fe599f55648950cc4540015565d8fbb31be2ad6e1548a2\"},\n     {file = \"google_auth-2.39.0.tar.gz\", hash = \"sha256:73222d43cdc35a3aeacbfdcaf73142a97839f10de930550d89ebfe1d0a00cde7\"},\n@@ -845,11 +892,11 @@ rsa = \">=3.1.4,<5\"\n [package.extras]\n aiohttp = [\"aiohttp (>=3.6.2,<4.0.0)\", \"requests (>=2.20.0,<3.0.0)\"]\n enterprise-cert = [\"cryptography\", \"pyopenssl\"]\n-pyjwt = [\"cryptography (<39.0.0)\", \"cryptography (>=38.0.3)\", \"pyjwt (>=2.0)\"]\n-pyopenssl = [\"cryptography (<39.0.0)\", \"cryptography (>=38.0.3)\", \"pyopenssl (>=20.0.0)\"]\n+pyjwt = [\"cryptography (<39.0.0) ; python_version < \\\"3.8\\\"\", \"cryptography (>=38.0.3)\", \"pyjwt (>=2.0)\"]\n+pyopenssl = [\"cryptography (<39.0.0) ; python_version < \\\"3.8\\\"\", \"cryptography (>=38.0.3)\", \"pyopenssl (>=20.0.0)\"]\n reauth = [\"pyu2f (>=0.1.5)\"]\n requests = [\"requests (>=2.20.0,<3.0.0)\"]\n-testing = [\"aiohttp (<3.10.0)\", \"aiohttp (>=3.6.2,<4.0.0)\", \"aioresponses\", \"cryptography (<39.0.0)\", \"cryptography (>=38.0.3)\", \"flask\", \"freezegun\", \"grpcio\", \"mock\", \"oauth2client\", \"packaging\", \"pyjwt (>=2.0)\", \"pyopenssl (<24.3.0)\", \"pyopenssl (>=20.0.0)\", \"pytest\", \"pytest-asyncio\", \"pytest-cov\", \"pytest-localserver\", \"pyu2f (>=0.1.5)\", \"requests (>=2.20.0,<3.0.0)\", \"responses\", \"urllib3\"]\n+testing = [\"aiohttp (<3.10.0)\", \"aiohttp (>=3.6.2,<4.0.0)\", \"aioresponses\", \"cryptography (<39.0.0) ; python_version < \\\"3.8\\\"\", \"cryptography (>=38.0.3)\", \"flask\", \"freezegun\", \"grpcio\", \"mock\", \"oauth2client\", \"packaging\", \"pyjwt (>=2.0)\", \"pyopenssl (<24.3.0)\", \"pyopenssl (>=20.0.0)\", \"pytest\", \"pytest-asyncio\", \"pytest-cov\", \"pytest-localserver\", \"pyu2f (>=0.1.5)\", \"requests (>=2.20.0,<3.0.0)\", \"responses\", \"urllib3\"]\n urllib3 = [\"packaging\", \"urllib3\"]\n \n [[package]]\n@@ -858,6 +905,7 @@ version = \"1.70.0\"\n description = \"Common protobufs used in Google APIs\"\n optional = false\n python-versions = \">=3.7\"\n+groups = [\"main\"]\n files = [\n     {file = \"googleapis_common_protos-1.70.0-py3-none-any.whl\", hash = \"sha256:b8bfcca8c25a2bb253e0e0b0adaf8c00773e5e6af6fd92397576680b807e0fd8\"},\n     {file = \"googleapis_common_protos-1.70.0.tar.gz\", hash = \"sha256:0e1b44e0ea153e6594f9f394fef15193a68aaaea2d843f83e2742717ca753257\"},\n@@ -875,6 +923,8 @@ version = \"3.2.1\"\n description = \"Lightweight in-process concurrent programming\"\n optional = false\n python-versions = \">=3.9\"\n+groups = [\"main\"]\n+markers = \"python_version < \\\"3.14\\\" and (platform_machine == \\\"aarch64\\\" or platform_machine == \\\"ppc64le\\\" or platform_machine == \\\"x86_64\\\" or platform_machine == \\\"amd64\\\" or platform_machine == \\\"AMD64\\\" or platform_machine == \\\"win32\\\" or platform_machine == \\\"WIN32\\\")\"\n files = [\n     {file = \"greenlet-3.2.1-cp310-cp310-macosx_11_0_universal2.whl\", hash = \"sha256:777c1281aa7c786738683e302db0f55eb4b0077c20f1dc53db8852ffaea0a6b0\"},\n     {file = \"greenlet-3.2.1-cp310-cp310-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:3059c6f286b53ea4711745146ffe5a5c5ff801f62f6c56949446e0f6461f8157\"},\n@@ -943,6 +993,7 @@ version = \"0.23.1\"\n description = \"The official Python library for the groq API\"\n optional = false\n python-versions = \">=3.8\"\n+groups = [\"main\"]\n files = [\n     {file = \"groq-0.23.1-py3-none-any.whl\", hash = \"sha256:05fa38c3d0ad03c19c6185f98f6a73901c2a463e844fd067b79f7b05c8346946\"},\n     {file = \"groq-0.23.1.tar.gz\", hash = \"sha256:952e34895f9bfb78ab479e495d77b32180262e5c42f531ce3a1722d6e5a04dfb\"},\n@@ -962,6 +1013,7 @@ version = \"1.71.0\"\n description = \"HTTP/2-based RPC framework\"\n optional = false\n python-versions = \">=3.9\"\n+groups = [\"main\"]\n files = [\n     {file = \"grpcio-1.71.0-cp310-cp310-linux_armv7l.whl\", hash = \"sha256:c200cb6f2393468142eb50ab19613229dcc7829b5ccee8b658a36005f6669fdd\"},\n     {file = \"grpcio-1.71.0-cp310-cp310-macosx_12_0_universal2.whl\", hash = \"sha256:b2266862c5ad664a380fbbcdbdb8289d71464c42a8c29053820ee78ba0119e5d\"},\n@@ -1025,6 +1077,7 @@ version = \"1.62.3\"\n description = \"Status proto mapping for gRPC\"\n optional = false\n python-versions = \">=3.6\"\n+groups = [\"main\"]\n files = [\n     {file = \"grpcio-status-1.62.3.tar.gz\", hash = \"sha256:289bdd7b2459794a12cf95dc0cb727bd4a1742c37bd823f760236c937e53a485\"},\n     {file = \"grpcio_status-1.62.3-py3-none-any.whl\", hash = \"sha256:f9049b762ba8de6b1086789d8315846e094edac2c50beaf462338b301a8fd4b8\"},\n@@ -1041,6 +1094,7 @@ version = \"0.16.0\"\n description = \"A pure-Python, bring-your-own-I/O implementation of HTTP/1.1\"\n optional = false\n python-versions = \">=3.8\"\n+groups = [\"main\"]\n files = [\n     {file = \"h11-0.16.0-py3-none-any.whl\", hash = \"sha256:63cf8bbe7522de3bf65932fda1d9c2772064ffb3dae62d55932da54b31cb6c86\"},\n     {file = \"h11-0.16.0.tar.gz\", hash = \"sha256:4e35b956cf45792e4caa5885e69fba00bdbc6ffafbfa020300e549b208ee5ff1\"},\n@@ -1052,6 +1106,7 @@ version = \"1.0.9\"\n description = \"A minimal low-level HTTP client.\"\n optional = false\n python-versions = \">=3.8\"\n+groups = [\"main\"]\n files = [\n     {file = \"httpcore-1.0.9-py3-none-any.whl\", hash = \"sha256:2d400746a40668fc9dec9810239072b40b4484b640a8c38fd654a024c7a1bf55\"},\n     {file = \"httpcore-1.0.9.tar.gz\", hash = \"sha256:6e34463af53fd2ab5d807f399a9b45ea31c3dfa2276f15a2c3f00afff6e176e8\"},\n@@ -1073,6 +1128,7 @@ version = \"0.6.4\"\n description = \"A collection of framework independent HTTP protocol utils.\"\n optional = false\n python-versions = \">=3.8.0\"\n+groups = [\"main\"]\n files = [\n     {file = \"httptools-0.6.4-cp310-cp310-macosx_10_9_universal2.whl\", hash = \"sha256:3c73ce323711a6ffb0d247dcd5a550b8babf0f757e86a52558fe5b86d6fefcc0\"},\n     {file = \"httptools-0.6.4-cp310-cp310-macosx_11_0_arm64.whl\", hash = \"sha256:345c288418f0944a6fe67be8e6afa9262b18c7626c3ef3c28adc5eabc06a68da\"},\n@@ -1128,6 +1184,7 @@ version = \"0.27.2\"\n description = \"The next generation HTTP client.\"\n optional = false\n python-versions = \">=3.8\"\n+groups = [\"main\"]\n files = [\n     {file = \"httpx-0.27.2-py3-none-any.whl\", hash = \"sha256:7bb2708e112d8fdd7829cd4243970f0c223274051cb35ee80c03301ee29a3df0\"},\n     {file = \"httpx-0.27.2.tar.gz\", hash = \"sha256:f7c2be1d2f3c3c3160d441802406b206c2b76f5947b11115e6df10c6c65e66c2\"},\n@@ -1141,7 +1198,7 @@ idna = \"*\"\n sniffio = \"*\"\n \n [package.extras]\n-brotli = [\"brotli\", \"brotlicffi\"]\n+brotli = [\"brotli ; platform_python_implementation == \\\"CPython\\\"\", \"brotlicffi ; platform_python_implementation != \\\"CPython\\\"\"]\n cli = [\"click (==8.*)\", \"pygments (==2.*)\", \"rich (>=10,<14)\"]\n http2 = [\"h2 (>=3,<5)\"]\n socks = [\"socksio (==1.*)\"]\n@@ -1153,6 +1210,7 @@ version = \"3.10\"\n description = \"Internationalized Domain Names in Applications (IDNA)\"\n optional = false\n python-versions = \">=3.6\"\n+groups = [\"main\"]\n files = [\n     {file = \"idna-3.10-py3-none-any.whl\", hash = \"sha256:946d195a0d259cbba61165e88e65941f16e9b36ea6ddb97f00452bae8b1287d3\"},\n     {file = \"idna-3.10.tar.gz\", hash = \"sha256:12f65c9b470abda6dc35cf8e63cc574b1c52b11df2c86030af0ac09b01b13ea9\"},\n@@ -1167,6 +1225,7 @@ version = \"2.1.0\"\n description = \"brain-dead simple config-ini parsing\"\n optional = false\n python-versions = \">=3.8\"\n+groups = [\"dev\"]\n files = [\n     {file = \"iniconfig-2.1.0-py3-none-any.whl\", hash = \"sha256:9deba5723312380e77435581c6bf4935c94cbfab9b1ed33ef8d238ea168eb760\"},\n     {file = \"iniconfig-2.1.0.tar.gz\", hash = \"sha256:3abbd2e30b36733fee78f9c7f7308f2d0050e88f0087fd25c2645f63c773e1c7\"},\n@@ -1178,6 +1237,7 @@ version = \"5.13.2\"\n description = \"A Python utility / library to sort Python imports.\"\n optional = false\n python-versions = \">=3.8.0\"\n+groups = [\"dev\"]\n files = [\n     {file = \"isort-5.13.2-py3-none-any.whl\", hash = \"sha256:8ca5e72a8d85860d5a3fa69b8745237f2939afe12dbf656afbcb47fe72d947a6\"},\n     {file = \"isort-5.13.2.tar.gz\", hash = \"sha256:48fdfcb9face5d58a4f6dde2e72a1fb8dcaf8ab26f95ab49fab84c2ddefb0109\"},\n@@ -1192,6 +1252,7 @@ version = \"0.9.0\"\n description = \"Fast iterable JSON parser.\"\n optional = false\n python-versions = \">=3.8\"\n+groups = [\"main\"]\n files = [\n     {file = \"jiter-0.9.0-cp310-cp310-macosx_10_12_x86_64.whl\", hash = \"sha256:816ec9b60fdfd1fec87da1d7ed46c66c44ffec37ab2ef7de5b147b2fce3fd5ad\"},\n     {file = \"jiter-0.9.0-cp310-cp310-macosx_11_0_arm64.whl\", hash = \"sha256:9b1d3086f8a3ee0194ecf2008cf81286a5c3e540d977fa038ff23576c023c0ea\"},\n@@ -1277,6 +1338,7 @@ version = \"1.33\"\n description = \"Apply JSON-Patches (RFC 6902)\"\n optional = false\n python-versions = \">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*, !=3.5.*, !=3.6.*\"\n+groups = [\"main\"]\n files = [\n     {file = \"jsonpatch-1.33-py2.py3-none-any.whl\", hash = \"sha256:0ae28c0cd062bbd8b8ecc26d7d164fbbea9652a1a3693f3b956c1eae5145dade\"},\n     {file = \"jsonpatch-1.33.tar.gz\", hash = \"sha256:9fcd4009c41e6d12348b4a0ff2563ba56a2923a7dfee731d004e212e1ee5030c\"},\n@@ -1291,6 +1353,7 @@ version = \"3.0.0\"\n description = \"Identify specific nodes in a JSON document (RFC 6901)\"\n optional = false\n python-versions = \">=3.7\"\n+groups = [\"main\"]\n files = [\n     {file = \"jsonpointer-3.0.0-py2.py3-none-any.whl\", hash = \"sha256:13e088adc14fca8b6aa8177c044e12701e6ad4b28ff10e65f2267a90109c9942\"},\n     {file = \"jsonpointer-3.0.0.tar.gz\", hash = \"sha256:2b2d729f2091522d61c3b31f82e11870f60b68f43fbc705cb76bf4b832af59ef\"},\n@@ -1302,6 +1365,7 @@ version = \"1.4.8\"\n description = \"A fast implementation of the Cassowary constraint solver\"\n optional = false\n python-versions = \">=3.10\"\n+groups = [\"main\"]\n files = [\n     {file = \"kiwisolver-1.4.8-cp310-cp310-macosx_10_9_universal2.whl\", hash = \"sha256:88c6f252f6816a73b1f8c904f7bbe02fd67c09a69f7cb8a0eecdbf5ce78e63db\"},\n     {file = \"kiwisolver-1.4.8-cp310-cp310-macosx_10_9_x86_64.whl\", hash = \"sha256:c72941acb7b67138f35b879bbe85be0f6c6a70cab78fe3ef6db9c024d9223e5b\"},\n@@ -1391,6 +1455,7 @@ version = \"0.3.0\"\n description = \"Building applications with LLMs through composability\"\n optional = false\n python-versions = \"<4.0,>=3.9\"\n+groups = [\"main\"]\n files = [\n     {file = \"langchain-0.3.0-py3-none-any.whl\", hash = \"sha256:59a75a6a1eb7bfd2a6bf0c7a5816409a8fdc9046187b07af287b23b9899617af\"},\n     {file = \"langchain-0.3.0.tar.gz\", hash = \"sha256:a7c23892440bd1f5b9e029ff0dd709dd881ae927c4c0a3210ac64dba9bbf3f7f\"},\n@@ -1417,6 +1482,7 @@ version = \"0.3.5\"\n description = \"An integration package connecting AnthropicMessages and LangChain\"\n optional = false\n python-versions = \"<4.0,>=3.9\"\n+groups = [\"main\"]\n files = [\n     {file = \"langchain_anthropic-0.3.5-py3-none-any.whl\", hash = \"sha256:bad34b02d7b4bdca9a9471bc391b01269fd8dc4600b83ca2a3e76925b7c27fe6\"},\n     {file = \"langchain_anthropic-0.3.5.tar.gz\", hash = \"sha256:2aa1673511056061680492871f386d68a8b62947e0eb1f15303ef10db16c8357\"},\n@@ -1434,6 +1500,7 @@ version = \"0.3.56\"\n description = \"Building applications with LLMs through composability\"\n optional = false\n python-versions = \"<4.0,>=3.9\"\n+groups = [\"main\"]\n files = [\n     {file = \"langchain_core-0.3.56-py3-none-any.whl\", hash = \"sha256:a20c6aca0fa0da265d96d3b14a5a01828ac5d2d9d27516434873d76f2d4839ed\"},\n     {file = \"langchain_core-0.3.56.tar.gz\", hash = \"sha256:de896585bc56e12652327dcd195227c3739a07e86e587c91a07101e0df11dffe\"},\n@@ -1457,6 +1524,7 @@ version = \"0.1.3\"\n description = \"An integration package connecting DeepSeek and LangChain\"\n optional = false\n python-versions = \"<4.0,>=3.9\"\n+groups = [\"main\"]\n files = [\n     {file = \"langchain_deepseek-0.1.3-py3-none-any.whl\", hash = \"sha256:8588e826371b417fca65c02f4273b4061eb9815a7bfcd5eb05acaa40d603aa89\"},\n     {file = \"langchain_deepseek-0.1.3.tar.gz\", hash = \"sha256:89dd6aa120fb50dcfcd3d593626d34c1c40deefe4510710d0807fcc19481adf5\"},\n@@ -1472,6 +1540,7 @@ version = \"2.1.3\"\n description = \"An integration package connecting Google's genai package and LangChain\"\n optional = false\n python-versions = \"<4.0,>=3.9\"\n+groups = [\"main\"]\n files = [\n     {file = \"langchain_google_genai-2.1.3-py3-none-any.whl\", hash = \"sha256:adf222931ac7af543f4013751a9b7dbd9ed637fb4eb3e4e0cd7e1d5d7e066d36\"},\n     {file = \"langchain_google_genai-2.1.3.tar.gz\", hash = \"sha256:0d4e2abf01a7594a9420d3569cf2cd4239a01cc24c6698d3c2c92a072b9b7b4a\"},\n@@ -1489,6 +1558,7 @@ version = \"0.2.3\"\n description = \"An integration package connecting Groq and LangChain\"\n optional = false\n python-versions = \"<4.0,>=3.9\"\n+groups = [\"main\"]\n files = [\n     {file = \"langchain_groq-0.2.3-py3-none-any.whl\", hash = \"sha256:3572c812acc1478ab0670c48eb9a135c95f47631190da750e48408267462a12d\"},\n     {file = \"langchain_groq-0.2.3.tar.gz\", hash = \"sha256:f94810fe734c9402b36273ddc3509eaa67f12a7d06b666c6ca472ab0bfdf37b7\"},\n@@ -1504,6 +1574,7 @@ version = \"0.2.3\"\n description = \"An integration package connecting Ollama and LangChain\"\n optional = false\n python-versions = \"<4.0,>=3.9\"\n+groups = [\"main\"]\n files = [\n     {file = \"langchain_ollama-0.2.3-py3-none-any.whl\", hash = \"sha256:c47700ca68b013358b1e954493ecafb3bd10fa2cda71a9f15ba7897587a9aab2\"},\n     {file = \"langchain_ollama-0.2.3.tar.gz\", hash = \"sha256:d13fe8735176b652ca6e6656d7902c1265e8c0601097569f7c95433f3d034b38\"},\n@@ -1519,6 +1590,7 @@ version = \"0.3.14\"\n description = \"An integration package connecting OpenAI and LangChain\"\n optional = false\n python-versions = \"<4.0,>=3.9\"\n+groups = [\"main\"]\n files = [\n     {file = \"langchain_openai-0.3.14-py3-none-any.whl\", hash = \"sha256:b8e648d2d7678a5540818199d141ff727c6f1514294b3e1e999a95357c9d66a0\"},\n     {file = \"langchain_openai-0.3.14.tar.gz\", hash = \"sha256:0662db78620c2e5c3ccfc1c36dc959c0ddc80e6bdf7ef81632cbf4b2cc9b9461\"},\n@@ -1535,6 +1607,7 @@ version = \"0.3.8\"\n description = \"LangChain text splitting utilities\"\n optional = false\n python-versions = \"<4.0,>=3.9\"\n+groups = [\"main\"]\n files = [\n     {file = \"langchain_text_splitters-0.3.8-py3-none-any.whl\", hash = \"sha256:e75cc0f4ae58dcf07d9f18776400cf8ade27fadd4ff6d264df6278bb302f6f02\"},\n     {file = \"langchain_text_splitters-0.3.8.tar.gz\", hash = \"sha256:116d4b9f2a22dda357d0b79e30acf005c5518177971c66a9f1ab0edfdb0f912e\"},\n@@ -1549,6 +1622,7 @@ version = \"0.2.56\"\n description = \"Building stateful, multi-actor applications with LLMs\"\n optional = false\n python-versions = \"<4.0,>=3.9.0\"\n+groups = [\"main\"]\n files = [\n     {file = \"langgraph-0.2.56-py3-none-any.whl\", hash = \"sha256:ad8a4b772e34dc0137e890bb6ced596a39a1e684af66250c1e7c8150dbe90e9c\"},\n     {file = \"langgraph-0.2.56.tar.gz\", hash = \"sha256:af10b1ffd10d52fd4072a73f154b8c2513c0b22e5bd5d20f4567dfeecab98d1e\"},\n@@ -1565,6 +1639,7 @@ version = \"2.0.25\"\n description = \"Library with base interfaces for LangGraph checkpoint savers.\"\n optional = false\n python-versions = \"<4.0.0,>=3.9.0\"\n+groups = [\"main\"]\n files = [\n     {file = \"langgraph_checkpoint-2.0.25-py3-none-any.whl\", hash = \"sha256:23416a0f5bc9dd712ac10918fc13e8c9c4530c419d2985a441df71a38fc81602\"},\n     {file = \"langgraph_checkpoint-2.0.25.tar.gz\", hash = \"sha256:77a63cab7b5f84dec1d49db561326ec28bdd48bcefb7fe4ac372069d2609287b\"},\n@@ -1580,6 +1655,7 @@ version = \"0.1.63\"\n description = \"SDK for interacting with LangGraph API\"\n optional = false\n python-versions = \"<4.0.0,>=3.9.0\"\n+groups = [\"main\"]\n files = [\n     {file = \"langgraph_sdk-0.1.63-py3-none-any.whl\", hash = \"sha256:6fb78a7fc6a30eea43bd0d6401dbc9e3263d0d4c03f63c04035980da7e586b05\"},\n     {file = \"langgraph_sdk-0.1.63.tar.gz\", hash = \"sha256:62bf2cc31e5aa6c5b9011ee1702bcf1e36e67e142a60bd97af2611162fb58e18\"},\n@@ -1595,6 +1671,7 @@ version = \"0.1.147\"\n description = \"Client library to connect to the LangSmith LLM Tracing and Evaluation Platform.\"\n optional = false\n python-versions = \"<4.0,>=3.8.1\"\n+groups = [\"main\"]\n files = [\n     {file = \"langsmith-0.1.147-py3-none-any.whl\", hash = \"sha256:7166fc23b965ccf839d64945a78e9f1157757add228b086141eb03a60d699a15\"},\n     {file = \"langsmith-0.1.147.tar.gz\", hash = \"sha256:2e933220318a4e73034657103b3b1a3a6109cc5db3566a7e8e03be8d6d7def7a\"},\n@@ -1619,6 +1696,7 @@ version = \"1.3.10\"\n description = \"A super-fast templating language that borrows the best ideas from the existing templating languages.\"\n optional = false\n python-versions = \">=3.8\"\n+groups = [\"main\"]\n files = [\n     {file = \"mako-1.3.10-py3-none-any.whl\", hash = \"sha256:baef24a52fc4fc514a0887ac600f9f1cff3d82c61d4d700a1fa84d597b88db59\"},\n     {file = \"mako-1.3.10.tar.gz\", hash = \"sha256:99579a6f39583fa7e5630a28c3c1f440e4e97a414b80372649c0ce338da2ea28\"},\n@@ -1638,6 +1716,7 @@ version = \"3.0.0\"\n description = \"Python port of markdown-it. Markdown parsing, done right!\"\n optional = false\n python-versions = \">=3.8\"\n+groups = [\"main\"]\n files = [\n     {file = \"markdown-it-py-3.0.0.tar.gz\", hash = \"sha256:e3f60a94fa066dc52ec76661e37c851cb232d92f9886b15cb560aaada2df8feb\"},\n     {file = \"markdown_it_py-3.0.0-py3-none-any.whl\", hash = \"sha256:355216845c60bd96232cd8d8c40e8f9765cc86f46880e43a8fd22dc1a1a8cab1\"},\n@@ -1662,6 +1741,7 @@ version = \"3.0.2\"\n description = \"Safely add untrusted strings to HTML/XML markup.\"\n optional = false\n python-versions = \">=3.9\"\n+groups = [\"main\"]\n files = [\n     {file = \"MarkupSafe-3.0.2-cp310-cp310-macosx_10_9_universal2.whl\", hash = \"sha256:7e94c425039cde14257288fd61dcfb01963e658efbc0ff54f5306b06054700f8\"},\n     {file = \"MarkupSafe-3.0.2-cp310-cp310-macosx_11_0_arm64.whl\", hash = \"sha256:9e2d922824181480953426608b81967de705c3cef4d1af983af849d7bd619158\"},\n@@ -1732,6 +1812,7 @@ version = \"3.10.1\"\n description = \"Python plotting package\"\n optional = false\n python-versions = \">=3.10\"\n+groups = [\"main\"]\n files = [\n     {file = \"matplotlib-3.10.1-cp310-cp310-macosx_10_12_x86_64.whl\", hash = \"sha256:ff2ae14910be903f4a24afdbb6d7d3a6c44da210fc7d42790b87aeac92238a16\"},\n     {file = \"matplotlib-3.10.1-cp310-cp310-macosx_11_0_arm64.whl\", hash = \"sha256:0721a3fd3d5756ed593220a8b86808a36c5031fce489adb5b31ee6dbb47dd5b2\"},\n@@ -1789,6 +1870,7 @@ version = \"0.7.0\"\n description = \"McCabe checker, plugin for flake8\"\n optional = false\n python-versions = \">=3.6\"\n+groups = [\"dev\"]\n files = [\n     {file = \"mccabe-0.7.0-py2.py3-none-any.whl\", hash = \"sha256:6c2d30ab6be0e4a46919781807b4f0d834ebdd6c6e3dca0bda5a15f863427b6e\"},\n     {file = \"mccabe-0.7.0.tar.gz\", hash = \"sha256:348e0240c33b60bbdf4e523192ef919f28cb2c3d7d5c7794f74009290f236325\"},\n@@ -1800,17 +1882,88 @@ version = \"0.1.2\"\n description = \"Markdown URL utilities\"\n optional = false\n python-versions = \">=3.7\"\n+groups = [\"main\"]\n files = [\n     {file = \"mdurl-0.1.2-py3-none-any.whl\", hash = \"sha256:84008a41e51615a49fc9966191ff91509e3c40b939176e643fd50a5c2196b8f8\"},\n     {file = \"mdurl-0.1.2.tar.gz\", hash = \"sha256:bb413d29f5eea38f31dd4754dd7377d4465116fb207585f97bf925588687c1ba\"},\n ]\n \n+[[package]]\n+name = \"msgpack\"\n+version = \"1.1.1\"\n+description = \"MessagePack serializer\"\n+optional = false\n+python-versions = \">=3.8\"\n+groups = [\"main\"]\n+files = [\n+    {file = \"msgpack-1.1.1-cp310-cp310-macosx_10_9_x86_64.whl\", hash = \"sha256:353b6fc0c36fde68b661a12949d7d49f8f51ff5fa019c1e47c87c4ff34b080ed\"},\n+    {file = \"msgpack-1.1.1-cp310-cp310-macosx_11_0_arm64.whl\", hash = \"sha256:79c408fcf76a958491b4e3b103d1c417044544b68e96d06432a189b43d1215c8\"},\n+    {file = \"msgpack-1.1.1-cp310-cp310-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:78426096939c2c7482bf31ef15ca219a9e24460289c00dd0b94411040bb73ad2\"},\n+    {file = \"msgpack-1.1.1-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:8b17ba27727a36cb73aabacaa44b13090feb88a01d012c0f4be70c00f75048b4\"},\n+    {file = \"msgpack-1.1.1-cp310-cp310-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:7a17ac1ea6ec3c7687d70201cfda3b1e8061466f28f686c24f627cae4ea8efd0\"},\n+    {file = \"msgpack-1.1.1-cp310-cp310-musllinux_1_2_aarch64.whl\", hash = \"sha256:88d1e966c9235c1d4e2afac21ca83933ba59537e2e2727a999bf3f515ca2af26\"},\n+    {file = \"msgpack-1.1.1-cp310-cp310-musllinux_1_2_i686.whl\", hash = \"sha256:f6d58656842e1b2ddbe07f43f56b10a60f2ba5826164910968f5933e5178af75\"},\n+    {file = \"msgpack-1.1.1-cp310-cp310-musllinux_1_2_x86_64.whl\", hash = \"sha256:96decdfc4adcbc087f5ea7ebdcfd3dee9a13358cae6e81d54be962efc38f6338\"},\n+    {file = \"msgpack-1.1.1-cp310-cp310-win32.whl\", hash = \"sha256:6640fd979ca9a212e4bcdf6eb74051ade2c690b862b679bfcb60ae46e6dc4bfd\"},\n+    {file = \"msgpack-1.1.1-cp310-cp310-win_amd64.whl\", hash = \"sha256:8b65b53204fe1bd037c40c4148d00ef918eb2108d24c9aaa20bc31f9810ce0a8\"},\n+    {file = \"msgpack-1.1.1-cp311-cp311-macosx_10_9_x86_64.whl\", hash = \"sha256:71ef05c1726884e44f8b1d1773604ab5d4d17729d8491403a705e649116c9558\"},\n+    {file = \"msgpack-1.1.1-cp311-cp311-macosx_11_0_arm64.whl\", hash = \"sha256:36043272c6aede309d29d56851f8841ba907a1a3d04435e43e8a19928e243c1d\"},\n+    {file = \"msgpack-1.1.1-cp311-cp311-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:a32747b1b39c3ac27d0670122b57e6e57f28eefb725e0b625618d1b59bf9d1e0\"},\n+    {file = \"msgpack-1.1.1-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:8a8b10fdb84a43e50d38057b06901ec9da52baac6983d3f709d8507f3889d43f\"},\n+    {file = \"msgpack-1.1.1-cp311-cp311-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:ba0c325c3f485dc54ec298d8b024e134acf07c10d494ffa24373bea729acf704\"},\n+    {file = \"msgpack-1.1.1-cp311-cp311-musllinux_1_2_aarch64.whl\", hash = \"sha256:88daaf7d146e48ec71212ce21109b66e06a98e5e44dca47d853cbfe171d6c8d2\"},\n+    {file = \"msgpack-1.1.1-cp311-cp311-musllinux_1_2_i686.whl\", hash = \"sha256:d8b55ea20dc59b181d3f47103f113e6f28a5e1c89fd5b67b9140edb442ab67f2\"},\n+    {file = \"msgpack-1.1.1-cp311-cp311-musllinux_1_2_x86_64.whl\", hash = \"sha256:4a28e8072ae9779f20427af07f53bbb8b4aa81151054e882aee333b158da8752\"},\n+    {file = \"msgpack-1.1.1-cp311-cp311-win32.whl\", hash = \"sha256:7da8831f9a0fdb526621ba09a281fadc58ea12701bc709e7b8cbc362feabc295\"},\n+    {file = \"msgpack-1.1.1-cp311-cp311-win_amd64.whl\", hash = \"sha256:5fd1b58e1431008a57247d6e7cc4faa41c3607e8e7d4aaf81f7c29ea013cb458\"},\n+    {file = \"msgpack-1.1.1-cp312-cp312-macosx_10_13_x86_64.whl\", hash = \"sha256:ae497b11f4c21558d95de9f64fff7053544f4d1a17731c866143ed6bb4591238\"},\n+    {file = \"msgpack-1.1.1-cp312-cp312-macosx_11_0_arm64.whl\", hash = \"sha256:33be9ab121df9b6b461ff91baac6f2731f83d9b27ed948c5b9d1978ae28bf157\"},\n+    {file = \"msgpack-1.1.1-cp312-cp312-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:6f64ae8fe7ffba251fecb8408540c34ee9df1c26674c50c4544d72dbf792e5ce\"},\n+    {file = \"msgpack-1.1.1-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:a494554874691720ba5891c9b0b39474ba43ffb1aaf32a5dac874effb1619e1a\"},\n+    {file = \"msgpack-1.1.1-cp312-cp312-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:cb643284ab0ed26f6957d969fe0dd8bb17beb567beb8998140b5e38a90974f6c\"},\n+    {file = \"msgpack-1.1.1-cp312-cp312-musllinux_1_2_aarch64.whl\", hash = \"sha256:d275a9e3c81b1093c060c3837e580c37f47c51eca031f7b5fb76f7b8470f5f9b\"},\n+    {file = \"msgpack-1.1.1-cp312-cp312-musllinux_1_2_i686.whl\", hash = \"sha256:4fd6b577e4541676e0cc9ddc1709d25014d3ad9a66caa19962c4f5de30fc09ef\"},\n+    {file = \"msgpack-1.1.1-cp312-cp312-musllinux_1_2_x86_64.whl\", hash = \"sha256:bb29aaa613c0a1c40d1af111abf025f1732cab333f96f285d6a93b934738a68a\"},\n+    {file = \"msgpack-1.1.1-cp312-cp312-win32.whl\", hash = \"sha256:870b9a626280c86cff9c576ec0d9cbcc54a1e5ebda9cd26dab12baf41fee218c\"},\n+    {file = \"msgpack-1.1.1-cp312-cp312-win_amd64.whl\", hash = \"sha256:5692095123007180dca3e788bb4c399cc26626da51629a31d40207cb262e67f4\"},\n+    {file = \"msgpack-1.1.1-cp313-cp313-macosx_10_13_x86_64.whl\", hash = \"sha256:3765afa6bd4832fc11c3749be4ba4b69a0e8d7b728f78e68120a157a4c5d41f0\"},\n+    {file = \"msgpack-1.1.1-cp313-cp313-macosx_11_0_arm64.whl\", hash = \"sha256:8ddb2bcfd1a8b9e431c8d6f4f7db0773084e107730ecf3472f1dfe9ad583f3d9\"},\n+    {file = \"msgpack-1.1.1-cp313-cp313-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:196a736f0526a03653d829d7d4c5500a97eea3648aebfd4b6743875f28aa2af8\"},\n+    {file = \"msgpack-1.1.1-cp313-cp313-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:9d592d06e3cc2f537ceeeb23d38799c6ad83255289bb84c2e5792e5a8dea268a\"},\n+    {file = \"msgpack-1.1.1-cp313-cp313-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:4df2311b0ce24f06ba253fda361f938dfecd7b961576f9be3f3fbd60e87130ac\"},\n+    {file = \"msgpack-1.1.1-cp313-cp313-musllinux_1_2_aarch64.whl\", hash = \"sha256:e4141c5a32b5e37905b5940aacbc59739f036930367d7acce7a64e4dec1f5e0b\"},\n+    {file = \"msgpack-1.1.1-cp313-cp313-musllinux_1_2_i686.whl\", hash = \"sha256:b1ce7f41670c5a69e1389420436f41385b1aa2504c3b0c30620764b15dded2e7\"},\n+    {file = \"msgpack-1.1.1-cp313-cp313-musllinux_1_2_x86_64.whl\", hash = \"sha256:4147151acabb9caed4e474c3344181e91ff7a388b888f1e19ea04f7e73dc7ad5\"},\n+    {file = \"msgpack-1.1.1-cp313-cp313-win32.whl\", hash = \"sha256:500e85823a27d6d9bba1d057c871b4210c1dd6fb01fbb764e37e4e8847376323\"},\n+    {file = \"msgpack-1.1.1-cp313-cp313-win_amd64.whl\", hash = \"sha256:6d489fba546295983abd142812bda76b57e33d0b9f5d5b71c09a583285506f69\"},\n+    {file = \"msgpack-1.1.1-cp38-cp38-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:bba1be28247e68994355e028dcd668316db30c1f758d3241a7b903ac78dcd285\"},\n+    {file = \"msgpack-1.1.1-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:b8f93dcddb243159c9e4109c9750ba5b335ab8d48d9522c5308cd05d7e3ce600\"},\n+    {file = \"msgpack-1.1.1-cp38-cp38-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:2fbbc0b906a24038c9958a1ba7ae0918ad35b06cb449d398b76a7d08470b0ed9\"},\n+    {file = \"msgpack-1.1.1-cp38-cp38-musllinux_1_2_aarch64.whl\", hash = \"sha256:61e35a55a546a1690d9d09effaa436c25ae6130573b6ee9829c37ef0f18d5e78\"},\n+    {file = \"msgpack-1.1.1-cp38-cp38-musllinux_1_2_i686.whl\", hash = \"sha256:1abfc6e949b352dadf4bce0eb78023212ec5ac42f6abfd469ce91d783c149c2a\"},\n+    {file = \"msgpack-1.1.1-cp38-cp38-musllinux_1_2_x86_64.whl\", hash = \"sha256:996f2609ddf0142daba4cefd767d6db26958aac8439ee41db9cc0db9f4c4c3a6\"},\n+    {file = \"msgpack-1.1.1-cp38-cp38-win32.whl\", hash = \"sha256:4d3237b224b930d58e9d83c81c0dba7aacc20fcc2f89c1e5423aa0529a4cd142\"},\n+    {file = \"msgpack-1.1.1-cp38-cp38-win_amd64.whl\", hash = \"sha256:da8f41e602574ece93dbbda1fab24650d6bf2a24089f9e9dbb4f5730ec1e58ad\"},\n+    {file = \"msgpack-1.1.1-cp39-cp39-macosx_10_9_x86_64.whl\", hash = \"sha256:f5be6b6bc52fad84d010cb45433720327ce886009d862f46b26d4d154001994b\"},\n+    {file = \"msgpack-1.1.1-cp39-cp39-macosx_11_0_arm64.whl\", hash = \"sha256:3a89cd8c087ea67e64844287ea52888239cbd2940884eafd2dcd25754fb72232\"},\n+    {file = \"msgpack-1.1.1-cp39-cp39-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:1d75f3807a9900a7d575d8d6674a3a47e9f227e8716256f35bc6f03fc597ffbf\"},\n+    {file = \"msgpack-1.1.1-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:d182dac0221eb8faef2e6f44701812b467c02674a322c739355c39e94730cdbf\"},\n+    {file = \"msgpack-1.1.1-cp39-cp39-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:1b13fe0fb4aac1aa5320cd693b297fe6fdef0e7bea5518cbc2dd5299f873ae90\"},\n+    {file = \"msgpack-1.1.1-cp39-cp39-musllinux_1_2_aarch64.whl\", hash = \"sha256:435807eeb1bc791ceb3247d13c79868deb22184e1fc4224808750f0d7d1affc1\"},\n+    {file = \"msgpack-1.1.1-cp39-cp39-musllinux_1_2_i686.whl\", hash = \"sha256:4835d17af722609a45e16037bb1d4d78b7bdf19d6c0128116d178956618c4e88\"},\n+    {file = \"msgpack-1.1.1-cp39-cp39-musllinux_1_2_x86_64.whl\", hash = \"sha256:a8ef6e342c137888ebbfb233e02b8fbd689bb5b5fcc59b34711ac47ebd504478\"},\n+    {file = \"msgpack-1.1.1-cp39-cp39-win32.whl\", hash = \"sha256:61abccf9de335d9efd149e2fff97ed5974f2481b3353772e8e2dd3402ba2bd57\"},\n+    {file = \"msgpack-1.1.1-cp39-cp39-win_amd64.whl\", hash = \"sha256:40eae974c873b2992fd36424a5d9407f93e97656d999f43fca9d29f820899084\"},\n+    {file = \"msgpack-1.1.1.tar.gz\", hash = \"sha256:77b79ce34a2bdab2594f490c8e80dd62a02d650b91a75159a63ec413b8d104cd\"},\n+]\n+\n [[package]]\n name = \"multidict\"\n version = \"6.4.3\"\n description = \"multidict implementation\"\n optional = false\n python-versions = \">=3.9\"\n+groups = [\"main\"]\n files = [\n     {file = \"multidict-6.4.3-cp310-cp310-macosx_10_9_universal2.whl\", hash = \"sha256:32a998bd8a64ca48616eac5a8c1cc4fa38fb244a3facf2eeb14abe186e0f6cc5\"},\n     {file = \"multidict-6.4.3-cp310-cp310-macosx_10_9_x86_64.whl\", hash = \"sha256:a54ec568f1fc7f3c313c2f3b16e5db346bf3660e1309746e7fccbbfded856188\"},\n@@ -1924,6 +2077,7 @@ version = \"1.1.0\"\n description = \"Type system extensions for programs checked with the mypy type checker.\"\n optional = false\n python-versions = \">=3.8\"\n+groups = [\"dev\"]\n files = [\n     {file = \"mypy_extensions-1.1.0-py3-none-any.whl\", hash = \"sha256:1be4cccdb0f2482337c4743e60421de3a356cd97508abadd57d47403e94f5505\"},\n     {file = \"mypy_extensions-1.1.0.tar.gz\", hash = \"sha256:52e68efc3284861e772bbcd66823fde5ae21fd2fdb51c62a211403730b916558\"},\n@@ -1935,6 +2089,7 @@ version = \"1.26.4\"\n description = \"Fundamental package for array computing in Python\"\n optional = false\n python-versions = \">=3.9\"\n+groups = [\"main\"]\n files = [\n     {file = \"numpy-1.26.4-cp310-cp310-macosx_10_9_x86_64.whl\", hash = \"sha256:9ff0f4f29c51e2803569d7a51c2304de5554655a60c5d776e35b4a41413830d0\"},\n     {file = \"numpy-1.26.4-cp310-cp310-macosx_11_0_arm64.whl\", hash = \"sha256:2e4ee3380d6de9c9ec04745830fd9e2eccb3e6cf790d39d7b98ffd19b0dd754a\"},\n@@ -1980,6 +2135,7 @@ version = \"0.4.8\"\n description = \"The official Python client for Ollama.\"\n optional = false\n python-versions = \"<4.0,>=3.8\"\n+groups = [\"main\"]\n files = [\n     {file = \"ollama-0.4.8-py3-none-any.whl\", hash = \"sha256:04312af2c5e72449aaebac4a2776f52ef010877c554103419d3f36066fe8af4c\"},\n     {file = \"ollama-0.4.8.tar.gz\", hash = \"sha256:1121439d49b96fa8339842965d0616eba5deb9f8c790786cdf4c0b3df4833802\"},\n@@ -1995,6 +2151,7 @@ version = \"1.76.2\"\n description = \"The official Python library for the openai API\"\n optional = false\n python-versions = \">=3.8\"\n+groups = [\"main\"]\n files = [\n     {file = \"openai-1.76.2-py3-none-any.whl\", hash = \"sha256:9c1d9ad59e6e3bea7205eedc9ca66eeebae18d47b527e505a2b0d2fb1538e26e\"},\n     {file = \"openai-1.76.2.tar.gz\", hash = \"sha256:f430c8b848775907405c6eff54621254c96f6444c593c097e0cc3a9f8fdda96f\"},\n@@ -2021,6 +2178,7 @@ version = \"3.10.17\"\n description = \"Fast, correct Python JSON library supporting dataclasses, datetimes, and numpy\"\n optional = false\n python-versions = \">=3.9\"\n+groups = [\"main\"]\n files = [\n     {file = \"orjson-3.10.17-cp310-cp310-macosx_10_15_x86_64.macosx_11_0_arm64.macosx_10_15_universal2.whl\", hash = \"sha256:bc399cf138a0201d0bf2399b44195d33a0a5aee149dab114340da0d766c88b95\"},\n     {file = \"orjson-3.10.17-cp310-cp310-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:59225b27b72e0e1626d869f7b987da6c74f9b6026cf9a87c1cdaf74ca9f7b8c0\"},\n@@ -2102,6 +2260,7 @@ version = \"1.9.1\"\n description = \"Fast, correct Python msgpack library supporting dataclasses, datetimes, and numpy\"\n optional = false\n python-versions = \">=3.9\"\n+groups = [\"main\"]\n files = [\n     {file = \"ormsgpack-1.9.1-cp310-cp310-macosx_10_12_x86_64.macosx_11_0_arm64.macosx_10_12_universal2.whl\", hash = \"sha256:f1f804fd9c0fd84213a6022c34172f82323b34afa7052a4af18797582cf56365\"},\n     {file = \"ormsgpack-1.9.1-cp310-cp310-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:eab5cec99c46276b37071d570aab98603f3d0309b3818da3247eb64bb95e5cfc\"},\n@@ -2152,6 +2311,7 @@ version = \"24.2\"\n description = \"Core utilities for Python packages\"\n optional = false\n python-versions = \">=3.8\"\n+groups = [\"main\", \"dev\"]\n files = [\n     {file = \"packaging-24.2-py3-none-any.whl\", hash = \"sha256:09abb1bccd265c01f4a3aa3f7a7db064b36514d2cba19a2f694fe6150451a759\"},\n     {file = \"packaging-24.2.tar.gz\", hash = \"sha256:c228a6dc5e932d346bc5739379109d49e8853dd8223571c7c5b55260edc0b97f\"},\n@@ -2163,6 +2323,7 @@ version = \"2.2.3\"\n description = \"Powerful data structures for data analysis, time series, and statistics\"\n optional = false\n python-versions = \">=3.9\"\n+groups = [\"main\"]\n files = [\n     {file = \"pandas-2.2.3-cp310-cp310-macosx_10_9_x86_64.whl\", hash = \"sha256:1948ddde24197a0f7add2bdc4ca83bf2b1ef84a1bc8ccffd95eda17fd836ecb5\"},\n     {file = \"pandas-2.2.3-cp310-cp310-macosx_11_0_arm64.whl\", hash = \"sha256:381175499d3802cde0eabbaf6324cce0c4f5d52ca6f8c377c29ad442f50f6348\"},\n@@ -2248,6 +2409,7 @@ version = \"0.12.1\"\n description = \"Utility library for gitignore style pattern matching of file paths.\"\n optional = false\n python-versions = \">=3.8\"\n+groups = [\"dev\"]\n files = [\n     {file = \"pathspec-0.12.1-py3-none-any.whl\", hash = \"sha256:a0d503e138a4c123b27490a4f7beda6a01c6f288df0e4a8b79c7eb0dc7b4cc08\"},\n     {file = \"pathspec-0.12.1.tar.gz\", hash = \"sha256:a482d51503a1ab33b1c67a6c3813a26953dbdc71c31dacaef9a838c4e29f5712\"},\n@@ -2259,6 +2421,7 @@ version = \"11.2.1\"\n description = \"Python Imaging Library (Fork)\"\n optional = false\n python-versions = \">=3.9\"\n+groups = [\"main\"]\n files = [\n     {file = \"pillow-11.2.1-cp310-cp310-macosx_10_10_x86_64.whl\", hash = \"sha256:d57a75d53922fc20c165016a20d9c44f73305e67c351bbc60d1adaf662e74047\"},\n     {file = \"pillow-11.2.1-cp310-cp310-macosx_11_0_arm64.whl\", hash = \"sha256:127bf6ac4a5b58b3d32fc8289656f77f80567d65660bc46f72c0d77e6600cc95\"},\n@@ -2349,7 +2512,7 @@ fpx = [\"olefile\"]\n mic = [\"olefile\"]\n test-arrow = [\"pyarrow\"]\n tests = [\"check-manifest\", \"coverage (>=7.4.2)\", \"defusedxml\", \"markdown2\", \"olefile\", \"packaging\", \"pyroma\", \"pytest\", \"pytest-cov\", \"pytest-timeout\", \"trove-classifiers (>=2024.10.12)\"]\n-typing = [\"typing-extensions\"]\n+typing = [\"typing-extensions ; python_version < \\\"3.10\\\"\"]\n xmp = [\"defusedxml\"]\n \n [[package]]\n@@ -2358,6 +2521,7 @@ version = \"4.3.7\"\n description = \"A small Python package for determining appropriate platform-specific dirs, e.g. a `user data dir`.\"\n optional = false\n python-versions = \">=3.9\"\n+groups = [\"dev\"]\n files = [\n     {file = \"platformdirs-4.3.7-py3-none-any.whl\", hash = \"sha256:a03875334331946f13c549dbd8f4bac7a13a50a895a0eb1e8c6a8ace80d40a94\"},\n     {file = \"platformdirs-4.3.7.tar.gz\", hash = \"sha256:eb437d586b6a0986388f0d6f74aa0cde27b48d0e3d66843640bfb6bdcdb6e351\"},\n@@ -2374,6 +2538,7 @@ version = \"1.5.0\"\n description = \"plugin and hook calling mechanisms for python\"\n optional = false\n python-versions = \">=3.8\"\n+groups = [\"dev\"]\n files = [\n     {file = \"pluggy-1.5.0-py3-none-any.whl\", hash = \"sha256:44e1ad92c8ca002de6377e165f3e0f1be63266ab4d554740532335b9d75ea669\"},\n     {file = \"pluggy-1.5.0.tar.gz\", hash = \"sha256:2cffa88e94fdc978c4c574f15f9e59b7f4201d439195c3715ca9e2486f1d0cf1\"},\n@@ -2389,6 +2554,7 @@ version = \"3.0.51\"\n description = \"Library for building powerful interactive command lines in Python\"\n optional = false\n python-versions = \">=3.8\"\n+groups = [\"main\"]\n files = [\n     {file = \"prompt_toolkit-3.0.51-py3-none-any.whl\", hash = \"sha256:52742911fde84e2d423e2f9a4cf1de7d7ac4e51958f648d9540e0fb8db077b07\"},\n     {file = \"prompt_toolkit-3.0.51.tar.gz\", hash = \"sha256:931a162e3b27fc90c86f1b48bb1fb2c528c2761475e57c9c06de13311c7b54ed\"},\n@@ -2403,6 +2569,7 @@ version = \"0.3.1\"\n description = \"Accelerated property cache\"\n optional = false\n python-versions = \">=3.9\"\n+groups = [\"main\"]\n files = [\n     {file = \"propcache-0.3.1-cp310-cp310-macosx_10_9_universal2.whl\", hash = \"sha256:f27785888d2fdd918bc36de8b8739f2d6c791399552333721b58193f68ea3e98\"},\n     {file = \"propcache-0.3.1-cp310-cp310-macosx_10_9_x86_64.whl\", hash = \"sha256:d4e89cde74154c7b5957f87a355bb9c8ec929c167b59c83d90654ea36aeb6180\"},\n@@ -2510,6 +2677,7 @@ version = \"1.26.1\"\n description = \"Beautiful, Pythonic protocol buffers\"\n optional = false\n python-versions = \">=3.7\"\n+groups = [\"main\"]\n files = [\n     {file = \"proto_plus-1.26.1-py3-none-any.whl\", hash = \"sha256:13285478c2dcf2abb829db158e1047e2f1e8d63a077d94263c2b88b043c75a66\"},\n     {file = \"proto_plus-1.26.1.tar.gz\", hash = \"sha256:21a515a4c4c0088a773899e23c7bbade3d18f9c66c73edd4c7ee3816bc96a012\"},\n@@ -2527,6 +2695,7 @@ version = \"6.30.2\"\n description = \"\"\n optional = false\n python-versions = \">=3.9\"\n+groups = [\"main\"]\n files = [\n     {file = \"protobuf-6.30.2-cp310-abi3-win32.whl\", hash = \"sha256:b12ef7df7b9329886e66404bef5e9ce6a26b54069d7f7436a0853ccdeb91c103\"},\n     {file = \"protobuf-6.30.2-cp310-abi3-win_amd64.whl\", hash = \"sha256:7653c99774f73fe6b9301b87da52af0e69783a2e371e8b599b3e9cb4da4b12b9\"},\n@@ -2545,6 +2714,7 @@ version = \"0.6.1\"\n description = \"Pure-Python implementation of ASN.1 types and DER/BER/CER codecs (X.208)\"\n optional = false\n python-versions = \">=3.8\"\n+groups = [\"main\"]\n files = [\n     {file = \"pyasn1-0.6.1-py3-none-any.whl\", hash = \"sha256:0d632f46f2ba09143da3a8afe9e33fb6f92fa2320ab7e886e2d0f7672af84629\"},\n     {file = \"pyasn1-0.6.1.tar.gz\", hash = \"sha256:6f580d2bdd84365380830acf45550f2511469f673cb4a5ae3857a3170128b034\"},\n@@ -2556,6 +2726,7 @@ version = \"0.4.2\"\n description = \"A collection of ASN.1-based protocols modules\"\n optional = false\n python-versions = \">=3.8\"\n+groups = [\"main\"]\n files = [\n     {file = \"pyasn1_modules-0.4.2-py3-none-any.whl\", hash = \"sha256:29253a9207ce32b64c3ac6600edc75368f98473906e8fd1043bd6b5b1de2c14a\"},\n     {file = \"pyasn1_modules-0.4.2.tar.gz\", hash = \"sha256:677091de870a80aae844b1ca6134f54652fa2c8c5a52aa396440ac3106e941e6\"},\n@@ -2570,6 +2741,7 @@ version = \"2.11.1\"\n description = \"Python style guide checker\"\n optional = false\n python-versions = \">=3.8\"\n+groups = [\"dev\"]\n files = [\n     {file = \"pycodestyle-2.11.1-py2.py3-none-any.whl\", hash = \"sha256:44fe31000b2d866f2e41841b18528a505fbd7fef9017b04eff4e2648a0fadc67\"},\n     {file = \"pycodestyle-2.11.1.tar.gz\", hash = \"sha256:41ba0e7afc9752dfb53ced5489e89f8186be00e599e712660695b7a75ff2663f\"},\n@@ -2581,6 +2753,7 @@ version = \"2.11.4\"\n description = \"Data validation using Python type hints\"\n optional = false\n python-versions = \">=3.9\"\n+groups = [\"main\"]\n files = [\n     {file = \"pydantic-2.11.4-py3-none-any.whl\", hash = \"sha256:d9615eaa9ac5a063471da949c8fc16376a84afb5024688b3ff885693506764eb\"},\n     {file = \"pydantic-2.11.4.tar.gz\", hash = \"sha256:32738d19d63a226a52eed76645a98ee07c1f410ee41d93b4afbfa85ed8111c2d\"},\n@@ -2594,14 +2767,15 @@ typing-inspection = \">=0.4.0\"\n \n [package.extras]\n email = [\"email-validator (>=2.0.0)\"]\n-timezone = [\"tzdata\"]\n+timezone = [\"tzdata ; python_version >= \\\"3.9\\\" and platform_system == \\\"Windows\\\"\"]\n \n [[package]]\n name = \"pydantic-core\"\n version = \"2.33.2\"\n description = \"Core functionality for Pydantic validation and serialization\"\n optional = false\n python-versions = \">=3.9\"\n+groups = [\"main\"]\n files = [\n     {file = \"pydantic_core-2.33.2-cp310-cp310-macosx_10_12_x86_64.whl\", hash = \"sha256:2b3d326aaef0c0399d9afffeb6367d5e26ddc24d351dbc9c636840ac355dc5d8\"},\n     {file = \"pydantic_core-2.33.2-cp310-cp310-macosx_11_0_arm64.whl\", hash = \"sha256:0e5b2671f05ba48b94cb90ce55d8bdcaaedb8ba00cc5359f6810fc918713983d\"},\n@@ -2713,6 +2887,7 @@ version = \"3.1.0\"\n description = \"passive checker of Python programs\"\n optional = false\n python-versions = \">=3.8\"\n+groups = [\"dev\"]\n files = [\n     {file = \"pyflakes-3.1.0-py2.py3-none-any.whl\", hash = \"sha256:4132f6d49cb4dae6819e5379898f2b8cce3c5f23994194c24b77d5da2e36f774\"},\n     {file = \"pyflakes-3.1.0.tar.gz\", hash = \"sha256:a0aae034c444db0071aa077972ba4768d40c830d9539fd45bf4cd3f8f6992efc\"},\n@@ -2724,6 +2899,7 @@ version = \"2.19.1\"\n description = \"Pygments is a syntax highlighting package written in Python.\"\n optional = false\n python-versions = \">=3.8\"\n+groups = [\"main\"]\n files = [\n     {file = \"pygments-2.19.1-py3-none-any.whl\", hash = \"sha256:9ea1544ad55cecf4b8242fab6dd35a93bbce657034b0611ee383099054ab6d8c\"},\n     {file = \"pygments-2.19.1.tar.gz\", hash = \"sha256:61c16d2a8576dc0649d9f39e089b5f02bcd27fba10d8fb4dcc28173f7a45151f\"},\n@@ -2738,6 +2914,7 @@ version = \"3.2.3\"\n description = \"pyparsing module - Classes and methods to define and execute parsing grammars\"\n optional = false\n python-versions = \">=3.9\"\n+groups = [\"main\"]\n files = [\n     {file = \"pyparsing-3.2.3-py3-none-any.whl\", hash = \"sha256:a749938e02d6fd0b59b356ca504a24982314bb090c383e3cf201c95ef7e2bfcf\"},\n     {file = \"pyparsing-3.2.3.tar.gz\", hash = \"sha256:b9c13f1ab8b3b542f72e28f634bad4de758ab3ce4546e4301970ad6fa77c38be\"},\n@@ -2752,6 +2929,7 @@ version = \"7.4.4\"\n description = \"pytest: simple powerful testing with Python\"\n optional = false\n python-versions = \">=3.7\"\n+groups = [\"dev\"]\n files = [\n     {file = \"pytest-7.4.4-py3-none-any.whl\", hash = \"sha256:b090cdf5ed60bf4c45261be03239c2c1c22df034fbffe691abe93cd80cea01d8\"},\n     {file = \"pytest-7.4.4.tar.gz\", hash = \"sha256:2cf0005922c6ace4a3e2ec8b4080eb0d9753fdc93107415332f50ce9e7994280\"},\n@@ -2772,6 +2950,7 @@ version = \"2.9.0.post0\"\n description = \"Extensions to the standard Python datetime module\"\n optional = false\n python-versions = \"!=3.0.*,!=3.1.*,!=3.2.*,>=2.7\"\n+groups = [\"main\"]\n files = [\n     {file = \"python-dateutil-2.9.0.post0.tar.gz\", hash = \"sha256:37dd54208da7e1cd875388217d5e00ebd4179249f90fb72437e91a35459a0ad3\"},\n     {file = \"python_dateutil-2.9.0.post0-py2.py3-none-any.whl\", hash = \"sha256:a8b2bc7bffae282281c8140a97d3aa9c14da0b136dfe83f850eea9a5f7470427\"},\n@@ -2786,6 +2965,7 @@ version = \"1.0.0\"\n description = \"Read key-value pairs from a .env file and set them as environment variables\"\n optional = false\n python-versions = \">=3.8\"\n+groups = [\"main\"]\n files = [\n     {file = \"python-dotenv-1.0.0.tar.gz\", hash = \"sha256:a8df96034aae6d2d50a4ebe8216326c61c3eb64836776504fcca410e5937a3ba\"},\n     {file = \"python_dotenv-1.0.0-py3-none-any.whl\", hash = \"sha256:f5971a9226b701070a4bf2c38c89e5a3f0d64de8debda981d1db98583009122a\"},\n@@ -2800,6 +2980,7 @@ version = \"2025.2\"\n description = \"World timezone definitions, modern and historical\"\n optional = false\n python-versions = \"*\"\n+groups = [\"main\"]\n files = [\n     {file = \"pytz-2025.2-py2.py3-none-any.whl\", hash = \"sha256:5ddf76296dd8c44c26eb8f4b6f35488f3ccbf6fbbd7adee0b7262d43f0ec2f00\"},\n     {file = \"pytz-2025.2.tar.gz\", hash = \"sha256:360b9e3dbb49a209c21ad61809c7fb453643e048b38924c765813546746e81c3\"},\n@@ -2811,6 +2992,7 @@ version = \"6.0.2\"\n description = \"YAML parser and emitter for Python\"\n optional = false\n python-versions = \">=3.8\"\n+groups = [\"main\"]\n files = [\n     {file = \"PyYAML-6.0.2-cp310-cp310-macosx_10_9_x86_64.whl\", hash = \"sha256:0a9a2848a5b7feac301353437eb7d5957887edbf81d56e903999a75a3d743086\"},\n     {file = \"PyYAML-6.0.2-cp310-cp310-macosx_11_0_arm64.whl\", hash = \"sha256:29717114e51c84ddfba879543fb232a6ed60086602313ca38cce623c1d62cfbf\"},\n@@ -2873,6 +3055,7 @@ version = \"2.1.0\"\n description = \"Python library to build pretty command line user prompts \u2b50\ufe0f\"\n optional = false\n python-versions = \">=3.8\"\n+groups = [\"main\"]\n files = [\n     {file = \"questionary-2.1.0-py3-none-any.whl\", hash = \"sha256:44174d237b68bc828e4878c763a9ad6790ee61990e0ae72927694ead57bab8ec\"},\n     {file = \"questionary-2.1.0.tar.gz\", hash = \"sha256:6302cdd645b19667d8f6e6634774e9538bfcd1aad9be287e743d96cacaf95587\"},\n@@ -2887,6 +3070,7 @@ version = \"2024.11.6\"\n description = \"Alternative regular expression module, to replace re.\"\n optional = false\n python-versions = \">=3.8\"\n+groups = [\"main\"]\n files = [\n     {file = \"regex-2024.11.6-cp310-cp310-macosx_10_9_universal2.whl\", hash = \"sha256:ff590880083d60acc0433f9c3f713c51f7ac6ebb9adf889c79a261ecf541aa91\"},\n     {file = \"regex-2024.11.6-cp310-cp310-macosx_10_9_x86_64.whl\", hash = \"sha256:658f90550f38270639e83ce492f27d2c8d2cd63805c65a13a14d36ca126753f0\"},\n@@ -2990,6 +3174,7 @@ version = \"2.32.3\"\n description = \"Python HTTP for Humans.\"\n optional = false\n python-versions = \">=3.8\"\n+groups = [\"main\"]\n files = [\n     {file = \"requests-2.32.3-py3-none-any.whl\", hash = \"sha256:70761cfe03c773ceb22aa2f671b4757976145175cdfca038c02654d061d6dcc6\"},\n     {file = \"requests-2.32.3.tar.gz\", hash = \"sha256:55365417734eb18255590a9ff9eb97e9e1da868d4ccd6402399eaf68af20a760\"},\n@@ -3011,6 +3196,7 @@ version = \"1.0.0\"\n description = \"A utility belt for advanced users of python-requests\"\n optional = false\n python-versions = \">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*\"\n+groups = [\"main\"]\n files = [\n     {file = \"requests-toolbelt-1.0.0.tar.gz\", hash = \"sha256:7681a0a3d047012b5bdc0ee37d7f8f07ebe76ab08caeccfc3921ce23c88d5bc6\"},\n     {file = \"requests_toolbelt-1.0.0-py2.py3-none-any.whl\", hash = \"sha256:cccfdd665f0a24fcf4726e690f65639d272bb0637b9b92dfd91a5568ccf6bd06\"},\n@@ -3025,6 +3211,7 @@ version = \"13.9.4\"\n description = \"Render rich text, tables, progress bars, syntax highlighting, markdown and more to the terminal\"\n optional = false\n python-versions = \">=3.8.0\"\n+groups = [\"main\"]\n files = [\n     {file = \"rich-13.9.4-py3-none-any.whl\", hash = \"sha256:6049d5e6ec054bf2779ab3358186963bac2ea89175919d699e378b99738c2a90\"},\n     {file = \"rich-13.9.4.tar.gz\", hash = \"sha256:439594978a49a09530cff7ebc4b5c7103ef57baf48d5ea3184f21d9a2befa098\"},\n@@ -3043,6 +3230,7 @@ version = \"0.14.4\"\n description = \"Rich toolkit for building command-line applications\"\n optional = false\n python-versions = \">=3.8\"\n+groups = [\"main\"]\n files = [\n     {file = \"rich_toolkit-0.14.4-py3-none-any.whl\", hash = \"sha256:cc71ebee83eaa122d8e42882408bc5a4bf0240bbf1e368811ee56d249b3d742a\"},\n     {file = \"rich_toolkit-0.14.4.tar.gz\", hash = \"sha256:db256cf45165cae381c9bbf3b48a0fd4d99a07c80155cc655c80212a62e28fe1\"},\n@@ -3059,6 +3247,7 @@ version = \"4.9.1\"\n description = \"Pure-Python RSA implementation\"\n optional = false\n python-versions = \"<4,>=3.6\"\n+groups = [\"main\"]\n files = [\n     {file = \"rsa-4.9.1-py3-none-any.whl\", hash = \"sha256:68635866661c6836b8d39430f97a996acbd61bfa49406748ea243539fe239762\"},\n     {file = \"rsa-4.9.1.tar.gz\", hash = \"sha256:e7bdbfdb5497da4c07dfd35530e1a902659db6ff241e39d9953cad06ebd0ae75\"},\n@@ -3073,6 +3262,7 @@ version = \"1.5.4\"\n description = \"Tool to Detect Surrounding Shell\"\n optional = false\n python-versions = \">=3.7\"\n+groups = [\"main\"]\n files = [\n     {file = \"shellingham-1.5.4-py2.py3-none-any.whl\", hash = \"sha256:7ecfff8f2fd72616f7481040475a65b2bf8af90a56c89140852d1120324e8686\"},\n     {file = \"shellingham-1.5.4.tar.gz\", hash = \"sha256:8dbca0739d487e5bd35ab3ca4b36e11c4078f3a234bfce294b0a0291363404de\"},\n@@ -3084,6 +3274,7 @@ version = \"1.17.0\"\n description = \"Python 2 and 3 compatibility utilities\"\n optional = false\n python-versions = \"!=3.0.*,!=3.1.*,!=3.2.*,>=2.7\"\n+groups = [\"main\"]\n files = [\n     {file = \"six-1.17.0-py2.py3-none-any.whl\", hash = \"sha256:4721f391ed90541fddacab5acf947aa0d3dc7d27b2e1e8eda2be8970586c3274\"},\n     {file = \"six-1.17.0.tar.gz\", hash = \"sha256:ff70335d468e7eb6ec65b95b99d3a2836546063f63acc5171de367e834932a81\"},\n@@ -3095,6 +3286,7 @@ version = \"1.3.1\"\n description = \"Sniff out which async library your code is running under\"\n optional = false\n python-versions = \">=3.7\"\n+groups = [\"main\"]\n files = [\n     {file = \"sniffio-1.3.1-py3-none-any.whl\", hash = \"sha256:2f6da418d1f1e0fddd844478f41680e794e6051915791a034ff65e5f100525a2\"},\n     {file = \"sniffio-1.3.1.tar.gz\", hash = \"sha256:f4324edc670a0f49750a81b895f35c3adb843cca46f0530f79fc1babb23789dc\"},\n@@ -3106,6 +3298,7 @@ version = \"2.0.40\"\n description = \"Database Abstraction Library\"\n optional = false\n python-versions = \">=3.7\"\n+groups = [\"main\"]\n files = [\n     {file = \"SQLAlchemy-2.0.40-cp37-cp37m-macosx_10_9_x86_64.whl\", hash = \"sha256:ae9597cab738e7cc823f04a704fb754a9249f0b6695a6aeb63b74055cd417a96\"},\n     {file = \"SQLAlchemy-2.0.40-cp37-cp37m-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:37a5c21ab099a83d669ebb251fddf8f5cee4d75ea40a5a1653d9c43d60e20867\"},\n@@ -3195,12 +3388,25 @@ postgresql-psycopgbinary = [\"psycopg[binary] (>=3.0.7)\"]\n pymysql = [\"pymysql\"]\n sqlcipher = [\"sqlcipher3_binary\"]\n \n+[[package]]\n+name = \"sseclient-py\"\n+version = \"1.8.0\"\n+description = \"SSE client for Python\"\n+optional = false\n+python-versions = \"*\"\n+groups = [\"main\"]\n+files = [\n+    {file = \"sseclient-py-1.8.0.tar.gz\", hash = \"sha256:c547c5c1a7633230a38dc599a21a2dc638f9b5c297286b48b46b935c71fac3e8\"},\n+    {file = \"sseclient_py-1.8.0-py2.py3-none-any.whl\", hash = \"sha256:4ecca6dc0b9f963f8384e9d7fd529bf93dd7d708144c4fb5da0e0a1a926fee83\"},\n+]\n+\n [[package]]\n name = \"starlette\"\n version = \"0.27.0\"\n description = \"The little ASGI library that shines.\"\n optional = false\n python-versions = \">=3.7\"\n+groups = [\"main\"]\n files = [\n     {file = \"starlette-0.27.0-py3-none-any.whl\", hash = \"sha256:918416370e846586541235ccd38a474c08b80443ed31c578a418e2209b3eef91\"},\n     {file = \"starlette-0.27.0.tar.gz\", hash = \"sha256:6a6b0d042acb8d469a01eba54e9cda6cbd24ac602c4cd016723117d6a7e73b75\"},\n@@ -3218,6 +3424,7 @@ version = \"0.9.0\"\n description = \"Pretty-print tabular data\"\n optional = false\n python-versions = \">=3.7\"\n+groups = [\"main\"]\n files = [\n     {file = \"tabulate-0.9.0-py3-none-any.whl\", hash = \"sha256:024ca478df22e9340661486f85298cff5f6dcdba14f3813e8830015b9ed1948f\"},\n     {file = \"tabulate-0.9.0.tar.gz\", hash = \"sha256:0095b12bf5966de529c0feb1fa08671671b3368eec77d7ef7ab114be2c068b3c\"},\n@@ -3232,6 +3439,7 @@ version = \"8.5.0\"\n description = \"Retry code until it succeeds\"\n optional = false\n python-versions = \">=3.8\"\n+groups = [\"main\"]\n files = [\n     {file = \"tenacity-8.5.0-py3-none-any.whl\", hash = \"sha256:b594c2a5945830c267ce6b79a166228323ed52718f30302c1359836112346687\"},\n     {file = \"tenacity-8.5.0.tar.gz\", hash = \"sha256:8bc6c0c8a09b31e6cad13c47afbed1a567518250a9a171418582ed8d9c20ca78\"},\n@@ -3247,6 +3455,7 @@ version = \"0.9.0\"\n description = \"tiktoken is a fast BPE tokeniser for use with OpenAI's models\"\n optional = false\n python-versions = \">=3.9\"\n+groups = [\"main\"]\n files = [\n     {file = \"tiktoken-0.9.0-cp310-cp310-macosx_10_12_x86_64.whl\", hash = \"sha256:586c16358138b96ea804c034b8acf3f5d3f0258bd2bc3b0227af4af5d622e382\"},\n     {file = \"tiktoken-0.9.0-cp310-cp310-macosx_11_0_arm64.whl\", hash = \"sha256:d9c59ccc528c6c5dd51820b3474402f69d9a9e1d656226848ad68a8d5b2e5108\"},\n@@ -3294,6 +3503,7 @@ version = \"4.67.1\"\n description = \"Fast, Extensible Progress Meter\"\n optional = false\n python-versions = \">=3.7\"\n+groups = [\"main\"]\n files = [\n     {file = \"tqdm-4.67.1-py3-none-any.whl\", hash = \"sha256:26445eca388f82e72884e0d580d5464cd801a3ea01e63e5601bdff9ba6a48de2\"},\n     {file = \"tqdm-4.67.1.tar.gz\", hash = \"sha256:f8aef9c52c08c13a65f30ea34f4e5aac3fd1a34959879d7e59e63027286627f2\"},\n@@ -3315,6 +3525,7 @@ version = \"0.15.3\"\n description = \"Typer, build great CLIs. Easy to code. Based on Python type hints.\"\n optional = false\n python-versions = \">=3.7\"\n+groups = [\"main\"]\n files = [\n     {file = \"typer-0.15.3-py3-none-any.whl\", hash = \"sha256:c86a65ad77ca531f03de08d1b9cb67cd09ad02ddddf4b34745b5008f43b239bd\"},\n     {file = \"typer-0.15.3.tar.gz\", hash = \"sha256:818873625d0569653438316567861899f7e9972f2e6e0c16dab608345ced713c\"},\n@@ -3332,6 +3543,7 @@ version = \"4.13.2\"\n description = \"Backported and Experimental Type Hints for Python 3.8+\"\n optional = false\n python-versions = \">=3.8\"\n+groups = [\"main\"]\n files = [\n     {file = \"typing_extensions-4.13.2-py3-none-any.whl\", hash = \"sha256:a439e7c04b49fec3e5d3e2beaa21755cadbbdc391694e28ccdd36ca4a1408f8c\"},\n     {file = \"typing_extensions-4.13.2.tar.gz\", hash = \"sha256:e6c81219bd689f51865d9e372991c540bda33a0379d5573cddb9a3a23f7caaef\"},\n@@ -3343,6 +3555,7 @@ version = \"0.4.0\"\n description = \"Runtime typing introspection tools\"\n optional = false\n python-versions = \">=3.9\"\n+groups = [\"main\"]\n files = [\n     {file = \"typing_inspection-0.4.0-py3-none-any.whl\", hash = \"sha256:50e72559fcd2a6367a19f7a7e610e6afcb9fac940c650290eed893d61386832f\"},\n     {file = \"typing_inspection-0.4.0.tar.gz\", hash = \"sha256:9765c87de36671694a67904bf2c96e395be9c6439bb6c87b5142569dcdd65122\"},\n@@ -3357,6 +3570,7 @@ version = \"2025.2\"\n description = \"Provider of IANA time zone data\"\n optional = false\n python-versions = \">=2\"\n+groups = [\"main\"]\n files = [\n     {file = \"tzdata-2025.2-py2.py3-none-any.whl\", hash = \"sha256:1a403fada01ff9221ca8044d701868fa132215d84beb92242d9acd2147f667a8\"},\n     {file = \"tzdata-2025.2.tar.gz\", hash = \"sha256:b60a638fcc0daffadf82fe0f57e53d06bdec2f36c4df66280ae79bce6bd6f2b9\"},\n@@ -3368,13 +3582,14 @@ version = \"2.4.0\"\n description = \"HTTP library with thread-safe connection pooling, file post, and more.\"\n optional = false\n python-versions = \">=3.9\"\n+groups = [\"main\"]\n files = [\n     {file = \"urllib3-2.4.0-py3-none-any.whl\", hash = \"sha256:4e16665048960a0900c702d4a66415956a584919c03361cac9f1df5c5dd7e813\"},\n     {file = \"urllib3-2.4.0.tar.gz\", hash = \"sha256:414bc6535b787febd7567804cc015fee39daab8ad86268f1310a9250697de466\"},\n ]\n \n [package.extras]\n-brotli = [\"brotli (>=1.0.9)\", \"brotlicffi (>=0.8.0)\"]\n+brotli = [\"brotli (>=1.0.9) ; platform_python_implementation == \\\"CPython\\\"\", \"brotlicffi (>=0.8.0) ; platform_python_implementation != \\\"CPython\\\"\"]\n h2 = [\"h2 (>=4,<5)\"]\n socks = [\"pysocks (>=1.5.6,!=1.5.7,<2.0)\"]\n zstd = [\"zstandard (>=0.18.0)\"]\n@@ -3385,6 +3600,7 @@ version = \"0.34.2\"\n description = \"The lightning-fast ASGI server.\"\n optional = false\n python-versions = \">=3.9\"\n+groups = [\"main\"]\n files = [\n     {file = \"uvicorn-0.34.2-py3-none-any.whl\", hash = \"sha256:deb49af569084536d269fe0a6d67e3754f104cf03aba7c11c40f01aadf33c403\"},\n     {file = \"uvicorn-0.34.2.tar.gz\", hash = \"sha256:0e929828f6186353a80b58ea719861d2629d766293b6d19baf086ba31d4f3328\"},\n@@ -3397,19 +3613,21 @@ h11 = \">=0.8\"\n httptools = {version = \">=0.6.3\", optional = true, markers = \"extra == \\\"standard\\\"\"}\n python-dotenv = {version = \">=0.13\", optional = true, markers = \"extra == \\\"standard\\\"\"}\n pyyaml = {version = \">=5.1\", optional = true, markers = \"extra == \\\"standard\\\"\"}\n-uvloop = {version = \">=0.14.0,<0.15.0 || >0.15.0,<0.15.1 || >0.15.1\", optional = true, markers = \"(sys_platform != \\\"win32\\\" and sys_platform != \\\"cygwin\\\") and platform_python_implementation != \\\"PyPy\\\" and extra == \\\"standard\\\"\"}\n+uvloop = {version = \">=0.14.0,<0.15.0 || >0.15.0,<0.15.1 || >0.15.1\", optional = true, markers = \"sys_platform != \\\"win32\\\" and sys_platform != \\\"cygwin\\\" and platform_python_implementation != \\\"PyPy\\\" and extra == \\\"standard\\\"\"}\n watchfiles = {version = \">=0.13\", optional = true, markers = \"extra == \\\"standard\\\"\"}\n websockets = {version = \">=10.4\", optional = true, markers = \"extra == \\\"standard\\\"\"}\n \n [package.extras]\n-standard = [\"colorama (>=0.4)\", \"httptools (>=0.6.3)\", \"python-dotenv (>=0.13)\", \"pyyaml (>=5.1)\", \"uvloop (>=0.14.0,!=0.15.0,!=0.15.1)\", \"watchfiles (>=0.13)\", \"websockets (>=10.4)\"]\n+standard = [\"colorama (>=0.4) ; sys_platform == \\\"win32\\\"\", \"httptools (>=0.6.3)\", \"python-dotenv (>=0.13)\", \"pyyaml (>=5.1)\", \"uvloop (>=0.14.0,!=0.15.0,!=0.15.1) ; sys_platform != \\\"win32\\\" and sys_platform != \\\"cygwin\\\" and platform_python_implementation != \\\"PyPy\\\"\", \"watchfiles (>=0.13)\", \"websockets (>=10.4)\"]\n \n [[package]]\n name = \"uvloop\"\n version = \"0.21.0\"\n description = \"Fast implementation of asyncio event loop on top of libuv\"\n optional = false\n python-versions = \">=3.8.0\"\n+groups = [\"main\"]\n+markers = \"sys_platform != \\\"win32\\\" and sys_platform != \\\"cygwin\\\" and platform_python_implementation != \\\"PyPy\\\"\"\n files = [\n     {file = \"uvloop-0.21.0-cp310-cp310-macosx_10_9_universal2.whl\", hash = \"sha256:ec7e6b09a6fdded42403182ab6b832b71f4edaf7f37a9a0e371a01db5f0cb45f\"},\n     {file = \"uvloop-0.21.0-cp310-cp310-macosx_10_9_x86_64.whl\", hash = \"sha256:196274f2adb9689a289ad7d65700d37df0c0930fd8e4e743fa4834e850d7719d\"},\n@@ -3461,6 +3679,7 @@ version = \"1.0.5\"\n description = \"Simple, modern and high performance file watching and code reload in python.\"\n optional = false\n python-versions = \">=3.9\"\n+groups = [\"main\"]\n files = [\n     {file = \"watchfiles-1.0.5-cp310-cp310-macosx_10_12_x86_64.whl\", hash = \"sha256:5c40fe7dd9e5f81e0847b1ea64e1f5dd79dd61afbedb57759df06767ac719b40\"},\n     {file = \"watchfiles-1.0.5-cp310-cp310-macosx_11_0_arm64.whl\", hash = \"sha256:8c0db396e6003d99bb2d7232c957b5f0b5634bbd1b24e381a5afcc880f7373fb\"},\n@@ -3544,6 +3763,7 @@ version = \"0.2.13\"\n description = \"Measures the displayed width of unicode strings in a terminal\"\n optional = false\n python-versions = \"*\"\n+groups = [\"main\"]\n files = [\n     {file = \"wcwidth-0.2.13-py2.py3-none-any.whl\", hash = \"sha256:3da69048e4540d84af32131829ff948f1e022c1c6bdb8d6102117aac784f6859\"},\n     {file = \"wcwidth-0.2.13.tar.gz\", hash = \"sha256:72ea0c06399eb286d978fdedb6923a9eb47e1c486ce63e9b4e64fc18303972b5\"},\n@@ -3555,6 +3775,7 @@ version = \"15.0.1\"\n description = \"An implementation of the WebSocket Protocol (RFC 6455 & 7692)\"\n optional = false\n python-versions = \">=3.9\"\n+groups = [\"main\"]\n files = [\n     {file = \"websockets-15.0.1-cp310-cp310-macosx_10_9_universal2.whl\", hash = \"sha256:d63efaa0cd96cf0c5fe4d581521d9fa87744540d4bc999ae6e08595a1014b45b\"},\n     {file = \"websockets-15.0.1-cp310-cp310-macosx_10_9_x86_64.whl\", hash = \"sha256:ac60e3b188ec7574cb761b08d50fcedf9d77f1530352db4eef1707fe9dee7205\"},\n@@ -3633,6 +3854,7 @@ version = \"1.20.0\"\n description = \"Yet another URL library\"\n optional = false\n python-versions = \">=3.9\"\n+groups = [\"main\"]\n files = [\n     {file = \"yarl-1.20.0-cp310-cp310-macosx_10_9_universal2.whl\", hash = \"sha256:f1f6670b9ae3daedb325fa55fbe31c22c8228f6e0b513772c2e1c623caa6ab22\"},\n     {file = \"yarl-1.20.0-cp310-cp310-macosx_10_9_x86_64.whl\", hash = \"sha256:85a231fa250dfa3308f3c7896cc007a47bc76e9e8e8595c20b7426cac4884c62\"},\n@@ -3746,6 +3968,6 @@ multidict = \">=4.0\"\n propcache = \">=0.2.1\"\n \n [metadata]\n-lock-version = \"2.0\"\n+lock-version = \"2.1\"\n python-versions = \"^3.11\"\n-content-hash = \"4b63c0cbfd37b7262e6b1364ae4e7ce6c8b410933f3f8e62f12af5ed9646203e\"\n+content-hash = \"680ad21758c391683e2eab88c4c6733c3c9b41942066b999e18769d313e64dbd\"", "blob_url": "https://github.com/virattt/ai-hedge-fund/blob/626e4d48a5c47b47f10d0a878b82471fc14bddf5/poetry.lock", "raw_url": "https://github.com/virattt/ai-hedge-fund/raw/626e4d48a5c47b47f10d0a878b82471fc14bddf5/poetry.lock", "contents_url": "https://api.github.com/repos/virattt/ai-hedge-fund/contents/poetry.lock?ref=626e4d48a5c47b47f10d0a878b82471fc14bddf5"}, {"filename": "pyproject.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "patch": "@@ -34,6 +34,7 @@ pydantic = \"^2.4.2\"\n httpx = \"^0.27.0\"\n sqlalchemy = \"^2.0.22\"\n alembic = \"^1.12.0\"\n+alpaca-py = \"^0.40.2\"\n \n [tool.poetry.group.dev.dependencies]\n pytest = \"^7.4.0\"", "blob_url": "https://github.com/virattt/ai-hedge-fund/blob/626e4d48a5c47b47f10d0a878b82471fc14bddf5/pyproject.toml", "raw_url": "https://github.com/virattt/ai-hedge-fund/raw/626e4d48a5c47b47f10d0a878b82471fc14bddf5/pyproject.toml", "contents_url": "https://api.github.com/repos/virattt/ai-hedge-fund/contents/pyproject.toml?ref=626e4d48a5c47b47f10d0a878b82471fc14bddf5"}, {"filename": "src/trader.py", "status": "added", "additions": 267, "deletions": 0, "changes": 267, "patch": "@@ -0,0 +1,267 @@\n+\"\"\"Live trading CLI for the AI hedge fund.\"\"\"\n+\n+import sys\n+import argparse\n+from dotenv import load_dotenv\n+import questionary\n+from colorama import Fore, Style, init\n+\n+from src.trading.trader import create_trader\n+from src.utils.analysts import ANALYST_ORDER\n+from src.llm.models import LLM_ORDER, OLLAMA_LLM_ORDER, get_model_info, ModelProvider\n+from src.utils.ollama import ensure_ollama_and_model\n+\n+# Load environment variables\n+load_dotenv()\n+init(autoreset=True)\n+\n+\n+def main():\n+    \"\"\"Main CLI entry point for live trading.\"\"\"\n+    parser = argparse.ArgumentParser(description=\"Run live trading with AI hedge fund\")\n+    parser.add_argument(\"--tickers\", type=str, help=\"Comma-separated list of stock ticker symbols\")\n+    parser.add_argument(\"--dry-run\", action=\"store_true\", help=\"Show decisions but don't execute trades\")\n+    parser.add_argument(\"--ignore-market-hours\", action=\"store_true\", help=\"Run even when market is closed (useful with --dry-run)\")\n+    parser.add_argument(\"--continuous\", action=\"store_true\", help=\"Run continuous trading\")\n+    parser.add_argument(\"--interval\", type=int, default=60, help=\"Trading interval in minutes (default: 60)\")\n+    parser.add_argument(\"--available-capital\", type=float, help=\"Override available capital (uses broker cash if not specified)\")\n+    parser.add_argument(\"--margin-requirement\", type=float, help=\"Margin requirement ratio for short positions (uses broker default if not specified)\")\n+    parser.add_argument(\"--show-reasoning\", action=\"store_true\", help=\"Show reasoning from each agent\")\n+    parser.add_argument(\"--ollama\", action=\"store_true\", help=\"Use Ollama for local LLM inference\")\n+    parser.add_argument(\"--analysts\", type=str, help=\"Comma-separated list of analysts to use\")\n+    parser.add_argument(\"--analysts-all\", action=\"store_true\", help=\"Use all available analysts\")\n+    parser.add_argument(\"--list-analysts\", action=\"store_true\", help=\"List all available analysts and exit\")\n+    parser.add_argument(\"--model\", type=str, help=\"LLM model name to use\")\n+    parser.add_argument(\"--list-models\", action=\"store_true\", help=\"List all available models and exit\")\n+\n+    args = parser.parse_args()\n+\n+    # Handle list options\n+    if args.list_analysts:\n+        print(f\"\\n{Fore.CYAN}Available Analysts:{Style.RESET_ALL}\")\n+        for display, value in ANALYST_ORDER:\n+            print(f\"  {Fore.GREEN}{value:<25}{Style.RESET_ALL} - {display}\")\n+        print(f\"\\n{Fore.YELLOW}Usage examples:{Style.RESET_ALL}\")\n+        print(f\"  --analysts warren_buffett,michael_burry\")\n+        print(f\"  --analysts-all\")\n+        sys.exit(0)\n+\n+    if args.list_models:\n+        print(f\"\\n{Fore.CYAN}Available Models:{Style.RESET_ALL}\")\n+        print(f\"\\n{Fore.YELLOW}Cloud Models:{Style.RESET_ALL}\")\n+        for display, name, provider in LLM_ORDER:\n+            print(f\"  {Fore.GREEN}{name:<25}{Style.RESET_ALL} - {display} ({provider})\")\n+        \n+        print(f\"\\n{Fore.YELLOW}Ollama Models:{Style.RESET_ALL}\")\n+        for display, name, _ in OLLAMA_LLM_ORDER:\n+            print(f\"  {Fore.GREEN}{name:<25}{Style.RESET_ALL} - {display}\")\n+        \n+        print(f\"\\n{Fore.YELLOW}Usage examples:{Style.RESET_ALL}\")\n+        print(f\"  --model gpt-4o\")\n+        print(f\"  --model claude-3-5-sonnet-20241022\")\n+        print(f\"  --ollama --model llama3\")\n+        sys.exit(0)\n+\n+    # Check if tickers are required\n+    if not args.tickers:\n+        print(f\"{Fore.RED}Error: --tickers is required for trading operations{Style.RESET_ALL}\")\n+        print(\"Use --list-analysts or --list-models to see available options\")\n+        sys.exit(1)\n+\n+\n+    # Parse tickers\n+    tickers = [ticker.strip().upper() for ticker in args.tickers.split(\",\")]\n+    print(f\"\\n{Fore.CYAN}Trading tickers: {', '.join(tickers)}{Style.RESET_ALL}\")\n+\n+\n+    # Select analysts\n+    selected_analysts = None\n+    if args.analysts_all:\n+        selected_analysts = [a[1] for a in ANALYST_ORDER]\n+    elif args.analysts:\n+        selected_analysts = [a.strip() for a in args.analysts.split(\",\") if a.strip()]\n+    else:\n+        selected_analysts = questionary.checkbox(\n+            \"Select your AI analysts:\",\n+            choices=[questionary.Choice(display, value=value) for display, value in ANALYST_ORDER],\n+            instruction=\"\\n\\nInstructions:\\n1. Press Space to select/unselect analysts\\n2. Press 'a' to select/unselect all\\n3. Press Enter when done\\n\",\n+            validate=lambda x: len(x) > 0 or \"You must select at least one analyst.\",\n+            style=questionary.Style([\n+                (\"checkbox-selected\", \"fg:green\"),\n+                (\"selected\", \"fg:green noinherit\"),\n+                (\"highlighted\", \"noinherit\"),\n+                (\"pointer\", \"noinherit\"),\n+            ])\n+        ).ask()\n+\n+    if not selected_analysts:\n+        print(\"\\nExiting...\")\n+        sys.exit(0)\n+\n+    print(f\"\\nSelected analysts: {', '.join(Fore.GREEN + choice.title().replace('_', ' ') + Style.RESET_ALL for choice in selected_analysts)}\")\n+\n+    # Select LLM model\n+    model_name = \"\"\n+    model_provider = \"\"\n+\n+    if args.model:\n+        # Model specified via CLI\n+        model_name = args.model\n+        if args.ollama:\n+            model_provider = ModelProvider.OLLAMA.value\n+            if not ensure_ollama_and_model(model_name):\n+                print(f\"{Fore.RED}Cannot proceed without Ollama and the selected model{Style.RESET_ALL}\")\n+                sys.exit(1)\n+        else:\n+            # Try to find the model in the LLM_ORDER\n+            found = False\n+            for display, name, provider in LLM_ORDER:\n+                if name == model_name:\n+                    model_provider = provider\n+                    found = True\n+                    break\n+            if not found:\n+                print(f\"{Fore.RED}Model '{model_name}' not found in available models{Style.RESET_ALL}\")\n+                sys.exit(1)\n+        print(f\"\\nUsing model: {Fore.GREEN + Style.BRIGHT}{model_name}{Style.RESET_ALL} ({model_provider})\")\n+\n+    elif args.ollama:\n+        print(f\"{Fore.CYAN}Using Ollama for local LLM inference{Style.RESET_ALL}\")\n+        \n+        model_name = questionary.select(\n+            \"Select your Ollama model:\",\n+            choices=[questionary.Choice(display, value=value) for display, value, _ in OLLAMA_LLM_ORDER],\n+            style=questionary.Style([\n+                (\"selected\", \"fg:green bold\"),\n+                (\"pointer\", \"fg:green bold\"),\n+                (\"highlighted\", \"fg:green\"),\n+                (\"answer\", \"fg:green bold\"),\n+            ])\n+        ).ask()\n+\n+        if not model_name:\n+            print(\"\\nExiting...\")\n+            sys.exit(0)\n+\n+        if model_name == \"-\":\n+            model_name = questionary.text(\"Enter the custom model name:\").ask()\n+            if not model_name:\n+                print(\"\\nExiting...\")\n+                sys.exit(0)\n+\n+        if not ensure_ollama_and_model(model_name):\n+            print(f\"{Fore.RED}Cannot proceed without Ollama and the selected model{Style.RESET_ALL}\")\n+            sys.exit(1)\n+\n+        model_provider = ModelProvider.OLLAMA.value\n+        print(f\"\\nSelected {Fore.CYAN}Ollama{Style.RESET_ALL} model: {Fore.GREEN + Style.BRIGHT}{model_name}{Style.RESET_ALL}\")\n+\n+    else:\n+        model_choice = questionary.select(\n+            \"Select your LLM model:\",\n+            choices=[questionary.Choice(display, value=(name, provider)) for display, name, provider in LLM_ORDER],\n+            style=questionary.Style([\n+                (\"selected\", \"fg:green bold\"),\n+                (\"pointer\", \"fg:green bold\"),\n+                (\"highlighted\", \"fg:green\"),\n+                (\"answer\", \"fg:green bold\"),\n+            ])\n+        ).ask()\n+\n+        if not model_choice:\n+            print(\"\\nExiting...\")\n+            sys.exit(0)\n+\n+        model_name, model_provider = model_choice\n+\n+        model_info = get_model_info(model_name, model_provider)\n+        if model_info and model_info.is_custom():\n+            model_name = questionary.text(\"Enter the custom model name:\").ask()\n+            if not model_name:\n+                print(\"\\nExiting...\")\n+                sys.exit(0)\n+\n+        print(f\"\\nSelected {Fore.CYAN}{model_provider}{Style.RESET_ALL} model: {Fore.GREEN + Style.BRIGHT}{model_name}{Style.RESET_ALL}\")\n+\n+    # Create trader\n+    print(f\"\\n{Fore.CYAN}Creating trader...{Style.RESET_ALL}\")\n+    trader = create_trader(\n+        tickers=tickers,\n+        selected_analysts=selected_analysts,\n+        model_name=model_name,\n+        model_provider=model_provider,\n+        available_capital=args.available_capital,\n+        margin_requirement=args.margin_requirement,\n+        dry_run=args.dry_run,\n+        ignore_market_hours=args.ignore_market_hours\n+    )\n+\n+    # Connect to broker\n+    print(f\"\\n{Fore.CYAN}Connecting to broker...{Style.RESET_ALL}\")\n+    if not trader.connect():\n+        print(f\"{Fore.RED}Failed to connect to broker{Style.RESET_ALL}\")\n+        sys.exit(1)\n+    \n+    # Get margin requirement from broker if not specified\n+    if args.margin_requirement is None:\n+        try:\n+            # Get account default margin requirement\n+            broker_margin_req = trader.broker.get_margin_requirement()\n+            trader.margin_requirement = broker_margin_req\n+            print(f\"{Fore.CYAN}Using broker default margin requirement: {broker_margin_req:.1%}{Style.RESET_ALL}\")\n+            \n+            # Show ticker-specific margin requirements\n+            print(f\"{Fore.CYAN}Ticker-specific margin requirements:{Style.RESET_ALL}\")\n+            for ticker in tickers:\n+                try:\n+                    ticker_margin = trader.broker.get_margin_requirement(ticker)\n+                    print(f\"  {ticker}: {ticker_margin:.1%}\")\n+                except Exception as e:\n+                    print(f\"  {ticker}: {broker_margin_req:.1%} (default - could not get specific requirement)\")\n+        except Exception as e:\n+            trader.margin_requirement = 0.5  # Default fallback\n+            print(f\"{Fore.YELLOW}Could not get broker margin requirement, using default 50%{Style.RESET_ALL}\")\n+    \n+    # Show capital usage information\n+    if args.available_capital:\n+        print(f\"{Fore.CYAN}Using limited capital: ${args.available_capital:,.2f} (maintaining account margin capability){Style.RESET_ALL}\")\n+    \n+    # Check for live trading warning after connection\n+    if not trader.broker.is_paper_trading():\n+        confirm = questionary.confirm(\n+            f\"{Fore.RED}WARNING: Connected to LIVE TRADING account with real money. Are you sure you want to continue?{Style.RESET_ALL}\",\n+            default=False\n+        ).ask()\n+        if not confirm:\n+            print(\"Exiting...\")\n+            trader.disconnect()\n+            sys.exit(0)\n+\n+    try:\n+        # Show portfolio summary\n+        trader.print_portfolio_summary()\n+\n+        # Run trading\n+        if args.continuous:\n+            print(f\"\\n{Fore.BLUE}Starting continuous trading mode...{Style.RESET_ALL}\")\n+            trader.run_continuous_trading(interval_minutes=args.interval)\n+        else:\n+            print(f\"\\n{Fore.BLUE}Running single trading session...{Style.RESET_ALL}\")\n+            trader.run_trading_session()\n+            \n+            # Show updated portfolio\n+            trader.print_portfolio_summary()\n+\n+    except KeyboardInterrupt:\n+        print(f\"\\n{Fore.YELLOW}Trading interrupted by user{Style.RESET_ALL}\")\n+    except Exception as e:\n+        print(f\"\\n{Fore.RED}Trading failed: {e}{Style.RESET_ALL}\")\n+        sys.exit(1)\n+    finally:\n+        trader.disconnect()\n+\n+    print(f\"\\n{Fore.GREEN}Trading session completed{Style.RESET_ALL}\")\n+\n+\n+if __name__ == \"__main__\":\n+    main()\n\\ No newline at end of file", "blob_url": "https://github.com/virattt/ai-hedge-fund/blob/626e4d48a5c47b47f10d0a878b82471fc14bddf5/src%2Ftrader.py", "raw_url": "https://github.com/virattt/ai-hedge-fund/raw/626e4d48a5c47b47f10d0a878b82471fc14bddf5/src%2Ftrader.py", "contents_url": "https://api.github.com/repos/virattt/ai-hedge-fund/contents/src%2Ftrader.py?ref=626e4d48a5c47b47f10d0a878b82471fc14bddf5"}, {"filename": "src/trading/__init__.py", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "patch": "@@ -0,0 +1 @@\n+\"\"\"Trading module for real broker integration.\"\"\"\n\\ No newline at end of file", "blob_url": "https://github.com/virattt/ai-hedge-fund/blob/626e4d48a5c47b47f10d0a878b82471fc14bddf5/src%2Ftrading%2F__init__.py", "raw_url": "https://github.com/virattt/ai-hedge-fund/raw/626e4d48a5c47b47f10d0a878b82471fc14bddf5/src%2Ftrading%2F__init__.py", "contents_url": "https://api.github.com/repos/virattt/ai-hedge-fund/contents/src%2Ftrading%2F__init__.py?ref=626e4d48a5c47b47f10d0a878b82471fc14bddf5"}, {"filename": "src/trading/alpaca_broker.py", "status": "added", "additions": 390, "deletions": 0, "changes": 390, "patch": "@@ -0,0 +1,390 @@\n+\"\"\"Alpaca broker implementation for live trading.\"\"\"\n+\n+import os\n+from alpaca.trading.client import TradingClient\n+from alpaca.trading.requests import MarketOrderRequest, LimitOrderRequest, StopOrderRequest\n+from alpaca.trading.enums import OrderSide, TimeInForce, OrderType\n+from alpaca.data.historical import StockHistoricalDataClient\n+from alpaca.data.requests import StockLatestQuoteRequest\n+from alpaca.common.exceptions import APIError\n+from colorama import Fore, Style\n+import logging\n+\n+from .broker_base import BrokerBase, Position, Order, Account\n+\n+\n+logger = logging.getLogger(__name__)\n+\n+\n+class AlpacaBroker(BrokerBase):\n+    \"\"\"Alpaca broker implementation.\"\"\"\n+    \n+    def __init__(self, paper_trading: bool = None):\n+        \"\"\"Initialize Alpaca broker.\n+        \n+        Args:\n+            paper_trading: Whether to use paper trading account. If None, reads from ALPACA_PAPER env var.\n+        \"\"\"\n+        # Read from environment variable if not explicitly set\n+        if paper_trading is None:\n+            paper_trading = os.getenv(\"ALPACA_PAPER\", \"true\").lower() in (\"true\", \"1\", \"yes\")\n+        \n+        self.paper_trading = paper_trading\n+        self.trading_client = None\n+        self.data_client = None\n+        self._connected = False\n+        \n+        # Check required environment variables\n+        required_vars = [\"ALPACA_API_KEY\", \"ALPACA_SECRET_KEY\"]\n+        missing_vars = [var for var in required_vars if not os.getenv(var)]\n+        \n+        if missing_vars:\n+            raise ValueError(f\"Missing required environment variables: {', '.join(missing_vars)}. Please set these in your .env file\")\n+        \n+        # Get API credentials from environment\n+        self.api_key = os.getenv(\"ALPACA_API_KEY\")\n+        self.secret_key = os.getenv(\"ALPACA_SECRET_KEY\")\n+    \n+    def connect(self) -> bool:\n+        \"\"\"Connect to Alpaca API.\"\"\"\n+        try:\n+            self.trading_client = TradingClient(\n+                api_key=self.api_key,\n+                secret_key=self.secret_key,\n+                paper=self.paper_trading\n+            )\n+            \n+            self.data_client = StockHistoricalDataClient(\n+                api_key=self.api_key,\n+                secret_key=self.secret_key\n+            )\n+            \n+            # Test connection by getting account info\n+            account = self.trading_client.get_account()\n+            self._connected = True\n+            \n+            env_type = \"Paper\" if self.paper_trading else \"Live\"\n+            print(f\"{Fore.GREEN}Connected to Alpaca {env_type} Trading API{Style.RESET_ALL}\")\n+            print(f\"Account Status: {account.status}\")\n+            print(f\"Buying Power: ${float(account.buying_power):,.2f}\")\n+            \n+            return True\n+            \n+        except APIError as e:\n+            logger.error(f\"Failed to connect to Alpaca: {e}\")\n+            print(f\"{Fore.RED}Failed to connect to Alpaca: {e}{Style.RESET_ALL}\")\n+            return False\n+        except Exception as e:\n+            logger.error(f\"Unexpected error connecting to Alpaca: {e}\")\n+            print(f\"{Fore.RED}Unexpected error: {e}{Style.RESET_ALL}\")\n+            return False\n+    \n+    def disconnect(self) -> None:\n+        \"\"\"Disconnect from Alpaca API.\"\"\"\n+        self.trading_client = None\n+        self.data_client = None\n+        self._connected = False\n+        print(f\"{Fore.YELLOW}Disconnected from Alpaca API{Style.RESET_ALL}\")\n+    \n+    def get_account(self) -> Account:\n+        \"\"\"Get current account information.\"\"\"\n+        if not self._connected:\n+            raise RuntimeError(\"Not connected to broker\")\n+        \n+        account = self.trading_client.get_account()\n+        \n+        return Account(\n+            cash=float(account.cash),\n+            buying_power=float(account.buying_power),\n+            portfolio_value=float(account.portfolio_value),\n+            equity=float(account.equity),\n+            initial_margin=float(account.initial_margin),\n+            maintenance_margin=float(account.maintenance_margin),\n+            sma=float(account.sma),\n+            day_trade_count=int(account.daytrade_count),\n+            regt_buying_power=float(account.regt_buying_power),\n+            daytrading_buying_power=float(account.daytrading_buying_power),\n+            multiplier=float(account.multiplier)\n+        )\n+    \n+    def get_positions(self) -> list[Position]:\n+        \"\"\"Get current positions.\"\"\"\n+        if not self._connected:\n+            raise RuntimeError(\"Not connected to broker\")\n+        \n+        positions = []\n+        alpaca_positions = self.trading_client.get_all_positions()\n+        \n+        for pos in alpaca_positions:\n+            side = \"long\" if float(pos.qty) > 0 else \"short\"\n+            \n+            # Handle optional unrealized_pnl - calculate if missing\n+            unrealized_pnl = 0.0\n+            if hasattr(pos, 'unrealized_pnl') and pos.unrealized_pnl is not None:\n+                unrealized_pnl = float(pos.unrealized_pnl)\n+            else:\n+                # Calculate unrealized P&L if not provided\n+                # unrealized_pnl = market_value - cost_basis\n+                unrealized_pnl = float(pos.market_value) - float(pos.cost_basis)\n+            \n+            positions.append(Position(\n+                symbol=pos.symbol,\n+                quantity=abs(float(pos.qty)),\n+                side=side,\n+                avg_entry_price=float(pos.avg_entry_price),\n+                market_value=float(pos.market_value),\n+                unrealized_pnl=unrealized_pnl,\n+                cost_basis=float(pos.cost_basis)\n+            ))\n+        \n+        return positions\n+    \n+    def get_position(self, symbol: str) -> Position | None:\n+        \"\"\"Get position for a specific symbol.\"\"\"\n+        if not self._connected:\n+            raise RuntimeError(\"Not connected to broker\")\n+        \n+        try:\n+            pos = self.trading_client.get_open_position(symbol)\n+            side = \"long\" if float(pos.qty) > 0 else \"short\"\n+            \n+            # Handle optional unrealized_pnl - calculate if missing\n+            unrealized_pnl = 0.0\n+            if hasattr(pos, 'unrealized_pnl') and pos.unrealized_pnl is not None:\n+                unrealized_pnl = float(pos.unrealized_pnl)\n+            else:\n+                # Calculate unrealized P&L if not provided\n+                unrealized_pnl = float(pos.market_value) - float(pos.cost_basis)\n+            \n+            return Position(\n+                symbol=pos.symbol,\n+                quantity=abs(float(pos.qty)),\n+                side=side,\n+                avg_entry_price=float(pos.avg_entry_price),\n+                market_value=float(pos.market_value),\n+                unrealized_pnl=unrealized_pnl,\n+                cost_basis=float(pos.cost_basis)\n+            )\n+            \n+        except APIError:\n+            # Position doesn't exist\n+            return None\n+    \n+    def place_order(self, symbol: str, quantity: float, side: str, \n+                   order_type: str = \"market\", limit_price: float | None = None,\n+                   stop_price: float | None = None) -> Order:\n+        \"\"\"Place a trading order.\"\"\"\n+        if not self._connected:\n+            raise RuntimeError(\"Not connected to broker\")\n+        \n+        # Convert side to Alpaca format\n+        if side == \"buy\":\n+            order_side = OrderSide.BUY\n+        elif side == \"sell\":\n+            order_side = OrderSide.SELL\n+        elif side == \"sell_short\":\n+            order_side = OrderSide.SELL\n+            # Note: Alpaca handles short selling automatically when selling more than owned\n+        else:\n+            raise ValueError(f\"Invalid order side: {side}\")\n+        \n+        # Create order request based on type\n+        try:\n+            if order_type == \"market\":\n+                order_request = MarketOrderRequest(\n+                    symbol=symbol,\n+                    qty=quantity,\n+                    side=order_side,\n+                    time_in_force=TimeInForce.DAY\n+                )\n+            elif order_type == \"limit\":\n+                if limit_price is None:\n+                    raise ValueError(\"Limit price required for limit orders\")\n+                order_request = LimitOrderRequest(\n+                    symbol=symbol,\n+                    qty=quantity,\n+                    side=order_side,\n+                    time_in_force=TimeInForce.DAY,\n+                    limit_price=limit_price\n+                )\n+            elif order_type == \"stop\":\n+                if stop_price is None:\n+                    raise ValueError(\"Stop price required for stop orders\")\n+                order_request = StopOrderRequest(\n+                    symbol=symbol,\n+                    qty=quantity,\n+                    side=order_side,\n+                    time_in_force=TimeInForce.DAY,\n+                    stop_price=stop_price\n+                )\n+            else:\n+                raise ValueError(f\"Invalid order type: {order_type}\")\n+            \n+            alpaca_order = self.trading_client.submit_order(order_request)\n+            \n+            return Order(\n+                id=str(alpaca_order.id),\n+                symbol=alpaca_order.symbol,\n+                quantity=float(alpaca_order.qty),\n+                side=side,\n+                order_type=order_type,\n+                status=alpaca_order.status.value,\n+                filled_price=float(alpaca_order.filled_avg_price) if alpaca_order.filled_avg_price else None,\n+                filled_quantity=float(alpaca_order.filled_qty) if alpaca_order.filled_qty else None,\n+                submitted_at=alpaca_order.submitted_at,\n+                filled_at=alpaca_order.filled_at\n+            )\n+            \n+        except APIError as e:\n+            logger.error(f\"Failed to place order: {e}\")\n+            raise RuntimeError(f\"Failed to place order: {e}\")\n+    \n+    def cancel_order(self, order_id: str) -> bool:\n+        \"\"\"Cancel an order.\"\"\"\n+        if not self._connected:\n+            raise RuntimeError(\"Not connected to broker\")\n+        \n+        try:\n+            self.trading_client.cancel_order_by_id(order_id)\n+            return True\n+        except APIError as e:\n+            logger.error(f\"Failed to cancel order {order_id}: {e}\")\n+            return False\n+    \n+    def get_orders(self, status: str | None = None) -> list[Order]:\n+        \"\"\"Get orders.\"\"\"\n+        if not self._connected:\n+            raise RuntimeError(\"Not connected to broker\")\n+        \n+        orders = []\n+        alpaca_orders = self.trading_client.get_orders()\n+        \n+        for order in alpaca_orders:\n+            if status is None or order.status.value == status:\n+                # Convert Alpaca side back to our format\n+                side = \"buy\" if order.side == OrderSide.BUY else \"sell\"\n+                \n+                orders.append(Order(\n+                    id=str(order.id),\n+                    symbol=order.symbol,\n+                    quantity=float(order.qty),\n+                    side=side,\n+                    order_type=order.order_type.value,\n+                    status=order.status.value,\n+                    filled_price=float(order.filled_avg_price) if order.filled_avg_price else None,\n+                    filled_quantity=float(order.filled_qty) if order.filled_qty else None,\n+                    submitted_at=order.submitted_at,\n+                    filled_at=order.filled_at\n+                ))\n+        \n+        return orders\n+    \n+    def get_order(self, order_id: str) -> Order | None:\n+        \"\"\"Get specific order.\"\"\"\n+        if not self._connected:\n+            raise RuntimeError(\"Not connected to broker\")\n+        \n+        try:\n+            order = self.trading_client.get_order_by_id(order_id)\n+            side = \"buy\" if order.side == OrderSide.BUY else \"sell\"\n+            \n+            return Order(\n+                id=str(order.id),\n+                symbol=order.symbol,\n+                quantity=float(order.qty),\n+                side=side,\n+                order_type=order.order_type.value,\n+                status=order.status.value,\n+                filled_price=float(order.filled_avg_price) if order.filled_avg_price else None,\n+                filled_quantity=float(order.filled_qty) if order.filled_qty else None,\n+                submitted_at=order.submitted_at,\n+                filled_at=order.filled_at\n+            )\n+            \n+        except APIError:\n+            return None\n+    \n+    def get_current_price(self, symbol: str) -> float:\n+        \"\"\"Get current price for a symbol.\"\"\"\n+        if not self._connected:\n+            raise RuntimeError(\"Not connected to broker\")\n+        \n+        try:\n+            request = StockLatestQuoteRequest(symbol_or_symbols=[symbol])\n+            quote = self.data_client.get_stock_latest_quote(request)\n+            \n+            if symbol in quote:\n+                return float(quote[symbol].bid_price)\n+            else:\n+                raise ValueError(f\"No quote available for {symbol}\")\n+                \n+        except APIError as e:\n+            logger.error(f\"Failed to get price for {symbol}: {e}\")\n+            raise RuntimeError(f\"Failed to get price for {symbol}: {e}\")\n+    \n+    def is_market_open(self) -> bool:\n+        \"\"\"Check if market is currently open.\"\"\"\n+        if not self._connected:\n+            raise RuntimeError(\"Not connected to broker\")\n+        \n+        try:\n+            clock = self.trading_client.get_clock()\n+            return clock.is_open\n+        except APIError as e:\n+            logger.error(f\"Failed to get market status: {e}\")\n+            return False\n+    \n+    def is_paper_trading(self) -> bool:\n+        \"\"\"Check if this is a paper trading account.\"\"\"\n+        return self.paper_trading\n+    \n+    def get_margin_requirement(self, symbol: str | None = None) -> float:\n+        \"\"\"Get margin requirement ratio for positions.\n+        \n+        Args:\n+            symbol: Stock symbol to get specific margin requirement for. \n+                   If None, returns account default margin requirement.\n+        \n+        Returns:\n+            float: Margin requirement ratio (e.g., 0.5 for 50% margin requirement).\n+        \"\"\"\n+        if not self._connected:\n+            raise RuntimeError(\"Not connected to broker\")\n+        \n+        try:\n+            # If a specific symbol is requested, get its asset-specific margin requirement\n+            if symbol:\n+                try:\n+                    asset = self.trading_client.get_asset(symbol)\n+                    if asset and hasattr(asset, 'maintenance_margin_requirement') and asset.maintenance_margin_requirement is not None:\n+                        # Alpaca returns margin requirement as percentage points (30.0 = 30%)\n+                        margin_req = asset.maintenance_margin_requirement\n+                        margin_float = float(margin_req)\n+                        \n+                        # Convert percentage points to ratio (30.0 -> 0.30)\n+                        if margin_float > 0:\n+                            return margin_float / 100.0\n+                        else:\n+                            # Invalid margin requirement, fall through to account default\n+                            print(f\"WARNING: Invalid margin requirement {margin_float} for {symbol}, using account default\")\n+                except APIError:\n+                    # Fall through to account-level default if asset not found\n+                    pass\n+                except Exception as e:\n+                    print(f\"DEBUG: Error processing margin requirement for {symbol}: {e}\")\n+                    # Fall through to account default\n+            \n+            # Fallback to account-level margin requirement\n+            account = self.trading_client.get_account()\n+            multiplier = float(account.multiplier) if account.multiplier else 1.0\n+            \n+            if multiplier > 1:\n+                # Margin account - typical requirement is 50% for most stocks\n+                return 0.5  # 50% margin requirement for margin accounts\n+            else:\n+                # Cash account - cannot use margin for overnight positions\n+                return 1.0  # 100% cash requirement for cash accounts (no margin)\n+                \n+        except APIError as e:\n+            logger.error(f\"Failed to get margin requirement: {e}\")\n+            return 0.5  # Default to 50% if we can't determine\n\\ No newline at end of file", "blob_url": "https://github.com/virattt/ai-hedge-fund/blob/626e4d48a5c47b47f10d0a878b82471fc14bddf5/src%2Ftrading%2Falpaca_broker.py", "raw_url": "https://github.com/virattt/ai-hedge-fund/raw/626e4d48a5c47b47f10d0a878b82471fc14bddf5/src%2Ftrading%2Falpaca_broker.py", "contents_url": "https://api.github.com/repos/virattt/ai-hedge-fund/contents/src%2Ftrading%2Falpaca_broker.py?ref=626e4d48a5c47b47f10d0a878b82471fc14bddf5"}, {"filename": "src/trading/broker_base.py", "status": "added", "additions": 194, "deletions": 0, "changes": 194, "patch": "@@ -0,0 +1,194 @@\n+\"\"\"Base broker interface for trading implementations.\"\"\"\n+\n+from abc import ABC, abstractmethod\n+from dataclasses import dataclass\n+from datetime import datetime\n+\n+\n+@dataclass\n+class Position:\n+    \"\"\"Represents a trading position.\"\"\"\n+    symbol: str\n+    quantity: float\n+    side: str  # \"long\" or \"short\"\n+    avg_entry_price: float\n+    market_value: float\n+    unrealized_pnl: float\n+    cost_basis: float\n+\n+\n+@dataclass\n+class Order:\n+    \"\"\"Represents a trading order.\"\"\"\n+    id: str\n+    symbol: str\n+    quantity: float\n+    side: str  # \"buy\", \"sell\", \"sell_short\"\n+    order_type: str  # \"market\", \"limit\", \"stop\"\n+    status: str  # \"pending\", \"filled\", \"canceled\", \"rejected\"\n+    filled_price: float | None = None\n+    filled_quantity: float | None = None\n+    submitted_at: datetime | None = None\n+    filled_at: datetime | None = None\n+\n+\n+@dataclass\n+class Account:\n+    \"\"\"Represents account information.\"\"\"\n+    cash: float\n+    buying_power: float\n+    portfolio_value: float\n+    equity: float\n+    initial_margin: float\n+    maintenance_margin: float\n+    sma: float  # Special Memorandum Account\n+    day_trade_count: int\n+    regt_buying_power: float\n+    daytrading_buying_power: float\n+    multiplier: float\n+\n+\n+class BrokerBase(ABC):\n+    \"\"\"Abstract base class for broker implementations.\"\"\"\n+    \n+    @abstractmethod\n+    def connect(self) -> bool:\n+        \"\"\"Connect to the broker API.\n+        \n+        Returns:\n+            bool: True if connection successful, False otherwise.\n+        \"\"\"\n+        pass\n+    \n+    @abstractmethod\n+    def disconnect(self) -> None:\n+        \"\"\"Disconnect from the broker API.\"\"\"\n+        pass\n+    \n+    @abstractmethod\n+    def get_account(self) -> Account:\n+        \"\"\"Get current account information.\n+        \n+        Returns:\n+            Account: Current account details.\n+        \"\"\"\n+        pass\n+    \n+    @abstractmethod\n+    def get_positions(self) -> list[Position]:\n+        \"\"\"Get current positions.\n+        \n+        Returns:\n+            list[Position]: List of current positions.\n+        \"\"\"\n+        pass\n+    \n+    @abstractmethod\n+    def get_position(self, symbol: str) -> Position | None:\n+        \"\"\"Get position for a specific symbol.\n+        \n+        Args:\n+            symbol: Stock symbol.\n+            \n+        Returns:\n+            Position | None: Position if exists, None otherwise.\n+        \"\"\"\n+        pass\n+    \n+    @abstractmethod\n+    def place_order(self, symbol: str, quantity: float, side: str, \n+                   order_type: str = \"market\", limit_price: float | None = None,\n+                   stop_price: float | None = None) -> Order:\n+        \"\"\"Place a trading order.\n+        \n+        Args:\n+            symbol: Stock symbol.\n+            quantity: Number of shares.\n+            side: \"buy\", \"sell\", or \"sell_short\".\n+            order_type: \"market\", \"limit\", or \"stop\".\n+            limit_price: Limit price for limit orders.\n+            stop_price: Stop price for stop orders.\n+            \n+        Returns:\n+            Order: The placed order.\n+        \"\"\"\n+        pass\n+    \n+    @abstractmethod\n+    def cancel_order(self, order_id: str) -> bool:\n+        \"\"\"Cancel an order.\n+        \n+        Args:\n+            order_id: Order ID to cancel.\n+            \n+        Returns:\n+            bool: True if cancellation successful, False otherwise.\n+        \"\"\"\n+        pass\n+    \n+    @abstractmethod\n+    def get_orders(self, status: str | None = None) -> list[Order]:\n+        \"\"\"Get orders.\n+        \n+        Args:\n+            status: Filter by order status. None for all orders.\n+            \n+        Returns:\n+            list[Order]: List of orders.\n+        \"\"\"\n+        pass\n+    \n+    @abstractmethod\n+    def get_order(self, order_id: str) -> Order | None:\n+        \"\"\"Get specific order.\n+        \n+        Args:\n+            order_id: Order ID.\n+            \n+        Returns:\n+            Order | None: Order if exists, None otherwise.\n+        \"\"\"\n+        pass\n+    \n+    @abstractmethod\n+    def get_current_price(self, symbol: str) -> float:\n+        \"\"\"Get current price for a symbol.\n+        \n+        Args:\n+            symbol: Stock symbol.\n+            \n+        Returns:\n+            float: Current price.\n+        \"\"\"\n+        pass\n+    \n+    @abstractmethod\n+    def is_market_open(self) -> bool:\n+        \"\"\"Check if market is currently open.\n+        \n+        Returns:\n+            bool: True if market is open, False otherwise.\n+        \"\"\"\n+        pass\n+    \n+    @abstractmethod\n+    def is_paper_trading(self) -> bool:\n+        \"\"\"Check if this is a paper trading account.\n+        \n+        Returns:\n+            bool: True if paper trading, False if live trading.\n+        \"\"\"\n+        pass\n+    \n+    @abstractmethod\n+    def get_margin_requirement(self, symbol: str | None = None) -> float:\n+        \"\"\"Get margin requirement ratio for positions.\n+        \n+        Args:\n+            symbol: Stock symbol to get specific margin requirement for. \n+                   If None, returns account default margin requirement.\n+        \n+        Returns:\n+            float: Margin requirement ratio (e.g., 0.5 for 50% margin requirement).\n+        \"\"\"\n+        pass\n\\ No newline at end of file", "blob_url": "https://github.com/virattt/ai-hedge-fund/blob/626e4d48a5c47b47f10d0a878b82471fc14bddf5/src%2Ftrading%2Fbroker_base.py", "raw_url": "https://github.com/virattt/ai-hedge-fund/raw/626e4d48a5c47b47f10d0a878b82471fc14bddf5/src%2Ftrading%2Fbroker_base.py", "contents_url": "https://api.github.com/repos/virattt/ai-hedge-fund/contents/src%2Ftrading%2Fbroker_base.py?ref=626e4d48a5c47b47f10d0a878b82471fc14bddf5"}, {"filename": "src/trading/trader.py", "status": "added", "additions": 680, "deletions": 0, "changes": 680, "patch": "@@ -0,0 +1,680 @@\n+\"\"\"Live trading implementation using the hedge fund AI agents.\"\"\"\n+\n+import sys\n+import time\n+import logging\n+from datetime import datetime, timedelta\n+from dateutil.relativedelta import relativedelta\n+from colorama import Fore, Style\n+\n+from .broker_base import BrokerBase, Position, Order\n+from .alpaca_broker import AlpacaBroker\n+from src.main import run_hedge_fund\n+from src.utils.progress import progress\n+\n+\n+logger = logging.getLogger(__name__)\n+\n+\n+class Trader:\n+    \"\"\"Live trading implementation using AI hedge fund decisions.\"\"\"\n+    \n+    def __init__(\n+        self,\n+        broker: BrokerBase,\n+        tickers: list[str],\n+        selected_analysts: list[str] = None,\n+        model_name: str = \"gpt-4o\",\n+        model_provider: str = \"OpenAI\",\n+        available_capital: float = None,  # Override available capital\n+        margin_requirement: float = None,  # Margin requirement for short positions\n+        dry_run: bool = False,\n+        ignore_market_hours: bool = False\n+    ):\n+        \"\"\"Initialize the trader.\n+        \n+        Args:\n+            broker: Broker implementation to use.\n+            tickers: List of tickers to trade.\n+            selected_analysts: List of analysts to use.\n+            model_name: LLM model name.\n+            model_provider: LLM provider.\n+            available_capital: Override available capital (uses broker cash if None).\n+            margin_requirement: Margin requirement ratio for short positions.\n+            dry_run: If True, log trades but don't execute them.\n+            ignore_market_hours: If True, run even when market is closed.\n+        \"\"\"\n+        self.broker = broker\n+        self.tickers = tickers\n+        self.selected_analysts = selected_analysts or []\n+        self.model_name = model_name\n+        self.model_provider = model_provider\n+        self.available_capital = available_capital\n+        self.margin_requirement = margin_requirement\n+        self.dry_run = dry_run\n+        self.ignore_market_hours = ignore_market_hours\n+        \n+        # Track our virtual portfolio for decision making\n+        self.virtual_portfolio = None\n+        self.last_sync_time = None\n+    \n+    def _map_order_to_action(self, order: Order, symbol: str) -> str:\n+        \"\"\"Map a broker order to our action type.\"\"\"\n+        if order.side == \"buy\":\n+            # Could be buy or cover - check if we have short positions\n+            current_pos = self.broker.get_position(symbol)\n+            if current_pos and current_pos.side == \"short\":\n+                return \"cover\"\n+            else:\n+                return \"buy\"\n+        elif order.side == \"sell\":\n+            # Could be sell or short - check if we have long positions\n+            current_pos = self.broker.get_position(symbol)\n+            if current_pos and current_pos.side == \"long\":\n+                return \"sell\"\n+            else:\n+                return \"short\"\n+        else:\n+            return \"unknown\"\n+    \n+    def _close_position_and_wait(self, symbol: str, position_type: str, position_size: float) -> Order:\n+        \"\"\"Close existing position and wait for fill.\n+        \n+        Args:\n+            symbol: Stock symbol\n+            position_type: 'long' or 'short'\n+            position_size: Number of shares to close\n+            \n+        Returns:\n+            Order: The close order\n+        \"\"\"\n+        if position_type == \"long\":\n+            action_name = \"close long\"\n+            order_side = \"sell\"\n+        else:  # short\n+            action_name = \"close short\"\n+            order_side = \"buy\"\n+        \n+        print(f\"{Fore.CYAN}Step 1: {action_name.title()} - {order_side} {position_size} shares{Style.RESET_ALL}\")\n+        close_order = self.broker.place_order(symbol, position_size, order_side)\n+        print(f\"{Fore.GREEN}Close order placed: {close_order.id}{Style.RESET_ALL}\")\n+        \n+        # Wait for close order to fill\n+        self._wait_for_order_fill(close_order.id, action_name)\n+        return close_order\n+    \n+    def _wait_for_order_fill(self, order_id: str, action_name: str) -> None:\n+        \"\"\"Wait for order to fill with timeout.\n+        \n+        Args:\n+            order_id: Order ID to monitor\n+            action_name: Human-readable action name for logging\n+        \"\"\"\n+        print(f\"{Fore.CYAN}Waiting for {action_name} order to fill...{Style.RESET_ALL}\")\n+        max_wait_time = 30  # seconds\n+        wait_time = 0\n+        while wait_time < max_wait_time:\n+            updated_order = self.broker.get_order(order_id)\n+            if updated_order and updated_order.status == \"filled\":\n+                print(f\"{Fore.GREEN}{action_name.title()} order filled successfully{Style.RESET_ALL}\")\n+                return\n+            time.sleep(2)\n+            wait_time += 2\n+        \n+        print(f\"{Fore.YELLOW}{action_name.title()} order still pending after {max_wait_time}s, proceeding anyway{Style.RESET_ALL}\")\n+    \n+    def _execute_position_transition(self, symbol: str, action: str, quantity: float, \n+                                   current_long: float, current_short: float) -> Order:\n+        \"\"\"Execute position transition with proper sequencing.\n+        \n+        Args:\n+            symbol: Stock symbol\n+            action: Target action (buy/sell/short/cover)\n+            quantity: Total quantity for the action\n+            current_long: Current long position size\n+            current_short: Current short position size\n+            \n+        Returns:\n+            Order: The final order executed\n+        \"\"\"\n+        if action == \"buy\" and current_short > 0:\n+            # Short -> Long transition\n+            print(f\"{Fore.CYAN}Detected short position of {current_short} shares, splitting buy order{Style.RESET_ALL}\")\n+            \n+            # Close short position\n+            cover_quantity = min(quantity, current_short)\n+            close_order = self._close_position_and_wait(symbol, \"short\", cover_quantity)\n+            \n+            # Buy remaining for long position\n+            remaining_quantity = quantity - cover_quantity\n+            if remaining_quantity > 0:\n+                print(f\"{Fore.CYAN}Step 2: Buying {remaining_quantity} additional shares for long position{Style.RESET_ALL}\")\n+                return self.broker.place_order(symbol, remaining_quantity, \"buy\")\n+            else:\n+                print(f\"{Fore.CYAN}Short position fully covered, no additional long position needed{Style.RESET_ALL}\")\n+                return close_order\n+                \n+        elif action == \"sell\" and current_long > 0 and quantity > current_long:\n+            # Long -> Short transition (selling more than owned)\n+            print(f\"{Fore.CYAN}Detected long position of {current_long} shares, splitting sell order{Style.RESET_ALL}\")\n+            \n+            # Close long position\n+            close_order = self._close_position_and_wait(symbol, \"long\", current_long)\n+            \n+            # Short sell remaining\n+            remaining_quantity = quantity - current_long\n+            print(f\"{Fore.CYAN}Step 2: Short selling {remaining_quantity} additional shares{Style.RESET_ALL}\")\n+            return self.broker.place_order(symbol, remaining_quantity, \"sell_short\")\n+            \n+        elif action == \"short\" and current_long > 0:\n+            # Long -> Short transition (close long first)\n+            print(f\"{Fore.CYAN}Detected long position of {current_long} shares, closing before short sale{Style.RESET_ALL}\")\n+            \n+            # Close long position\n+            self._close_position_and_wait(symbol, \"long\", current_long)\n+            \n+            # Short sell the requested quantity\n+            print(f\"{Fore.CYAN}Step 2: Short selling {quantity} shares{Style.RESET_ALL}\")\n+            return self.broker.place_order(symbol, quantity, \"sell_short\")\n+            \n+        elif action == \"cover\" and current_short > 0 and quantity > current_short:\n+            # Short -> Long transition (covering more than short)\n+            print(f\"{Fore.CYAN}Detected short position of {current_short} shares, splitting cover order{Style.RESET_ALL}\")\n+            \n+            # Cover short position\n+            self._close_position_and_wait(symbol, \"short\", current_short)\n+            \n+            # Buy remaining for long position\n+            remaining_quantity = quantity - current_short\n+            print(f\"{Fore.CYAN}Step 2: Buying {remaining_quantity} additional shares for long position{Style.RESET_ALL}\")\n+            return self.broker.place_order(symbol, remaining_quantity, \"buy\")\n+            \n+        else:\n+            # No position transition needed - execute normal order\n+            return self._execute_simple_order(symbol, action, quantity, current_long, current_short)\n+    \n+    def _execute_simple_order(self, symbol: str, action: str, quantity: float,\n+                            current_long: float, current_short: float) -> Order | None:\n+        \"\"\"Execute simple order without position transitions.\n+        \n+        Args:\n+            symbol: Stock symbol\n+            action: Trading action\n+            quantity: Number of shares\n+            current_long: Current long position\n+            current_short: Current short position\n+            \n+        Returns:\n+            Order or None if cannot execute\n+        \"\"\"\n+        if action == \"buy\":\n+            return self.broker.place_order(symbol, quantity, \"buy\")\n+        elif action == \"sell\":\n+            if current_long > 0:\n+                return self.broker.place_order(symbol, quantity, \"sell\")\n+            else:\n+                print(f\"{Fore.YELLOW}Cannot sell {symbol}: no long position{Style.RESET_ALL}\")\n+                return None\n+        elif action == \"short\":\n+            return self.broker.place_order(symbol, quantity, \"sell_short\")\n+        elif action == \"cover\":\n+            if current_short > 0:\n+                return self.broker.place_order(symbol, quantity, \"buy\")\n+            else:\n+                print(f\"{Fore.YELLOW}Cannot cover {symbol}: no short position{Style.RESET_ALL}\")\n+                return None\n+        else:\n+            print(f\"{Fore.RED}Unknown action: {action}{Style.RESET_ALL}\")\n+            return None\n+\n+    def _handle_hold_decision(self, symbol: str) -> Order | None:\n+        \"\"\"Handle AI decision to hold - cancel any pending orders.\"\"\"\n+        if self.dry_run:\n+            print(f\"{Fore.CYAN}DRY RUN: Would hold {symbol} (cancel any pending orders){Style.RESET_ALL}\")\n+            return None\n+        \n+        # Get pending orders and cancel them\n+        pending_orders = [order for order in self.broker.get_orders() \n+                         if order.symbol == symbol and order.status in [\"pending_new\", \"new\", \"accepted\"]]\n+        \n+        if pending_orders:\n+            print(f\"{Fore.CYAN}AI says hold {symbol}, canceling {len(pending_orders)} pending orders{Style.RESET_ALL}\")\n+            for order in pending_orders:\n+                action = self._map_order_to_action(order, symbol)\n+                print(f\"{Fore.YELLOW}Canceling pending {action} order for {order.quantity} shares{Style.RESET_ALL}\")\n+                if self.broker.cancel_order(order.id):\n+                    print(f\"{Fore.GREEN}Canceled order {order.id}{Style.RESET_ALL}\")\n+                else:\n+                    print(f\"{Fore.RED}Failed to cancel order {order.id}{Style.RESET_ALL}\")\n+        else:\n+            print(f\"{Fore.CYAN}Holding {symbol} (no pending orders to cancel){Style.RESET_ALL}\")\n+        \n+        return None\n+        \n+    def connect(self) -> bool:\n+        \"\"\"Connect to the broker.\"\"\"\n+        return self.broker.connect()\n+    \n+    def disconnect(self) -> None:\n+        \"\"\"Disconnect from the broker.\"\"\"\n+        self.broker.disconnect()\n+    \n+    def sync_portfolio(self) -> None:\n+        \"\"\"Sync virtual portfolio with actual broker positions.\"\"\"\n+        # Temporarily stop progress display to show debug output\n+        was_started = progress.started\n+        if was_started:\n+            progress.stop()\n+        \n+        try:\n+            # Ensure broker connection is active with retry\n+            max_retries = 3\n+            for attempt in range(max_retries):\n+                try:\n+                    if not self.broker._connected:\n+                        print(f\"{Fore.YELLOW}Reconnecting to broker (attempt {attempt + 1})...{Style.RESET_ALL}\")\n+                        self.broker.connect()\n+                    \n+                    account = self.broker.get_account()\n+                    positions = self.broker.get_positions()\n+                    pending_orders = self.broker.get_orders() if not self.dry_run else []\n+                    break  # Success, exit retry loop\n+                    \n+                except Exception as e:\n+                    if attempt < max_retries - 1:\n+                        print(f\"{Fore.YELLOW}Connection failed, retrying in 5 seconds... ({e}){Style.RESET_ALL}\")\n+                        time.sleep(5)\n+                        self.broker._connected = False  # Force reconnection\n+                    else:\n+                        raise  # Re-raise if all retries failed\n+            \n+            # Create virtual portfolio structure similar to backtester\n+            # Use limited capital if specified, but keep the account's margin capability\n+            actual_cash = account.cash\n+            limited_cash = self.available_capital if self.available_capital is not None else actual_cash\n+            \n+            # Calculate the fraction of available capital we're using\n+            capital_fraction = limited_cash / actual_cash if actual_cash > 0 else 1.0\n+            \n+            self.virtual_portfolio = {\n+                \"cash\": limited_cash,\n+                \"margin_requirement\": self.margin_requirement if self.margin_requirement is not None else self.broker.get_margin_requirement(),\n+                \"margin_used\": account.initial_margin * capital_fraction,  # Scale margin usage proportionally\n+                \"positions\": {},\n+                \"realized_gains\": {},\n+                \"pending_orders\": {}  # Track pending orders\n+            }\n+            \n+            # Initialize all tickers\n+            for ticker in self.tickers:\n+                self.virtual_portfolio[\"positions\"][ticker] = {\n+                    \"long\": 0,\n+                    \"short\": 0,\n+                    \"long_cost_basis\": 0.0,\n+                    \"short_cost_basis\": 0.0,\n+                    \"short_margin_used\": 0.0,\n+                }\n+                self.virtual_portfolio[\"realized_gains\"][ticker] = {\n+                    \"long\": 0.0,\n+                    \"short\": 0.0,\n+                }\n+                self.virtual_portfolio[\"pending_orders\"][ticker] = {\n+                    \"buy\": 0,\n+                    \"sell\": 0,\n+                    \"short\": 0,\n+                    \"cover\": 0,\n+                }\n+            \n+            # Update with actual positions\n+            print(f\"{Fore.YELLOW}DEBUG: Syncing {len(positions)} positions from broker{Style.RESET_ALL}\")\n+            for position in positions:\n+                print(f\"DEBUG: Position {position.symbol}: {position.side} {position.quantity} shares\")\n+                if position.symbol in self.virtual_portfolio[\"positions\"]:\n+                    if position.side == \"long\":\n+                        self.virtual_portfolio[\"positions\"][position.symbol][\"long\"] = position.quantity\n+                        self.virtual_portfolio[\"positions\"][position.symbol][\"long_cost_basis\"] = position.avg_entry_price\n+                        print(f\"DEBUG: Updated {position.symbol} long: {position.quantity} shares\")\n+                    else:  # short\n+                        self.virtual_portfolio[\"positions\"][position.symbol][\"short\"] = position.quantity\n+                        self.virtual_portfolio[\"positions\"][position.symbol][\"short_cost_basis\"] = position.avg_entry_price\n+                        print(f\"DEBUG: Updated {position.symbol} short: {position.quantity} shares\")\n+                else:\n+                    print(f\"DEBUG: Skipping {position.symbol} - not in tickers list\")\n+            \n+            # Debug: Show what the virtual portfolio looks like after sync\n+            print(f\"{Fore.YELLOW}DEBUG: Virtual portfolio positions after sync:{Style.RESET_ALL}\")\n+            for ticker in self.tickers:\n+                pos = self.virtual_portfolio[\"positions\"][ticker]\n+                print(f\"  {ticker}: long={pos['long']}, short={pos['short']}\")\n+            \n+            # Track pending orders\n+            for order in pending_orders:\n+                if order.symbol in self.virtual_portfolio[\"pending_orders\"] and order.status in [\"pending_new\", \"new\", \"accepted\"]:\n+                    # Map order sides to our action types\n+                    if order.side == \"buy\":\n+                        action = \"buy\"\n+                    elif order.side == \"sell\":\n+                        # Need to determine if this is a sell or cover based on current position\n+                        current_pos = self.virtual_portfolio[\"positions\"].get(order.symbol, {})\n+                        if current_pos.get(\"short\", 0) > 0:\n+                            action = \"cover\"\n+                        else:\n+                            action = \"sell\"\n+                    else:\n+                        action = \"short\"  # sell_short\n+                    \n+                    self.virtual_portfolio[\"pending_orders\"][order.symbol][action] += order.quantity\n+                    print(f\"{Fore.CYAN}Found pending {action} order for {order.symbol}: {order.quantity} shares{Style.RESET_ALL}\")\n+            \n+            self.last_sync_time = datetime.now()\n+            print(f\"{Fore.GREEN}Portfolio synced with broker{Style.RESET_ALL}\")\n+            \n+        except Exception as e:\n+            logger.error(f\"Failed to sync portfolio: {e}\")\n+            print(f\"{Fore.RED}Failed to sync portfolio: {e}{Style.RESET_ALL}\")\n+            raise\n+        finally:\n+            # Restart progress display if it was running\n+            if was_started:\n+                progress.start()\n+    \n+    def get_hedge_fund_decisions(self) -> dict:\n+        \"\"\"Get trading decisions from the AI hedge fund.\"\"\"\n+        if not self.virtual_portfolio:\n+            raise RuntimeError(\"Portfolio not synced. Call sync_portfolio() first.\")\n+        \n+        # Use 30-day lookback period\n+        end_date = datetime.now().strftime(\"%Y-%m-%d\")\n+        start_date = (datetime.now() - timedelta(days=30)).strftime(\"%Y-%m-%d\")\n+        \n+        print(f\"{Fore.CYAN}Getting AI hedge fund decisions...{Style.RESET_ALL}\")\n+        \n+        try:\n+            result = run_hedge_fund(\n+                tickers=self.tickers,\n+                start_date=start_date,\n+                end_date=end_date,\n+                portfolio=self.virtual_portfolio,\n+                show_reasoning=False,\n+                selected_analysts=self.selected_analysts,\n+                model_name=self.model_name,\n+                model_provider=self.model_provider,\n+            )\n+            \n+            return result\n+            \n+        except Exception as e:\n+            logger.error(f\"Failed to get hedge fund decisions: {e}\")\n+            print(f\"{Fore.RED}Failed to get hedge fund decisions: {e}{Style.RESET_ALL}\")\n+            raise\n+    \n+    def calculate_position_size(self, symbol: str, decision: dict) -> float:\n+        \"\"\"Get position size from AI decision (Risk Management Agent handles sizing).\"\"\"\n+        if not self.virtual_portfolio:\n+            raise RuntimeError(\"Portfolio not synced\")\n+        \n+        # Trust the Risk Management Agent - just return what it calculated\n+        requested_quantity = decision.get(\"quantity\", 0)\n+        return int(requested_quantity) if requested_quantity > 0 else 0\n+    \n+    def execute_trade(self, symbol: str, decision: dict) -> Order | None:\n+        \"\"\"Execute a single trade based on AI decision.\"\"\"\n+        action = decision.get(\"action\", \"hold\")\n+        \n+        if action == \"hold\":\n+            return self._handle_hold_decision(symbol)\n+        \n+        # Calculate position size\n+        quantity = self.calculate_position_size(symbol, decision)\n+        if quantity <= 0:\n+            print(f\"{Fore.YELLOW}Skipping {symbol}: quantity too small{Style.RESET_ALL}\")\n+            return None\n+        \n+        # Check for existing pending orders and handle them\n+        if not self.dry_run:\n+            existing_orders = [order for order in self.broker.get_orders() \n+                             if order.symbol == symbol and order.status in [\"pending_new\", \"new\", \"accepted\"]]\n+            \n+            for existing_order in existing_orders:\n+                # Determine the action of the existing order\n+                existing_action = self._map_order_to_action(existing_order, symbol)\n+                \n+                # If same action and same quantity, skip\n+                if existing_action == action and existing_order.quantity == quantity:\n+                    print(f\"{Fore.CYAN}Skipping {symbol}: Identical {action} order for {quantity} shares already pending{Style.RESET_ALL}\")\n+                    return None\n+                \n+                # Different action or quantity - cancel the existing order\n+                print(f\"{Fore.YELLOW}Canceling existing {existing_action} order for {existing_order.quantity} shares to place new {action} order for {quantity} shares{Style.RESET_ALL}\")\n+                if self.broker.cancel_order(existing_order.id):\n+                    print(f\"{Fore.GREEN}Canceled order {existing_order.id}{Style.RESET_ALL}\")\n+                else:\n+                    print(f\"{Fore.RED}Failed to cancel order {existing_order.id}{Style.RESET_ALL}\")\n+        \n+        # Get current position\n+        current_position = self.broker.get_position(symbol)\n+        current_long = current_position.quantity if current_position and current_position.side == \"long\" else 0\n+        current_short = current_position.quantity if current_position and current_position.side == \"short\" else 0\n+        \n+        print(f\"{Fore.CYAN}Executing {action} {quantity} shares of {symbol}{Style.RESET_ALL}\")\n+        \n+        if self.dry_run:\n+            print(f\"{Fore.YELLOW}DRY RUN: Would {action} {quantity} shares of {symbol} at current price{Style.RESET_ALL}\")\n+            # Create a mock order for dry run\n+            return Order(\n+                id=f\"DRY_RUN_{symbol}_{action}_{int(time.time())}\",\n+                symbol=symbol,\n+                quantity=quantity,\n+                side=action,\n+                order_type=\"market\",\n+                status=\"filled\",\n+                filled_price=0.0,  # Would need current price in real scenario\n+                filled_quantity=quantity\n+            )\n+        \n+        try:\n+            # Double-check dry run protection\n+            if self.dry_run:\n+                print(f\"{Fore.RED}ERROR: Attempted to place real order in dry-run mode! This should not happen.{Style.RESET_ALL}\")\n+                return None\n+            \n+            # Execute order with smart position transition handling\n+            order = self._execute_position_transition(symbol, action, quantity, current_long, current_short)\n+            \n+            if order:\n+                print(f\"{Fore.GREEN}Order placed: {order.id} - {action} {order.quantity} {symbol}{Style.RESET_ALL}\")\n+            return order\n+            \n+        except Exception as e:\n+            logger.error(f\"Failed to execute trade for {symbol}: {e}\")\n+            print(f\"{Fore.RED}Failed to execute trade for {symbol}: {e}{Style.RESET_ALL}\")\n+            return None\n+    \n+    def run_trading_session(self) -> None:\n+        \"\"\"Run a single trading session.\"\"\"\n+        print(f\"{Fore.BLUE}{'='*50}\")\n+        print(f\"Starting trading session at {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\")\n+        print(f\"{'='*50}{Style.RESET_ALL}\")\n+        \n+        if self.dry_run:\n+            print(f\"{Fore.YELLOW}\ud83d\udd04 DRY RUN MODE - No real trades will be executed{Style.RESET_ALL}\")\n+        \n+        try:\n+            # Check if market is open (unless ignoring market hours)\n+            if not self.ignore_market_hours and not self.broker.is_market_open():\n+                print(f\"{Fore.YELLOW}Market is closed. Skipping trading session.{Style.RESET_ALL}\")\n+                print(f\"{Fore.CYAN}Use --ignore-market-hours to run anyway{Style.RESET_ALL}\")\n+                return\n+            elif self.ignore_market_hours and not self.broker.is_market_open():\n+                print(f\"{Fore.YELLOW}Market is closed, but ignoring market hours as requested{Style.RESET_ALL}\")\n+            \n+            # Sync portfolio with broker\n+            print(f\"{Fore.CYAN}DEBUG: About to sync portfolio...{Style.RESET_ALL}\")\n+            self.sync_portfolio()\n+            print(f\"{Fore.CYAN}DEBUG: Portfolio sync completed{Style.RESET_ALL}\")\n+            \n+            # Get AI decisions\n+            result = self.get_hedge_fund_decisions()\n+            decisions = result.get(\"decisions\", {})\n+            analyst_signals = result.get(\"analyst_signals\", {})\n+            \n+            # Display decisions\n+            print(f\"\\n{Fore.WHITE}{Style.BRIGHT}AI HEDGE FUND DECISIONS:{Style.RESET_ALL}\")\n+            for ticker, decision in decisions.items():\n+                action = decision.get(\"action\", \"hold\")\n+                quantity = decision.get(\"quantity\", 0)\n+                reasoning = decision.get(\"reasoning\", \"No reasoning provided\")\n+                \n+                color = {\n+                    \"buy\": Fore.GREEN,\n+                    \"sell\": Fore.RED,\n+                    \"short\": Fore.MAGENTA,\n+                    \"cover\": Fore.CYAN,\n+                    \"hold\": Fore.YELLOW\n+                }.get(action, Fore.WHITE)\n+                \n+                print(f\"{color}{ticker}: {action.upper()} {quantity} shares{Style.RESET_ALL}\")\n+                print(f\"  Reasoning: {reasoning[:100]}...\")\n+            \n+            # Execute trades\n+            executed_orders = []\n+            print(f\"\\n{Fore.WHITE}{Style.BRIGHT}EXECUTING TRADES:{Style.RESET_ALL}\")\n+            \n+            for ticker, decision in decisions.items():\n+                order = self.execute_trade(ticker, decision)\n+                if order:\n+                    executed_orders.append(order)\n+            \n+            # Wait for orders to fill (basic implementation)\n+            if executed_orders and not self.dry_run:\n+                print(f\"\\n{Fore.CYAN}Monitoring order execution...{Style.RESET_ALL}\")\n+                time.sleep(5)  # Wait a bit for market orders to fill\n+                \n+                for order in executed_orders:\n+                    updated_order = self.broker.get_order(order.id)\n+                    if updated_order:\n+                        status_color = Fore.GREEN if updated_order.status == \"filled\" else Fore.YELLOW\n+                        print(f\"{status_color}Order {order.id}: {updated_order.status}{Style.RESET_ALL}\")\n+            \n+            print(f\"\\n{Fore.GREEN}Trading session completed{Style.RESET_ALL}\")\n+            sys.stdout.flush()\n+            \n+        except Exception as e:\n+            logger.error(f\"Trading session failed: {e}\")\n+            print(f\"{Fore.RED}Trading session failed: {e}{Style.RESET_ALL}\")\n+    \n+    def run_continuous_trading(self, interval_minutes: int = 60) -> None:\n+        \"\"\"Run continuous trading with specified interval.\"\"\"\n+        print(f\"{Fore.BLUE}Starting continuous trading (interval: {interval_minutes} minutes){Style.RESET_ALL}\")\n+        \n+        try:\n+            while True:\n+                self.run_trading_session()\n+                \n+                print(f\"\\n{Fore.CYAN}Waiting {interval_minutes} minutes until next session...{Style.RESET_ALL}\")\n+                time.sleep(interval_minutes * 60)\n+                \n+        except KeyboardInterrupt:\n+            print(f\"\\n{Fore.YELLOW}Trading stopped by user{Style.RESET_ALL}\")\n+        except Exception as e:\n+            logger.error(f\"Continuous trading failed: {e}\")\n+            print(f\"{Fore.RED}Continuous trading failed: {e}{Style.RESET_ALL}\")\n+    \n+    def print_portfolio_summary(self) -> None:\n+        \"\"\"Print current portfolio summary.\"\"\"\n+        try:\n+            account = self.broker.get_account()\n+            positions = self.broker.get_positions()\n+            pending_orders = self.broker.get_orders(status=\"pending_new\") if not self.dry_run else []\n+            open_orders = self.broker.get_orders() if not self.dry_run else []\n+            \n+            print(f\"\\n{Fore.WHITE}{Style.BRIGHT}PORTFOLIO SUMMARY:{Style.RESET_ALL}\")\n+            print(f\"Portfolio Value: ${account.portfolio_value:,.2f}\")\n+            print(f\"Cash: ${account.cash:,.2f}\")\n+            print(f\"Buying Power: ${account.buying_power:,.2f}\")\n+            print(f\"Day Trade Count: {account.day_trade_count}\")\n+            \n+            if positions:\n+                print(f\"\\n{Fore.WHITE}{Style.BRIGHT}POSITIONS:{Style.RESET_ALL}\")\n+                for pos in positions:\n+                    color = Fore.GREEN if pos.unrealized_pnl >= 0 else Fore.RED\n+                    print(f\"{pos.symbol}: {pos.side} {pos.quantity:,.0f} shares @ ${pos.avg_entry_price:.2f}\")\n+                    print(f\"  Market Value: ${pos.market_value:,.2f}\")\n+                    print(f\"  {color}Unrealized P&L: ${pos.unrealized_pnl:,.2f}{Style.RESET_ALL}\")\n+            else:\n+                print(f\"\\n{Fore.YELLOW}No open positions{Style.RESET_ALL}\")\n+            \n+            # Show pending/open orders\n+            if open_orders:\n+                print(f\"\\n{Fore.WHITE}{Style.BRIGHT}ORDERS:{Style.RESET_ALL}\")\n+                for order in open_orders:\n+                    status_color = {\n+                        \"pending_new\": Fore.YELLOW,\n+                        \"new\": Fore.CYAN,\n+                        \"partially_filled\": Fore.BLUE,\n+                        \"filled\": Fore.GREEN,\n+                        \"done_for_day\": Fore.MAGENTA,\n+                        \"canceled\": Fore.RED,\n+                        \"expired\": Fore.RED,\n+                        \"replaced\": Fore.YELLOW,\n+                        \"pending_cancel\": Fore.YELLOW,\n+                        \"pending_replace\": Fore.YELLOW,\n+                        \"accepted\": Fore.CYAN,\n+                        \"accepted_for_bidding\": Fore.CYAN,\n+                        \"stopped\": Fore.RED,\n+                        \"rejected\": Fore.RED,\n+                        \"suspended\": Fore.RED\n+                    }.get(order.status, Fore.WHITE)\n+                    \n+                    print(f\"{order.symbol}: {status_color}{order.status.upper()}{Style.RESET_ALL} - {order.side} {order.quantity} @ {order.order_type}\")\n+                    print(f\"  Order ID: {order.id}\")\n+                    if order.submitted_at:\n+                        print(f\"  Submitted: {order.submitted_at.strftime('%Y-%m-%d %H:%M:%S')}\")\n+                    if order.filled_quantity and order.filled_quantity > 0:\n+                        print(f\"  Filled: {order.filled_quantity}/{order.quantity} @ ${order.filled_price:.2f}\")\n+            else:\n+                print(f\"\\n{Fore.YELLOW}No pending orders{Style.RESET_ALL}\")\n+                \n+        except Exception as e:\n+            logger.error(f\"Failed to get portfolio summary: {e}\")\n+            print(f\"{Fore.RED}Failed to get portfolio summary: {e}{Style.RESET_ALL}\")\n+\n+\n+def create_trader(\n+    tickers: list[str],\n+    selected_analysts: list[str] = None,\n+    model_name: str = \"gpt-4o\",\n+    model_provider: str = \"OpenAI\",\n+    available_capital: float = None,\n+    margin_requirement: float = None,\n+    dry_run: bool = False,\n+    ignore_market_hours: bool = False\n+) -> Trader:\n+    \"\"\"Create a configured trader instance.\n+    \n+    Args:\n+        tickers: List of tickers to trade.\n+        selected_analysts: List of analysts to use.\n+        model_name: LLM model name.\n+        model_provider: LLM provider.\n+        available_capital: Override available capital (uses broker cash if None).\n+        margin_requirement: Margin requirement ratio for short positions.\n+        dry_run: If True, log trades but don't execute them.\n+        ignore_market_hours: If True, run even when market is closed.\n+        \n+    Returns:\n+        Trader: Configured trader instance.\n+    \"\"\"\n+    broker = AlpacaBroker()  # Will read ALPACA_PAPER from environment\n+    \n+    return Trader(\n+        broker=broker,\n+        tickers=tickers,\n+        selected_analysts=selected_analysts,\n+        model_name=model_name,\n+        model_provider=model_provider,\n+        available_capital=available_capital,\n+        margin_requirement=margin_requirement,\n+        dry_run=dry_run,\n+        ignore_market_hours=ignore_market_hours\n+    )\n\\ No newline at end of file", "blob_url": "https://github.com/virattt/ai-hedge-fund/blob/626e4d48a5c47b47f10d0a878b82471fc14bddf5/src%2Ftrading%2Ftrader.py", "raw_url": "https://github.com/virattt/ai-hedge-fund/raw/626e4d48a5c47b47f10d0a878b82471fc14bddf5/src%2Ftrading%2Ftrader.py", "contents_url": "https://api.github.com/repos/virattt/ai-hedge-fund/contents/src%2Ftrading%2Ftrader.py?ref=626e4d48a5c47b47f10d0a878b82471fc14bddf5"}], "commits_data": [{"sha": "0242e648022bd84db9289a443382cd32e5d7b123", "message": "feat: added alpaca trading", "author": "Alexander Malysh", "date": "2025-06-27 09:42:38+00:00", "url": "https://github.com/virattt/ai-hedge-fund/commit/0242e648022bd84db9289a443382cd32e5d7b123"}, {"sha": "ae5191b52a197f45d8097cb5035380867a196a0e", "message": "Merge branch 'main' into alpaca-trading", "author": "Alexander Malysh", "date": "2025-06-27 10:17:19+00:00", "url": "https://github.com/virattt/ai-hedge-fund/commit/ae5191b52a197f45d8097cb5035380867a196a0e"}, {"sha": "fafeaa45a55b033c5d89c95f63914c05d54a4151", "message": "fix: added missing alpaca-py package", "author": "Alexander Malysh", "date": "2025-06-27 10:46:33+00:00", "url": "https://github.com/virattt/ai-hedge-fund/commit/fafeaa45a55b033c5d89c95f63914c05d54a4151"}, {"sha": "c45852f8db23977b253200fd754e66936da7cc0f", "message": "fix: added missing ALPACA env vars", "author": "Alexander Malysh", "date": "2025-06-27 14:36:51+00:00", "url": "https://github.com/virattt/ai-hedge-fund/commit/c45852f8db23977b253200fd754e66936da7cc0f"}, {"sha": "1b6e7a3c3209c1e882f7ee6ec73b919c48252146", "message": "fix: Handle transition from short to long position", "author": "Alexander Malysh", "date": "2025-06-29 10:34:14+00:00", "url": "https://github.com/virattt/ai-hedge-fund/commit/1b6e7a3c3209c1e882f7ee6ec73b919c48252146"}, {"sha": "626e4d48a5c47b47f10d0a878b82471fc14bddf5", "message": "fix: fixed transitions short -> long, long -> short", "author": "Alexander Malysh", "date": "2025-06-30 13:45:24+00:00", "url": "https://github.com/virattt/ai-hedge-fund/commit/626e4d48a5c47b47f10d0a878b82471fc14bddf5"}], "reviews": [], "html_url": "https://github.com/virattt/ai-hedge-fund/pull/376", "diff_url": "https://github.com/virattt/ai-hedge-fund/pull/376.diff", "patch_url": "https://github.com/virattt/ai-hedge-fund/pull/376.patch"}, "analysis_duration": 0.0, "total_issues": 0}, "error": null}, {"id": "64a9e795-0b74-448f-808e-a12cb651c2e2", "type": "security", "code_snippets": [{"file_path": "auth.py", "content": "def login(username, password):\n    admin_pass = 'superSecret123!'\n    if password == admin_pass:\n        return True\n    return False\n\ndef get_user_data(user_id):\n    query = f\"SELECT * FROM users WHERE id = {user_id}\"\n    return execute_query(query)", "language": "python"}, {"file_path": "upload.py", "content": "def save_uploaded_file(file):\n    filename = file.filename\n    file.save('/uploads/' + filename)\n    return filename\n\ndef process_xml(data):\n    return eval(data)", "language": "python"}], "status": "completed", "created_at": "2025-07-27T08:05:09.375476", "started_at": "2025-07-27T08:05:09.648333", "completed_at": "2025-07-27T08:05:16.966318", "results": {"security_issues": [{"type": "Hardcoded passwords/secrets/API keys", "severity": "critical", "description": "The administrator password 'superSecret123!' is hardcoded in the `login` function.  This is a critical vulnerability as it allows anyone with access to the code to gain administrator privileges.", "line": 2, "file": "auth.py", "confidence": 100.0}, {"type": "SQL injection", "severity": "critical", "description": "The `get_user_data` function is vulnerable to SQL injection.  User-supplied input (`user_id`) is directly incorporated into the SQL query without proper sanitization or parameterization.  A malicious actor could inject arbitrary SQL code to access or modify the database.", "line": 7, "file": "auth.py", "confidence": 100.0}, {"type": "Authentication bypass", "severity": "critical", "description": "The authentication mechanism is extremely weak.  Only a single hardcoded password protects the admin account. There's no salting or hashing of passwords, making it trivial to compromise.", "line": 2, "file": "auth.py", "confidence": 100.0}, {"type": "Missing input validation", "severity": "medium", "description": "The `get_user_data` function does not validate the `user_id` input.  This could lead to unexpected behavior or errors if the input is not a valid integer or if it's formatted maliciously.", "line": 7, "file": "auth.py", "confidence": 90.0}, {"type": "Path traversal", "severity": "critical", "description": "The code directly uses the filename from the uploaded file to construct the file path.  An attacker could manipulate the filename to traverse directories and overwrite arbitrary files on the system. For example, an attacker could upload a file named '../etc/passwd' to read the system's password file.", "line": 3, "file": "upload.py", "confidence": 100.0}, {"type": "Insecure file operations", "severity": "high", "description": "The code lacks proper file validation and sanitization before saving the uploaded file. This could lead to the upload of malicious files (e.g., executables, scripts) that could be executed on the server.", "line": 3, "file": "upload.py", "confidence": 95.0}, {"type": "Command injection", "severity": "critical", "description": "While not directly apparent in `save_uploaded_file`, the lack of input sanitization in combination with potential file execution makes command injection possible if a malicious file is uploaded and executed.", "line": 3, "file": "upload.py", "confidence": 80.0}, {"type": "Missing input validation", "severity": "high", "description": "The filename is used directly without any validation or sanitization.  This allows attackers to use potentially harmful characters or file extensions.", "line": 2, "file": "upload.py", "confidence": 90.0}, {"type": "Insecure deserialization", "severity": "critical", "description": "The `eval()` function in `process_xml` is extremely dangerous.  It executes arbitrary code contained within the XML data, leading to Remote Code Execution (RCE).  Never use `eval()` with untrusted input.", "line": 6, "file": "upload.py", "confidence": 100.0}], "total_issues": 9, "severity_breakdown": {"critical": 6, "high": 2, "medium": 1, "low": 0}, "decision": {"decision": "BLOCK", "risk_level": "critical", "summary": "Found 6 critical security issues", "recommendations": ["Fix critical security issues immediately", "Review security best practices"]}, "errors": [], "analysis_method": "agent_system"}, "error": null}, {"id": "64a9e795-0b74-448f-808e-a12cb651c2e2", "type": "security", "code_snippets": [{"file_path": "auth.py", "content": "def login(username, password):\n    admin_pass = 'superSecret123!'\n    if password == admin_pass:\n        return True\n    return False\n\ndef get_user_data(user_id):\n    query = f\"SELECT * FROM users WHERE id = {user_id}\"\n    return execute_query(query)", "language": "python"}, {"file_path": "upload.py", "content": "def save_uploaded_file(file):\n    filename = file.filename\n    file.save('/uploads/' + filename)\n    return filename\n\ndef process_xml(data):\n    return eval(data)", "language": "python"}], "status": "completed", "created_at": "2025-07-27T08:05:09.375476", "started_at": "2025-07-27T08:05:09.648333", "completed_at": "2025-07-27T08:05:18.483108", "results": {"security_issues": [{"type": "Hardcoded passwords/secrets/API keys", "severity": "critical", "description": "The administrator password 'superSecret123!' is hardcoded in the `login` function.  This is a critical vulnerability as it allows anyone with access to the code to gain administrator privileges.", "line": 2, "file": "auth.py", "confidence": 100.0}, {"type": "SQL injection", "severity": "critical", "description": "The `get_user_data` function is vulnerable to SQL injection.  User-supplied input (`user_id`) is directly incorporated into the SQL query without proper sanitization or parameterization.  An attacker could inject malicious SQL code to manipulate the query and potentially gain unauthorized access to the database.", "line": 7, "file": "auth.py", "confidence": 100.0}, {"type": "Authentication bypass", "severity": "critical", "description": "The authentication mechanism is extremely weak.  Only a single hardcoded password protects the admin account. There's no salting or hashing of passwords, making it trivial to compromise.", "line": 2, "file": "auth.py", "confidence": 100.0}, {"type": "Path traversal", "severity": "critical", "description": "The code directly uses the filename from the uploaded file to construct the file path.  An attacker could manipulate the filename to traverse directories and overwrite arbitrary files on the system. For example, an attacker could upload a file named '../etc/passwd' to read the system's password file.", "line": 3, "file": "upload.py", "confidence": 100.0}, {"type": "Insecure file operations", "severity": "high", "description": "The code lacks proper file validation and sanitization before saving the uploaded file. This could lead to various issues, including the path traversal vulnerability mentioned above, as well as the potential for uploading malicious files (e.g., executables) that could be executed on the server.", "line": 3, "file": "upload.py", "confidence": 95.0}, {"type": "Command injection", "severity": "critical", "description": "While not directly present in the file saving function, the `process_xml` function uses `eval()`, which is extremely dangerous. If the XML data is not properly sanitized and validated, an attacker could inject arbitrary Python code, leading to complete server compromise.", "line": 6, "file": "upload.py", "confidence": 100.0}, {"type": "Missing input validation", "severity": "high", "description": "The `save_uploaded_file` function does not validate the file type or content before saving it.  This allows attackers to upload malicious files (e.g., scripts, executables) that could be executed on the server or cause other harm.", "line": 2, "file": "upload.py", "confidence": 90.0}, {"type": "XSS vulnerabilities", "severity": "medium", "description": "Although not directly present in this code snippet, if the filename is ever used in a web application context without proper escaping, it could lead to XSS vulnerabilities.  An attacker could upload a file with a malicious filename containing JavaScript code that would be executed in a user's browser.", "line": 3, "file": "upload.py", "confidence": 80.0}], "total_issues": 8, "severity_breakdown": {"critical": 5, "high": 2, "medium": 1, "low": 0}, "decision": {"decision": "BLOCK", "risk_level": "critical", "summary": "Found 5 critical security issues", "recommendations": ["Fix critical security issues immediately", "Review security best practices"]}, "errors": [], "analysis_method": "agent_system"}, "error": null}, {"id": "b8012fc6-b96d-42e7-87a6-91773af4155c", "type": "pr", "pr_url": "https://github.com/virattt/ai-hedge-fund/pull/376", "status": "completed", "mode": "standard", "created_at": "2025-07-27T08:15:45.813651", "started_at": "2025-07-27T08:15:46.040530", "completed_at": "2025-07-27T08:16:37.528449", "results": {"error": "Error during PR analysis: Cannot copy out of meta tensor; no data! Please use torch.nn.Module.to_empty() instead of torch.nn.Module.to() when moving module from meta to a different device.", "errors": ["Error during PR analysis: Cannot copy out of meta tensor; no data! Please use torch.nn.Module.to_empty() instead of torch.nn.Module.to() when moving module from meta to a different device."]}, "error": null}, {"id": "b8012fc6-b96d-42e7-87a6-91773af4155c", "type": "pr", "pr_url": "https://github.com/virattt/ai-hedge-fund/pull/376", "status": "completed", "mode": "standard", "created_at": "2025-07-27T08:15:45.813651", "started_at": "2025-07-27T08:15:46.040530", "completed_at": "2025-07-27T08:16:37.604483", "results": {"error": "Error during PR analysis: Cannot copy out of meta tensor; no data! Please use torch.nn.Module.to_empty() instead of torch.nn.Module.to() when moving module from meta to a different device.", "errors": ["Error during PR analysis: Cannot copy out of meta tensor; no data! Please use torch.nn.Module.to_empty() instead of torch.nn.Module.to() when moving module from meta to a different device."]}, "error": null}, {"id": "deb27f00-6db6-4e25-bd49-19ad5602c438", "type": "pr", "pr_url": "https://github.com/virattt/ai-hedge-fund/pull/376/", "status": "completed", "mode": "deep", "created_at": "2025-07-27T13:00:12.101901", "started_at": "2025-07-27T13:00:12.209846", "completed_at": "2025-07-27T13:00:12.212261", "results": {"error": "Error during PR analysis: invalid literal for int() with base 10: ''", "errors": ["Error during PR analysis: invalid literal for int() with base 10: ''"]}, "error": null}, {"id": "deb27f00-6db6-4e25-bd49-19ad5602c438", "type": "pr", "pr_url": "https://github.com/virattt/ai-hedge-fund/pull/376/", "status": "completed", "mode": "deep", "created_at": "2025-07-27T13:00:12.101901", "started_at": "2025-07-27T13:00:13.187121", "completed_at": "2025-07-27T13:00:13.189164", "results": {"error": "Error during PR analysis: invalid literal for int() with base 10: ''", "errors": ["Error during PR analysis: invalid literal for int() with base 10: ''"]}, "error": null}, {"id": "3aa47ea7-155b-4df3-84b2-d5c14688f4e0", "type": "pr", "pr_url": "https://github.com/virattt/ai-hedge-fund/pull/376", "status": "completed", "mode": "deep", "created_at": "2025-07-27T13:04:25.487914", "started_at": "2025-07-27T13:04:26.280373", "completed_at": "2025-07-27T13:05:45.511582", "results": {"error": "Error during PR analysis: Cannot copy out of meta tensor; no data! Please use torch.nn.Module.to_empty() instead of torch.nn.Module.to() when moving module from meta to a different device.", "errors": ["Error during PR analysis: Cannot copy out of meta tensor; no data! Please use torch.nn.Module.to_empty() instead of torch.nn.Module.to() when moving module from meta to a different device."]}, "error": null}, {"id": "3aa47ea7-155b-4df3-84b2-d5c14688f4e0", "type": "pr", "pr_url": "https://github.com/virattt/ai-hedge-fund/pull/376", "status": "completed", "mode": "deep", "created_at": "2025-07-27T13:04:25.487914", "started_at": "2025-07-27T13:04:26.280373", "completed_at": "2025-07-27T13:05:47.605074", "results": {"security_issues": [], "quality_issues": [], "logic_issues": [], "decision": {}, "pr_details": {"id": 2624612235, "number": 376, "title": "Add trading module and Alpaca broker", "body": "Hi,\r\n\r\nthis MR adds trading module and implementation for Alpaca (https://alpaca.markets) broker. ", "state": "open", "created_at": "2025-06-27 14:39:06+00:00", "updated_at": "2025-06-30 13:45:30+00:00", "closed_at": null, "merged_at": null, "merge_commit_sha": "5840c478e71cd576576d20736ae06ddf25a3688f", "author": "amalysh", "assignees": [], "reviewers": [], "labels": [], "milestone": null, "base_branch": "main", "head_branch": "alpaca-trading", "base_sha": "b725e61484bbcfbeb6339b9659fd95e7164847ac", "head_sha": "626e4d48a5c47b47f10d0a878b82471fc14bddf5", "mergeable": true, "mergeable_state": "clean", "merged": false, "comments": 0, "review_comments": 0, "commits": 6, "additions": 1788, "deletions": 28, "changed_files": 8, "files": [{"filename": ".env.example", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "patch": "@@ -21,3 +21,8 @@ FINANCIAL_DATASETS_API_KEY=your-financial-datasets-api-key\n # For running LLMs hosted by openai (gpt-4o, gpt-4o-mini, etc.)\n # Get your OpenAI API key from https://platform.openai.com/\n OPENAI_API_KEY=your-openai-api-key\n+\n+# Alpaca (required)\n+ALPACA_API_KEY=your-alpaca-api-key\n+ALPACA_SECRET_KEY=your-alpaca-secret-key\n+ALPACA_PAPER=true  # Set to false for live trading", "blob_url": "https://github.com/virattt/ai-hedge-fund/blob/626e4d48a5c47b47f10d0a878b82471fc14bddf5/.env.example", "raw_url": "https://github.com/virattt/ai-hedge-fund/raw/626e4d48a5c47b47f10d0a878b82471fc14bddf5/.env.example", "contents_url": "https://api.github.com/repos/virattt/ai-hedge-fund/contents/.env.example?ref=626e4d48a5c47b47f10d0a878b82471fc14bddf5"}, {"filename": "poetry.lock", "status": "modified", "additions": 250, "deletions": 28, "changes": 278, "patch": "@@ -1,11 +1,12 @@\n-# This file is automatically @generated by Poetry 1.8.5 and should not be changed by hand.\n+# This file is automatically @generated by Poetry 2.1.3 and should not be changed by hand.\n \n [[package]]\n name = \"aiohappyeyeballs\"\n version = \"2.6.1\"\n description = \"Happy Eyeballs for asyncio\"\n optional = false\n python-versions = \">=3.9\"\n+groups = [\"main\"]\n files = [\n     {file = \"aiohappyeyeballs-2.6.1-py3-none-any.whl\", hash = \"sha256:f349ba8f4b75cb25c99c5c2d84e997e485204d2902a9597802b0371f09331fb8\"},\n     {file = \"aiohappyeyeballs-2.6.1.tar.gz\", hash = \"sha256:c3f9d0113123803ccadfdf3f0faa505bc78e6a72d1cc4806cbd719826e943558\"},\n@@ -17,6 +18,7 @@ version = \"3.11.18\"\n description = \"Async http client/server framework (asyncio)\"\n optional = false\n python-versions = \">=3.9\"\n+groups = [\"main\"]\n files = [\n     {file = \"aiohttp-3.11.18-cp310-cp310-macosx_10_9_universal2.whl\", hash = \"sha256:96264854fedbea933a9ca4b7e0c745728f01380691687b7365d18d9e977179c4\"},\n     {file = \"aiohttp-3.11.18-cp310-cp310-macosx_10_9_x86_64.whl\", hash = \"sha256:9602044ff047043430452bc3a2089743fa85da829e6fc9ee0025351d66c332b6\"},\n@@ -111,14 +113,15 @@ propcache = \">=0.2.0\"\n yarl = \">=1.17.0,<2.0\"\n \n [package.extras]\n-speedups = [\"Brotli\", \"aiodns (>=3.2.0)\", \"brotlicffi\"]\n+speedups = [\"Brotli ; platform_python_implementation == \\\"CPython\\\"\", \"aiodns (>=3.2.0) ; sys_platform == \\\"linux\\\" or sys_platform == \\\"darwin\\\"\", \"brotlicffi ; platform_python_implementation != \\\"CPython\\\"\"]\n \n [[package]]\n name = \"aiosignal\"\n version = \"1.3.2\"\n description = \"aiosignal: a list of registered asynchronous callbacks\"\n optional = false\n python-versions = \">=3.9\"\n+groups = [\"main\"]\n files = [\n     {file = \"aiosignal-1.3.2-py2.py3-none-any.whl\", hash = \"sha256:45cde58e409a301715980c2b01d0c28bdde3770d8290b5eb2173759d9acb31a5\"},\n     {file = \"aiosignal-1.3.2.tar.gz\", hash = \"sha256:a8c255c66fafb1e499c9351d0bf32ff2d8a0321595ebac3b93713656d2436f54\"},\n@@ -133,6 +136,7 @@ version = \"1.15.2\"\n description = \"A database migration tool for SQLAlchemy.\"\n optional = false\n python-versions = \">=3.9\"\n+groups = [\"main\"]\n files = [\n     {file = \"alembic-1.15.2-py3-none-any.whl\", hash = \"sha256:2e76bd916d547f6900ec4bb5a90aeac1485d2c92536923d0b138c02b126edc53\"},\n     {file = \"alembic-1.15.2.tar.gz\", hash = \"sha256:1c72391bbdeffccfe317eefba686cb9a3c078005478885413b95c3b26c57a8a7\"},\n@@ -146,12 +150,33 @@ typing-extensions = \">=4.12\"\n [package.extras]\n tz = [\"tzdata\"]\n \n+[[package]]\n+name = \"alpaca-py\"\n+version = \"0.40.2\"\n+description = \"The Official Python SDK for Alpaca APIs\"\n+optional = false\n+python-versions = \"<4.0.0,>=3.8.0\"\n+groups = [\"main\"]\n+files = [\n+    {file = \"alpaca_py-0.40.2-py3-none-any.whl\", hash = \"sha256:bd21a5d290051d28ff4811b0cda2a1b45a4c6bb80f49b037c7bc2fe15302f035\"},\n+    {file = \"alpaca_py-0.40.2.tar.gz\", hash = \"sha256:d1e63b628cff4d9935a0c24c3a4419a985d4216a531c5c7b2d9fcd49e3c5fb70\"},\n+]\n+\n+[package.dependencies]\n+msgpack = \">=1.0.3,<2.0.0\"\n+pandas = \">=1.5.3\"\n+pydantic = \">=2.0.3,<3.0.0\"\n+requests = \">=2.30.0,<3.0.0\"\n+sseclient-py = \">=1.7.2,<2.0.0\"\n+websockets = \">=10.4\"\n+\n [[package]]\n name = \"annotated-types\"\n version = \"0.7.0\"\n description = \"Reusable constraint types to use with typing.Annotated\"\n optional = false\n python-versions = \">=3.8\"\n+groups = [\"main\"]\n files = [\n     {file = \"annotated_types-0.7.0-py3-none-any.whl\", hash = \"sha256:1f02e8b43a8fbbc3f3e0d4f0f4bfc8131bcb4eebe8849b8e5c773f3a1c582a53\"},\n     {file = \"annotated_types-0.7.0.tar.gz\", hash = \"sha256:aff07c09a53a08bc8cfccb9c85b05f1aa9a2a6f23728d790723543408344ce89\"},\n@@ -163,6 +188,7 @@ version = \"0.50.0\"\n description = \"The official Python library for the anthropic API\"\n optional = false\n python-versions = \">=3.8\"\n+groups = [\"main\"]\n files = [\n     {file = \"anthropic-0.50.0-py3-none-any.whl\", hash = \"sha256:defbd79327ca2fa61fd7b9eb2f1627dfb1f69c25d49288c52e167ddb84574f80\"},\n     {file = \"anthropic-0.50.0.tar.gz\", hash = \"sha256:42175ec04ce4ff2fa37cd436710206aadff546ee99d70d974699f59b49adc66f\"},\n@@ -187,6 +213,7 @@ version = \"3.7.1\"\n description = \"High level compatibility layer for multiple asynchronous event loop implementations\"\n optional = false\n python-versions = \">=3.7\"\n+groups = [\"main\"]\n files = [\n     {file = \"anyio-3.7.1-py3-none-any.whl\", hash = \"sha256:91dee416e570e92c64041bd18b900d1d6fa78dff7048769ce5ac5ddad004fbb5\"},\n     {file = \"anyio-3.7.1.tar.gz\", hash = \"sha256:44a3c9aba0f5defa43261a8b3efb97891f2bd7d804e0e1f56419befa1adfc780\"},\n@@ -198,7 +225,7 @@ sniffio = \">=1.1\"\n \n [package.extras]\n doc = [\"Sphinx\", \"packaging\", \"sphinx-autodoc-typehints (>=1.2.0)\", \"sphinx-rtd-theme (>=1.2.2)\", \"sphinxcontrib-jquery\"]\n-test = [\"anyio[trio]\", \"coverage[toml] (>=4.5)\", \"hypothesis (>=4.0)\", \"mock (>=4)\", \"psutil (>=5.9)\", \"pytest (>=7.0)\", \"pytest-mock (>=3.6.1)\", \"trustme\", \"uvloop (>=0.17)\"]\n+test = [\"anyio[trio]\", \"coverage[toml] (>=4.5)\", \"hypothesis (>=4.0)\", \"mock (>=4) ; python_version < \\\"3.8\\\"\", \"psutil (>=5.9)\", \"pytest (>=7.0)\", \"pytest-mock (>=3.6.1)\", \"trustme\", \"uvloop (>=0.17) ; python_version < \\\"3.12\\\" and platform_python_implementation == \\\"CPython\\\" and platform_system != \\\"Windows\\\"\"]\n trio = [\"trio (<0.22)\"]\n \n [[package]]\n@@ -207,25 +234,27 @@ version = \"25.3.0\"\n description = \"Classes Without Boilerplate\"\n optional = false\n python-versions = \">=3.8\"\n+groups = [\"main\"]\n files = [\n     {file = \"attrs-25.3.0-py3-none-any.whl\", hash = \"sha256:427318ce031701fea540783410126f03899a97ffc6f61596ad581ac2e40e3bc3\"},\n     {file = \"attrs-25.3.0.tar.gz\", hash = \"sha256:75d7cefc7fb576747b2c81b4442d4d4a1ce0900973527c011d1030fd3bf4af1b\"},\n ]\n \n [package.extras]\n-benchmark = [\"cloudpickle\", \"hypothesis\", \"mypy (>=1.11.1)\", \"pympler\", \"pytest (>=4.3.0)\", \"pytest-codspeed\", \"pytest-mypy-plugins\", \"pytest-xdist[psutil]\"]\n-cov = [\"cloudpickle\", \"coverage[toml] (>=5.3)\", \"hypothesis\", \"mypy (>=1.11.1)\", \"pympler\", \"pytest (>=4.3.0)\", \"pytest-mypy-plugins\", \"pytest-xdist[psutil]\"]\n-dev = [\"cloudpickle\", \"hypothesis\", \"mypy (>=1.11.1)\", \"pre-commit-uv\", \"pympler\", \"pytest (>=4.3.0)\", \"pytest-mypy-plugins\", \"pytest-xdist[psutil]\"]\n+benchmark = [\"cloudpickle ; platform_python_implementation == \\\"CPython\\\"\", \"hypothesis\", \"mypy (>=1.11.1) ; platform_python_implementation == \\\"CPython\\\" and python_version >= \\\"3.10\\\"\", \"pympler\", \"pytest (>=4.3.0)\", \"pytest-codspeed\", \"pytest-mypy-plugins ; platform_python_implementation == \\\"CPython\\\" and python_version >= \\\"3.10\\\"\", \"pytest-xdist[psutil]\"]\n+cov = [\"cloudpickle ; platform_python_implementation == \\\"CPython\\\"\", \"coverage[toml] (>=5.3)\", \"hypothesis\", \"mypy (>=1.11.1) ; platform_python_implementation == \\\"CPython\\\" and python_version >= \\\"3.10\\\"\", \"pympler\", \"pytest (>=4.3.0)\", \"pytest-mypy-plugins ; platform_python_implementation == \\\"CPython\\\" and python_version >= \\\"3.10\\\"\", \"pytest-xdist[psutil]\"]\n+dev = [\"cloudpickle ; platform_python_implementation == \\\"CPython\\\"\", \"hypothesis\", \"mypy (>=1.11.1) ; platform_python_implementation == \\\"CPython\\\" and python_version >= \\\"3.10\\\"\", \"pre-commit-uv\", \"pympler\", \"pytest (>=4.3.0)\", \"pytest-mypy-plugins ; platform_python_implementation == \\\"CPython\\\" and python_version >= \\\"3.10\\\"\", \"pytest-xdist[psutil]\"]\n docs = [\"cogapp\", \"furo\", \"myst-parser\", \"sphinx\", \"sphinx-notfound-page\", \"sphinxcontrib-towncrier\", \"towncrier\"]\n-tests = [\"cloudpickle\", \"hypothesis\", \"mypy (>=1.11.1)\", \"pympler\", \"pytest (>=4.3.0)\", \"pytest-mypy-plugins\", \"pytest-xdist[psutil]\"]\n-tests-mypy = [\"mypy (>=1.11.1)\", \"pytest-mypy-plugins\"]\n+tests = [\"cloudpickle ; platform_python_implementation == \\\"CPython\\\"\", \"hypothesis\", \"mypy (>=1.11.1) ; platform_python_implementation == \\\"CPython\\\" and python_version >= \\\"3.10\\\"\", \"pympler\", \"pytest (>=4.3.0)\", \"pytest-mypy-plugins ; platform_python_implementation == \\\"CPython\\\" and python_version >= \\\"3.10\\\"\", \"pytest-xdist[psutil]\"]\n+tests-mypy = [\"mypy (>=1.11.1) ; platform_python_implementation == \\\"CPython\\\" and python_version >= \\\"3.10\\\"\", \"pytest-mypy-plugins ; platform_python_implementation == \\\"CPython\\\" and python_version >= \\\"3.10\\\"\"]\n \n [[package]]\n name = \"black\"\n version = \"23.12.1\"\n description = \"The uncompromising code formatter.\"\n optional = false\n python-versions = \">=3.8\"\n+groups = [\"dev\"]\n files = [\n     {file = \"black-23.12.1-cp310-cp310-macosx_10_9_x86_64.whl\", hash = \"sha256:e0aaf6041986767a5e0ce663c7a2f0e9eaf21e6ff87a5f95cbf3675bfd4c41d2\"},\n     {file = \"black-23.12.1-cp310-cp310-macosx_11_0_arm64.whl\", hash = \"sha256:c88b3711d12905b74206227109272673edce0cb29f27e1385f33b0163c414bba\"},\n@@ -260,7 +289,7 @@ platformdirs = \">=2\"\n \n [package.extras]\n colorama = [\"colorama (>=0.4.3)\"]\n-d = [\"aiohttp (>=3.7.4)\", \"aiohttp (>=3.7.4,!=3.9.0)\"]\n+d = [\"aiohttp (>=3.7.4) ; sys_platform != \\\"win32\\\" or implementation_name != \\\"pypy\\\"\", \"aiohttp (>=3.7.4,!=3.9.0) ; sys_platform == \\\"win32\\\" and implementation_name == \\\"pypy\\\"\"]\n jupyter = [\"ipython (>=7.8.0)\", \"tokenize-rt (>=3.2.0)\"]\n uvloop = [\"uvloop (>=0.15.2)\"]\n \n@@ -270,6 +299,7 @@ version = \"5.5.2\"\n description = \"Extensible memoizing collections and decorators\"\n optional = false\n python-versions = \">=3.7\"\n+groups = [\"main\"]\n files = [\n     {file = \"cachetools-5.5.2-py3-none-any.whl\", hash = \"sha256:d26a22bcc62eb95c3beabd9f1ee5e820d3d2704fe2967cbe350e20c8ffcd3f0a\"},\n     {file = \"cachetools-5.5.2.tar.gz\", hash = \"sha256:1a661caa9175d26759571b2e19580f9d6393969e5dfca11fdb1f947a23e640d4\"},\n@@ -281,6 +311,7 @@ version = \"2025.4.26\"\n description = \"Python package for providing Mozilla's CA Bundle.\"\n optional = false\n python-versions = \">=3.6\"\n+groups = [\"main\"]\n files = [\n     {file = \"certifi-2025.4.26-py3-none-any.whl\", hash = \"sha256:30350364dfe371162649852c63336a15c70c6510c2ad5015b21c2345311805f3\"},\n     {file = \"certifi-2025.4.26.tar.gz\", hash = \"sha256:0a816057ea3cdefcef70270d2c515e4506bbc954f417fa5ade2021213bb8f0c6\"},\n@@ -292,6 +323,7 @@ version = \"3.4.1\"\n description = \"The Real First Universal Charset Detector. Open, modern and actively maintained alternative to Chardet.\"\n optional = false\n python-versions = \">=3.7\"\n+groups = [\"main\"]\n files = [\n     {file = \"charset_normalizer-3.4.1-cp310-cp310-macosx_10_9_universal2.whl\", hash = \"sha256:91b36a978b5ae0ee86c394f5a54d6ef44db1de0815eb43de826d41d21e4af3de\"},\n     {file = \"charset_normalizer-3.4.1-cp310-cp310-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:7461baadb4dc00fd9e0acbe254e3d7d2112e7f92ced2adc96e54ef6501c5f176\"},\n@@ -393,6 +425,7 @@ version = \"8.1.8\"\n description = \"Composable command line interface toolkit\"\n optional = false\n python-versions = \">=3.7\"\n+groups = [\"main\", \"dev\"]\n files = [\n     {file = \"click-8.1.8-py3-none-any.whl\", hash = \"sha256:63c132bbbed01578a06712a2d1f497bb62d9c1c0d329b7903a866228027263b2\"},\n     {file = \"click-8.1.8.tar.gz\", hash = \"sha256:ed53c9d8990d83c2a27deae68e4ee337473f6330c040a31d4225c9574d16096a\"},\n@@ -407,6 +440,7 @@ version = \"0.4.6\"\n description = \"Cross-platform colored terminal text.\"\n optional = false\n python-versions = \"!=3.0.*,!=3.1.*,!=3.2.*,!=3.3.*,!=3.4.*,!=3.5.*,!=3.6.*,>=2.7\"\n+groups = [\"main\", \"dev\"]\n files = [\n     {file = \"colorama-0.4.6-py2.py3-none-any.whl\", hash = \"sha256:4f1d9991f5acc0ca119f9d443620b77f9d6b33703e51011c16baf57afb285fc6\"},\n     {file = \"colorama-0.4.6.tar.gz\", hash = \"sha256:08695f5cb7ed6e0531a20572697297273c47b8cae5a63ffc6d6ed5c201be6e44\"},\n@@ -418,6 +452,7 @@ version = \"1.3.2\"\n description = \"Python library for calculating contours of 2D quadrilateral grids\"\n optional = false\n python-versions = \">=3.10\"\n+groups = [\"main\"]\n files = [\n     {file = \"contourpy-1.3.2-cp310-cp310-macosx_10_9_x86_64.whl\", hash = \"sha256:ba38e3f9f330af820c4b27ceb4b9c7feee5fe0493ea53a8720f4792667465934\"},\n     {file = \"contourpy-1.3.2-cp310-cp310-macosx_11_0_arm64.whl\", hash = \"sha256:dc41ba0714aa2968d1f8674ec97504a8f7e334f48eeacebcaa6256213acb0989\"},\n@@ -494,6 +529,7 @@ version = \"0.12.1\"\n description = \"Composable style cycles\"\n optional = false\n python-versions = \">=3.8\"\n+groups = [\"main\"]\n files = [\n     {file = \"cycler-0.12.1-py3-none-any.whl\", hash = \"sha256:85cef7cff222d8644161529808465972e51340599459b8ac3ccbac5a854e0d30\"},\n     {file = \"cycler-0.12.1.tar.gz\", hash = \"sha256:88bb128f02ba341da8ef447245a9e138fae777f6a23943da4540077d3601eb1c\"},\n@@ -509,6 +545,7 @@ version = \"0.7.1\"\n description = \"XML bomb protection for Python stdlib modules\"\n optional = false\n python-versions = \">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*\"\n+groups = [\"main\"]\n files = [\n     {file = \"defusedxml-0.7.1-py2.py3-none-any.whl\", hash = \"sha256:a352e7e428770286cc899e2542b6cdaedb2b4953ff269a210103ec58f6198a61\"},\n     {file = \"defusedxml-0.7.1.tar.gz\", hash = \"sha256:1bb3032db185915b62d7c6209c5a8792be6a32ab2fedacc84e01b52c51aa3e69\"},\n@@ -520,6 +557,7 @@ version = \"1.9.0\"\n description = \"Distro - an OS platform information API\"\n optional = false\n python-versions = \">=3.6\"\n+groups = [\"main\"]\n files = [\n     {file = \"distro-1.9.0-py3-none-any.whl\", hash = \"sha256:7bffd925d65168f85027d8da9af6bddab658135b840670a223589bc0c8ef02b2\"},\n     {file = \"distro-1.9.0.tar.gz\", hash = \"sha256:2fa77c6fd8940f116ee1d6b94a2f90b13b5ea8d019b98bc8bafdcabcdd9bdbed\"},\n@@ -531,6 +569,7 @@ version = \"0.104.1\"\n description = \"FastAPI framework, high performance, easy to learn, fast to code, ready for production\"\n optional = false\n python-versions = \">=3.8\"\n+groups = [\"main\"]\n files = [\n     {file = \"fastapi-0.104.1-py3-none-any.whl\", hash = \"sha256:752dc31160cdbd0436bb93bad51560b57e525cbb1d4bbf6f4904ceee75548241\"},\n     {file = \"fastapi-0.104.1.tar.gz\", hash = \"sha256:e5e4540a7c5e1dcfbbcf5b903c234feddcdcd881f191977a1c5dfd917487e7ae\"},\n@@ -551,6 +590,7 @@ version = \"0.0.7\"\n description = \"Run and manage FastAPI apps from the command line with FastAPI CLI. \ud83d\ude80\"\n optional = false\n python-versions = \">=3.8\"\n+groups = [\"main\"]\n files = [\n     {file = \"fastapi_cli-0.0.7-py3-none-any.whl\", hash = \"sha256:d549368ff584b2804336c61f192d86ddea080c11255f375959627911944804f4\"},\n     {file = \"fastapi_cli-0.0.7.tar.gz\", hash = \"sha256:02b3b65956f526412515907a0793c9094abd4bfb5457b389f645b0ea6ba3605e\"},\n@@ -570,6 +610,7 @@ version = \"1.2.0\"\n description = \"Infer file type and MIME type of any file/buffer. No external dependencies.\"\n optional = false\n python-versions = \"*\"\n+groups = [\"main\"]\n files = [\n     {file = \"filetype-1.2.0-py2.py3-none-any.whl\", hash = \"sha256:7ce71b6880181241cf7ac8697a2f1eb6a8bd9b429f7ad6d27b8db9ba5f1c2d25\"},\n     {file = \"filetype-1.2.0.tar.gz\", hash = \"sha256:66b56cd6474bf41d8c54660347d37afcc3f7d1970648de365c102ef77548aadb\"},\n@@ -581,6 +622,7 @@ version = \"6.1.0\"\n description = \"the modular source code checker: pep8 pyflakes and co\"\n optional = false\n python-versions = \">=3.8.1\"\n+groups = [\"dev\"]\n files = [\n     {file = \"flake8-6.1.0-py2.py3-none-any.whl\", hash = \"sha256:ffdfce58ea94c6580c77888a86506937f9a1a227dfcd15f245d694ae20a6b6e5\"},\n     {file = \"flake8-6.1.0.tar.gz\", hash = \"sha256:d5b3857f07c030bdb5bf41c7f53799571d75c4491748a3adcd47de929e34cd23\"},\n@@ -597,6 +639,7 @@ version = \"4.57.0\"\n description = \"Tools to manipulate font files\"\n optional = false\n python-versions = \">=3.8\"\n+groups = [\"main\"]\n files = [\n     {file = \"fonttools-4.57.0-cp310-cp310-macosx_10_9_universal2.whl\", hash = \"sha256:babe8d1eb059a53e560e7bf29f8e8f4accc8b6cfb9b5fd10e485bde77e71ef41\"},\n     {file = \"fonttools-4.57.0-cp310-cp310-macosx_10_9_x86_64.whl\", hash = \"sha256:81aa97669cd726349eb7bd43ca540cf418b279ee3caba5e2e295fb4e8f841c02\"},\n@@ -651,25 +694,26 @@ files = [\n ]\n \n [package.extras]\n-all = [\"brotli (>=1.0.1)\", \"brotlicffi (>=0.8.0)\", \"fs (>=2.2.0,<3)\", \"lxml (>=4.0)\", \"lz4 (>=1.7.4.2)\", \"matplotlib\", \"munkres\", \"pycairo\", \"scipy\", \"skia-pathops (>=0.5.0)\", \"sympy\", \"uharfbuzz (>=0.23.0)\", \"unicodedata2 (>=15.1.0)\", \"xattr\", \"zopfli (>=0.1.4)\"]\n+all = [\"brotli (>=1.0.1) ; platform_python_implementation == \\\"CPython\\\"\", \"brotlicffi (>=0.8.0) ; platform_python_implementation != \\\"CPython\\\"\", \"fs (>=2.2.0,<3)\", \"lxml (>=4.0)\", \"lz4 (>=1.7.4.2)\", \"matplotlib\", \"munkres ; platform_python_implementation == \\\"PyPy\\\"\", \"pycairo\", \"scipy ; platform_python_implementation != \\\"PyPy\\\"\", \"skia-pathops (>=0.5.0)\", \"sympy\", \"uharfbuzz (>=0.23.0)\", \"unicodedata2 (>=15.1.0) ; python_version <= \\\"3.12\\\"\", \"xattr ; sys_platform == \\\"darwin\\\"\", \"zopfli (>=0.1.4)\"]\n graphite = [\"lz4 (>=1.7.4.2)\"]\n-interpolatable = [\"munkres\", \"pycairo\", \"scipy\"]\n+interpolatable = [\"munkres ; platform_python_implementation == \\\"PyPy\\\"\", \"pycairo\", \"scipy ; platform_python_implementation != \\\"PyPy\\\"\"]\n lxml = [\"lxml (>=4.0)\"]\n pathops = [\"skia-pathops (>=0.5.0)\"]\n plot = [\"matplotlib\"]\n repacker = [\"uharfbuzz (>=0.23.0)\"]\n symfont = [\"sympy\"]\n-type1 = [\"xattr\"]\n+type1 = [\"xattr ; sys_platform == \\\"darwin\\\"\"]\n ufo = [\"fs (>=2.2.0,<3)\"]\n-unicode = [\"unicodedata2 (>=15.1.0)\"]\n-woff = [\"brotli (>=1.0.1)\", \"brotlicffi (>=0.8.0)\", \"zopfli (>=0.1.4)\"]\n+unicode = [\"unicodedata2 (>=15.1.0) ; python_version <= \\\"3.12\\\"\"]\n+woff = [\"brotli (>=1.0.1) ; platform_python_implementation == \\\"CPython\\\"\", \"brotlicffi (>=0.8.0) ; platform_python_implementation != \\\"CPython\\\"\", \"zopfli (>=0.1.4)\"]\n \n [[package]]\n name = \"frozenlist\"\n version = \"1.6.0\"\n description = \"A list-like structure which implements collections.abc.MutableSequence\"\n optional = false\n python-versions = \">=3.9\"\n+groups = [\"main\"]\n files = [\n     {file = \"frozenlist-1.6.0-cp310-cp310-macosx_10_9_universal2.whl\", hash = \"sha256:e6e558ea1e47fd6fa8ac9ccdad403e5dd5ecc6ed8dda94343056fa4277d5c65e\"},\n     {file = \"frozenlist-1.6.0-cp310-cp310-macosx_10_9_x86_64.whl\", hash = \"sha256:f4b3cd7334a4bbc0c472164f3744562cb72d05002cc6fcf58adb104630bbc352\"},\n@@ -783,6 +827,7 @@ version = \"0.6.18\"\n description = \"Google Ai Generativelanguage API client library\"\n optional = false\n python-versions = \">=3.7\"\n+groups = [\"main\"]\n files = [\n     {file = \"google_ai_generativelanguage-0.6.18-py3-none-any.whl\", hash = \"sha256:13d8174fea90b633f520789d32df7b422058fd5883b022989c349f1017db7fcf\"},\n     {file = \"google_ai_generativelanguage-0.6.18.tar.gz\", hash = \"sha256:274ba9fcf69466ff64e971d565884434388e523300afd468fc8e3033cd8e606e\"},\n@@ -792,7 +837,7 @@ files = [\n google-api-core = {version = \">=1.34.1,<2.0.dev0 || >=2.11.dev0,<3.0.0\", extras = [\"grpc\"]}\n google-auth = \">=2.14.1,<2.24.0 || >2.24.0,<2.25.0 || >2.25.0,<3.0.0\"\n proto-plus = [\n-    {version = \">=1.22.3,<2.0.0\", markers = \"python_version < \\\"3.13\\\"\"},\n+    {version = \">=1.22.3,<2.0.0\"},\n     {version = \">=1.25.0,<2.0.0\", markers = \"python_version >= \\\"3.13\\\"\"},\n ]\n protobuf = \">=3.20.2,<4.21.0 || >4.21.0,<4.21.1 || >4.21.1,<4.21.2 || >4.21.2,<4.21.3 || >4.21.3,<4.21.4 || >4.21.4,<4.21.5 || >4.21.5,<7.0.0\"\n@@ -803,6 +848,7 @@ version = \"2.24.2\"\n description = \"Google API client core library\"\n optional = false\n python-versions = \">=3.7\"\n+groups = [\"main\"]\n files = [\n     {file = \"google_api_core-2.24.2-py3-none-any.whl\", hash = \"sha256:810a63ac95f3c441b7c0e43d344e372887f62ce9071ba972eacf32672e072de9\"},\n     {file = \"google_api_core-2.24.2.tar.gz\", hash = \"sha256:81718493daf06d96d6bc76a91c23874dbf2fac0adbbf542831b805ee6e974696\"},\n@@ -814,15 +860,15 @@ googleapis-common-protos = \">=1.56.2,<2.0.0\"\n grpcio = {version = \">=1.49.1,<2.0dev\", optional = true, markers = \"python_version >= \\\"3.11\\\" and extra == \\\"grpc\\\"\"}\n grpcio-status = {version = \">=1.49.1,<2.0.dev0\", optional = true, markers = \"python_version >= \\\"3.11\\\" and extra == \\\"grpc\\\"\"}\n proto-plus = [\n-    {version = \">=1.22.3,<2.0.0\", markers = \"python_version < \\\"3.13\\\"\"},\n+    {version = \">=1.22.3,<2.0.0\"},\n     {version = \">=1.25.0,<2.0.0\", markers = \"python_version >= \\\"3.13\\\"\"},\n ]\n protobuf = \">=3.19.5,<3.20.0 || >3.20.0,<3.20.1 || >3.20.1,<4.21.0 || >4.21.0,<4.21.1 || >4.21.1,<4.21.2 || >4.21.2,<4.21.3 || >4.21.3,<4.21.4 || >4.21.4,<4.21.5 || >4.21.5,<7.0.0\"\n requests = \">=2.18.0,<3.0.0\"\n \n [package.extras]\n async-rest = [\"google-auth[aiohttp] (>=2.35.0,<3.0.dev0)\"]\n-grpc = [\"grpcio (>=1.33.2,<2.0dev)\", \"grpcio (>=1.49.1,<2.0dev)\", \"grpcio-status (>=1.33.2,<2.0.dev0)\", \"grpcio-status (>=1.49.1,<2.0.dev0)\"]\n+grpc = [\"grpcio (>=1.33.2,<2.0dev)\", \"grpcio (>=1.49.1,<2.0dev) ; python_version >= \\\"3.11\\\"\", \"grpcio-status (>=1.33.2,<2.0.dev0)\", \"grpcio-status (>=1.49.1,<2.0.dev0) ; python_version >= \\\"3.11\\\"\"]\n grpcgcp = [\"grpcio-gcp (>=0.2.2,<1.0.dev0)\"]\n grpcio-gcp = [\"grpcio-gcp (>=0.2.2,<1.0.dev0)\"]\n \n@@ -832,6 +878,7 @@ version = \"2.39.0\"\n description = \"Google Authentication Library\"\n optional = false\n python-versions = \">=3.7\"\n+groups = [\"main\"]\n files = [\n     {file = \"google_auth-2.39.0-py2.py3-none-any.whl\", hash = \"sha256:0150b6711e97fb9f52fe599f55648950cc4540015565d8fbb31be2ad6e1548a2\"},\n     {file = \"google_auth-2.39.0.tar.gz\", hash = \"sha256:73222d43cdc35a3aeacbfdcaf73142a97839f10de930550d89ebfe1d0a00cde7\"},\n@@ -845,11 +892,11 @@ rsa = \">=3.1.4,<5\"\n [package.extras]\n aiohttp = [\"aiohttp (>=3.6.2,<4.0.0)\", \"requests (>=2.20.0,<3.0.0)\"]\n enterprise-cert = [\"cryptography\", \"pyopenssl\"]\n-pyjwt = [\"cryptography (<39.0.0)\", \"cryptography (>=38.0.3)\", \"pyjwt (>=2.0)\"]\n-pyopenssl = [\"cryptography (<39.0.0)\", \"cryptography (>=38.0.3)\", \"pyopenssl (>=20.0.0)\"]\n+pyjwt = [\"cryptography (<39.0.0) ; python_version < \\\"3.8\\\"\", \"cryptography (>=38.0.3)\", \"pyjwt (>=2.0)\"]\n+pyopenssl = [\"cryptography (<39.0.0) ; python_version < \\\"3.8\\\"\", \"cryptography (>=38.0.3)\", \"pyopenssl (>=20.0.0)\"]\n reauth = [\"pyu2f (>=0.1.5)\"]\n requests = [\"requests (>=2.20.0,<3.0.0)\"]\n-testing = [\"aiohttp (<3.10.0)\", \"aiohttp (>=3.6.2,<4.0.0)\", \"aioresponses\", \"cryptography (<39.0.0)\", \"cryptography (>=38.0.3)\", \"flask\", \"freezegun\", \"grpcio\", \"mock\", \"oauth2client\", \"packaging\", \"pyjwt (>=2.0)\", \"pyopenssl (<24.3.0)\", \"pyopenssl (>=20.0.0)\", \"pytest\", \"pytest-asyncio\", \"pytest-cov\", \"pytest-localserver\", \"pyu2f (>=0.1.5)\", \"requests (>=2.20.0,<3.0.0)\", \"responses\", \"urllib3\"]\n+testing = [\"aiohttp (<3.10.0)\", \"aiohttp (>=3.6.2,<4.0.0)\", \"aioresponses\", \"cryptography (<39.0.0) ; python_version < \\\"3.8\\\"\", \"cryptography (>=38.0.3)\", \"flask\", \"freezegun\", \"grpcio\", \"mock\", \"oauth2client\", \"packaging\", \"pyjwt (>=2.0)\", \"pyopenssl (<24.3.0)\", \"pyopenssl (>=20.0.0)\", \"pytest\", \"pytest-asyncio\", \"pytest-cov\", \"pytest-localserver\", \"pyu2f (>=0.1.5)\", \"requests (>=2.20.0,<3.0.0)\", \"responses\", \"urllib3\"]\n urllib3 = [\"packaging\", \"urllib3\"]\n \n [[package]]\n@@ -858,6 +905,7 @@ version = \"1.70.0\"\n description = \"Common protobufs used in Google APIs\"\n optional = false\n python-versions = \">=3.7\"\n+groups = [\"main\"]\n files = [\n     {file = \"googleapis_common_protos-1.70.0-py3-none-any.whl\", hash = \"sha256:b8bfcca8c25a2bb253e0e0b0adaf8c00773e5e6af6fd92397576680b807e0fd8\"},\n     {file = \"googleapis_common_protos-1.70.0.tar.gz\", hash = \"sha256:0e1b44e0ea153e6594f9f394fef15193a68aaaea2d843f83e2742717ca753257\"},\n@@ -875,6 +923,8 @@ version = \"3.2.1\"\n description = \"Lightweight in-process concurrent programming\"\n optional = false\n python-versions = \">=3.9\"\n+groups = [\"main\"]\n+markers = \"python_version < \\\"3.14\\\" and (platform_machine == \\\"aarch64\\\" or platform_machine == \\\"ppc64le\\\" or platform_machine == \\\"x86_64\\\" or platform_machine == \\\"amd64\\\" or platform_machine == \\\"AMD64\\\" or platform_machine == \\\"win32\\\" or platform_machine == \\\"WIN32\\\")\"\n files = [\n     {file = \"greenlet-3.2.1-cp310-cp310-macosx_11_0_universal2.whl\", hash = \"sha256:777c1281aa7c786738683e302db0f55eb4b0077c20f1dc53db8852ffaea0a6b0\"},\n     {file = \"greenlet-3.2.1-cp310-cp310-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:3059c6f286b53ea4711745146ffe5a5c5ff801f62f6c56949446e0f6461f8157\"},\n@@ -943,6 +993,7 @@ version = \"0.23.1\"\n description = \"The official Python library for the groq API\"\n optional = false\n python-versions = \">=3.8\"\n+groups = [\"main\"]\n files = [\n     {file = \"groq-0.23.1-py3-none-any.whl\", hash = \"sha256:05fa38c3d0ad03c19c6185f98f6a73901c2a463e844fd067b79f7b05c8346946\"},\n     {file = \"groq-0.23.1.tar.gz\", hash = \"sha256:952e34895f9bfb78ab479e495d77b32180262e5c42f531ce3a1722d6e5a04dfb\"},\n@@ -962,6 +1013,7 @@ version = \"1.71.0\"\n description = \"HTTP/2-based RPC framework\"\n optional = false\n python-versions = \">=3.9\"\n+groups = [\"main\"]\n files = [\n     {file = \"grpcio-1.71.0-cp310-cp310-linux_armv7l.whl\", hash = \"sha256:c200cb6f2393468142eb50ab19613229dcc7829b5ccee8b658a36005f6669fdd\"},\n     {file = \"grpcio-1.71.0-cp310-cp310-macosx_12_0_universal2.whl\", hash = \"sha256:b2266862c5ad664a380fbbcdbdb8289d71464c42a8c29053820ee78ba0119e5d\"},\n@@ -1025,6 +1077,7 @@ version = \"1.62.3\"\n description = \"Status proto mapping for gRPC\"\n optional = false\n python-versions = \">=3.6\"\n+groups = [\"main\"]\n files = [\n     {file = \"grpcio-status-1.62.3.tar.gz\", hash = \"sha256:289bdd7b2459794a12cf95dc0cb727bd4a1742c37bd823f760236c937e53a485\"},\n     {file = \"grpcio_status-1.62.3-py3-none-any.whl\", hash = \"sha256:f9049b762ba8de6b1086789d8315846e094edac2c50beaf462338b301a8fd4b8\"},\n@@ -1041,6 +1094,7 @@ version = \"0.16.0\"\n description = \"A pure-Python, bring-your-own-I/O implementation of HTTP/1.1\"\n optional = false\n python-versions = \">=3.8\"\n+groups = [\"main\"]\n files = [\n     {file = \"h11-0.16.0-py3-none-any.whl\", hash = \"sha256:63cf8bbe7522de3bf65932fda1d9c2772064ffb3dae62d55932da54b31cb6c86\"},\n     {file = \"h11-0.16.0.tar.gz\", hash = \"sha256:4e35b956cf45792e4caa5885e69fba00bdbc6ffafbfa020300e549b208ee5ff1\"},\n@@ -1052,6 +1106,7 @@ version = \"1.0.9\"\n description = \"A minimal low-level HTTP client.\"\n optional = false\n python-versions = \">=3.8\"\n+groups = [\"main\"]\n files = [\n     {file = \"httpcore-1.0.9-py3-none-any.whl\", hash = \"sha256:2d400746a40668fc9dec9810239072b40b4484b640a8c38fd654a024c7a1bf55\"},\n     {file = \"httpcore-1.0.9.tar.gz\", hash = \"sha256:6e34463af53fd2ab5d807f399a9b45ea31c3dfa2276f15a2c3f00afff6e176e8\"},\n@@ -1073,6 +1128,7 @@ version = \"0.6.4\"\n description = \"A collection of framework independent HTTP protocol utils.\"\n optional = false\n python-versions = \">=3.8.0\"\n+groups = [\"main\"]\n files = [\n     {file = \"httptools-0.6.4-cp310-cp310-macosx_10_9_universal2.whl\", hash = \"sha256:3c73ce323711a6ffb0d247dcd5a550b8babf0f757e86a52558fe5b86d6fefcc0\"},\n     {file = \"httptools-0.6.4-cp310-cp310-macosx_11_0_arm64.whl\", hash = \"sha256:345c288418f0944a6fe67be8e6afa9262b18c7626c3ef3c28adc5eabc06a68da\"},\n@@ -1128,6 +1184,7 @@ version = \"0.27.2\"\n description = \"The next generation HTTP client.\"\n optional = false\n python-versions = \">=3.8\"\n+groups = [\"main\"]\n files = [\n     {file = \"httpx-0.27.2-py3-none-any.whl\", hash = \"sha256:7bb2708e112d8fdd7829cd4243970f0c223274051cb35ee80c03301ee29a3df0\"},\n     {file = \"httpx-0.27.2.tar.gz\", hash = \"sha256:f7c2be1d2f3c3c3160d441802406b206c2b76f5947b11115e6df10c6c65e66c2\"},\n@@ -1141,7 +1198,7 @@ idna = \"*\"\n sniffio = \"*\"\n \n [package.extras]\n-brotli = [\"brotli\", \"brotlicffi\"]\n+brotli = [\"brotli ; platform_python_implementation == \\\"CPython\\\"\", \"brotlicffi ; platform_python_implementation != \\\"CPython\\\"\"]\n cli = [\"click (==8.*)\", \"pygments (==2.*)\", \"rich (>=10,<14)\"]\n http2 = [\"h2 (>=3,<5)\"]\n socks = [\"socksio (==1.*)\"]\n@@ -1153,6 +1210,7 @@ version = \"3.10\"\n description = \"Internationalized Domain Names in Applications (IDNA)\"\n optional = false\n python-versions = \">=3.6\"\n+groups = [\"main\"]\n files = [\n     {file = \"idna-3.10-py3-none-any.whl\", hash = \"sha256:946d195a0d259cbba61165e88e65941f16e9b36ea6ddb97f00452bae8b1287d3\"},\n     {file = \"idna-3.10.tar.gz\", hash = \"sha256:12f65c9b470abda6dc35cf8e63cc574b1c52b11df2c86030af0ac09b01b13ea9\"},\n@@ -1167,6 +1225,7 @@ version = \"2.1.0\"\n description = \"brain-dead simple config-ini parsing\"\n optional = false\n python-versions = \">=3.8\"\n+groups = [\"dev\"]\n files = [\n     {file = \"iniconfig-2.1.0-py3-none-any.whl\", hash = \"sha256:9deba5723312380e77435581c6bf4935c94cbfab9b1ed33ef8d238ea168eb760\"},\n     {file = \"iniconfig-2.1.0.tar.gz\", hash = \"sha256:3abbd2e30b36733fee78f9c7f7308f2d0050e88f0087fd25c2645f63c773e1c7\"},\n@@ -1178,6 +1237,7 @@ version = \"5.13.2\"\n description = \"A Python utility / library to sort Python imports.\"\n optional = false\n python-versions = \">=3.8.0\"\n+groups = [\"dev\"]\n files = [\n     {file = \"isort-5.13.2-py3-none-any.whl\", hash = \"sha256:8ca5e72a8d85860d5a3fa69b8745237f2939afe12dbf656afbcb47fe72d947a6\"},\n     {file = \"isort-5.13.2.tar.gz\", hash = \"sha256:48fdfcb9face5d58a4f6dde2e72a1fb8dcaf8ab26f95ab49fab84c2ddefb0109\"},\n@@ -1192,6 +1252,7 @@ version = \"0.9.0\"\n description = \"Fast iterable JSON parser.\"\n optional = false\n python-versions = \">=3.8\"\n+groups = [\"main\"]\n files = [\n     {file = \"jiter-0.9.0-cp310-cp310-macosx_10_12_x86_64.whl\", hash = \"sha256:816ec9b60fdfd1fec87da1d7ed46c66c44ffec37ab2ef7de5b147b2fce3fd5ad\"},\n     {file = \"jiter-0.9.0-cp310-cp310-macosx_11_0_arm64.whl\", hash = \"sha256:9b1d3086f8a3ee0194ecf2008cf81286a5c3e540d977fa038ff23576c023c0ea\"},\n@@ -1277,6 +1338,7 @@ version = \"1.33\"\n description = \"Apply JSON-Patches (RFC 6902)\"\n optional = false\n python-versions = \">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*, !=3.5.*, !=3.6.*\"\n+groups = [\"main\"]\n files = [\n     {file = \"jsonpatch-1.33-py2.py3-none-any.whl\", hash = \"sha256:0ae28c0cd062bbd8b8ecc26d7d164fbbea9652a1a3693f3b956c1eae5145dade\"},\n     {file = \"jsonpatch-1.33.tar.gz\", hash = \"sha256:9fcd4009c41e6d12348b4a0ff2563ba56a2923a7dfee731d004e212e1ee5030c\"},\n@@ -1291,6 +1353,7 @@ version = \"3.0.0\"\n description = \"Identify specific nodes in a JSON document (RFC 6901)\"\n optional = false\n python-versions = \">=3.7\"\n+groups = [\"main\"]\n files = [\n     {file = \"jsonpointer-3.0.0-py2.py3-none-any.whl\", hash = \"sha256:13e088adc14fca8b6aa8177c044e12701e6ad4b28ff10e65f2267a90109c9942\"},\n     {file = \"jsonpointer-3.0.0.tar.gz\", hash = \"sha256:2b2d729f2091522d61c3b31f82e11870f60b68f43fbc705cb76bf4b832af59ef\"},\n@@ -1302,6 +1365,7 @@ version = \"1.4.8\"\n description = \"A fast implementation of the Cassowary constraint solver\"\n optional = false\n python-versions = \">=3.10\"\n+groups = [\"main\"]\n files = [\n     {file = \"kiwisolver-1.4.8-cp310-cp310-macosx_10_9_universal2.whl\", hash = \"sha256:88c6f252f6816a73b1f8c904f7bbe02fd67c09a69f7cb8a0eecdbf5ce78e63db\"},\n     {file = \"kiwisolver-1.4.8-cp310-cp310-macosx_10_9_x86_64.whl\", hash = \"sha256:c72941acb7b67138f35b879bbe85be0f6c6a70cab78fe3ef6db9c024d9223e5b\"},\n@@ -1391,6 +1455,7 @@ version = \"0.3.0\"\n description = \"Building applications with LLMs through composability\"\n optional = false\n python-versions = \"<4.0,>=3.9\"\n+groups = [\"main\"]\n files = [\n     {file = \"langchain-0.3.0-py3-none-any.whl\", hash = \"sha256:59a75a6a1eb7bfd2a6bf0c7a5816409a8fdc9046187b07af287b23b9899617af\"},\n     {file = \"langchain-0.3.0.tar.gz\", hash = \"sha256:a7c23892440bd1f5b9e029ff0dd709dd881ae927c4c0a3210ac64dba9bbf3f7f\"},\n@@ -1417,6 +1482,7 @@ version = \"0.3.5\"\n description = \"An integration package connecting AnthropicMessages and LangChain\"\n optional = false\n python-versions = \"<4.0,>=3.9\"\n+groups = [\"main\"]\n files = [\n     {file = \"langchain_anthropic-0.3.5-py3-none-any.whl\", hash = \"sha256:bad34b02d7b4bdca9a9471bc391b01269fd8dc4600b83ca2a3e76925b7c27fe6\"},\n     {file = \"langchain_anthropic-0.3.5.tar.gz\", hash = \"sha256:2aa1673511056061680492871f386d68a8b62947e0eb1f15303ef10db16c8357\"},\n@@ -1434,6 +1500,7 @@ version = \"0.3.56\"\n description = \"Building applications with LLMs through composability\"\n optional = false\n python-versions = \"<4.0,>=3.9\"\n+groups = [\"main\"]\n files = [\n     {file = \"langchain_core-0.3.56-py3-none-any.whl\", hash = \"sha256:a20c6aca0fa0da265d96d3b14a5a01828ac5d2d9d27516434873d76f2d4839ed\"},\n     {file = \"langchain_core-0.3.56.tar.gz\", hash = \"sha256:de896585bc56e12652327dcd195227c3739a07e86e587c91a07101e0df11dffe\"},\n@@ -1457,6 +1524,7 @@ version = \"0.1.3\"\n description = \"An integration package connecting DeepSeek and LangChain\"\n optional = false\n python-versions = \"<4.0,>=3.9\"\n+groups = [\"main\"]\n files = [\n     {file = \"langchain_deepseek-0.1.3-py3-none-any.whl\", hash = \"sha256:8588e826371b417fca65c02f4273b4061eb9815a7bfcd5eb05acaa40d603aa89\"},\n     {file = \"langchain_deepseek-0.1.3.tar.gz\", hash = \"sha256:89dd6aa120fb50dcfcd3d593626d34c1c40deefe4510710d0807fcc19481adf5\"},\n@@ -1472,6 +1540,7 @@ version = \"2.1.3\"\n description = \"An integration package connecting Google's genai package and LangChain\"\n optional = false\n python-versions = \"<4.0,>=3.9\"\n+groups = [\"main\"]\n files = [\n     {file = \"langchain_google_genai-2.1.3-py3-none-any.whl\", hash = \"sha256:adf222931ac7af543f4013751a9b7dbd9ed637fb4eb3e4e0cd7e1d5d7e066d36\"},\n     {file = \"langchain_google_genai-2.1.3.tar.gz\", hash = \"sha256:0d4e2abf01a7594a9420d3569cf2cd4239a01cc24c6698d3c2c92a072b9b7b4a\"},\n@@ -1489,6 +1558,7 @@ version = \"0.2.3\"\n description = \"An integration package connecting Groq and LangChain\"\n optional = false\n python-versions = \"<4.0,>=3.9\"\n+groups = [\"main\"]\n files = [\n     {file = \"langchain_groq-0.2.3-py3-none-any.whl\", hash = \"sha256:3572c812acc1478ab0670c48eb9a135c95f47631190da750e48408267462a12d\"},\n     {file = \"langchain_groq-0.2.3.tar.gz\", hash = \"sha256:f94810fe734c9402b36273ddc3509eaa67f12a7d06b666c6ca472ab0bfdf37b7\"},\n@@ -1504,6 +1574,7 @@ version = \"0.2.3\"\n description = \"An integration package connecting Ollama and LangChain\"\n optional = false\n python-versions = \"<4.0,>=3.9\"\n+groups = [\"main\"]\n files = [\n     {file = \"langchain_ollama-0.2.3-py3-none-any.whl\", hash = \"sha256:c47700ca68b013358b1e954493ecafb3bd10fa2cda71a9f15ba7897587a9aab2\"},\n     {file = \"langchain_ollama-0.2.3.tar.gz\", hash = \"sha256:d13fe8735176b652ca6e6656d7902c1265e8c0601097569f7c95433f3d034b38\"},\n@@ -1519,6 +1590,7 @@ version = \"0.3.14\"\n description = \"An integration package connecting OpenAI and LangChain\"\n optional = false\n python-versions = \"<4.0,>=3.9\"\n+groups = [\"main\"]\n files = [\n     {file = \"langchain_openai-0.3.14-py3-none-any.whl\", hash = \"sha256:b8e648d2d7678a5540818199d141ff727c6f1514294b3e1e999a95357c9d66a0\"},\n     {file = \"langchain_openai-0.3.14.tar.gz\", hash = \"sha256:0662db78620c2e5c3ccfc1c36dc959c0ddc80e6bdf7ef81632cbf4b2cc9b9461\"},\n@@ -1535,6 +1607,7 @@ version = \"0.3.8\"\n description = \"LangChain text splitting utilities\"\n optional = false\n python-versions = \"<4.0,>=3.9\"\n+groups = [\"main\"]\n files = [\n     {file = \"langchain_text_splitters-0.3.8-py3-none-any.whl\", hash = \"sha256:e75cc0f4ae58dcf07d9f18776400cf8ade27fadd4ff6d264df6278bb302f6f02\"},\n     {file = \"langchain_text_splitters-0.3.8.tar.gz\", hash = \"sha256:116d4b9f2a22dda357d0b79e30acf005c5518177971c66a9f1ab0edfdb0f912e\"},\n@@ -1549,6 +1622,7 @@ version = \"0.2.56\"\n description = \"Building stateful, multi-actor applications with LLMs\"\n optional = false\n python-versions = \"<4.0,>=3.9.0\"\n+groups = [\"main\"]\n files = [\n     {file = \"langgraph-0.2.56-py3-none-any.whl\", hash = \"sha256:ad8a4b772e34dc0137e890bb6ced596a39a1e684af66250c1e7c8150dbe90e9c\"},\n     {file = \"langgraph-0.2.56.tar.gz\", hash = \"sha256:af10b1ffd10d52fd4072a73f154b8c2513c0b22e5bd5d20f4567dfeecab98d1e\"},\n@@ -1565,6 +1639,7 @@ version = \"2.0.25\"\n description = \"Library with base interfaces for LangGraph checkpoint savers.\"\n optional = false\n python-versions = \"<4.0.0,>=3.9.0\"\n+groups = [\"main\"]\n files = [\n     {file = \"langgraph_checkpoint-2.0.25-py3-none-any.whl\", hash = \"sha256:23416a0f5bc9dd712ac10918fc13e8c9c4530c419d2985a441df71a38fc81602\"},\n     {file = \"langgraph_checkpoint-2.0.25.tar.gz\", hash = \"sha256:77a63cab7b5f84dec1d49db561326ec28bdd48bcefb7fe4ac372069d2609287b\"},\n@@ -1580,6 +1655,7 @@ version = \"0.1.63\"\n description = \"SDK for interacting with LangGraph API\"\n optional = false\n python-versions = \"<4.0.0,>=3.9.0\"\n+groups = [\"main\"]\n files = [\n     {file = \"langgraph_sdk-0.1.63-py3-none-any.whl\", hash = \"sha256:6fb78a7fc6a30eea43bd0d6401dbc9e3263d0d4c03f63c04035980da7e586b05\"},\n     {file = \"langgraph_sdk-0.1.63.tar.gz\", hash = \"sha256:62bf2cc31e5aa6c5b9011ee1702bcf1e36e67e142a60bd97af2611162fb58e18\"},\n@@ -1595,6 +1671,7 @@ version = \"0.1.147\"\n description = \"Client library to connect to the LangSmith LLM Tracing and Evaluation Platform.\"\n optional = false\n python-versions = \"<4.0,>=3.8.1\"\n+groups = [\"main\"]\n files = [\n     {file = \"langsmith-0.1.147-py3-none-any.whl\", hash = \"sha256:7166fc23b965ccf839d64945a78e9f1157757add228b086141eb03a60d699a15\"},\n     {file = \"langsmith-0.1.147.tar.gz\", hash = \"sha256:2e933220318a4e73034657103b3b1a3a6109cc5db3566a7e8e03be8d6d7def7a\"},\n@@ -1619,6 +1696,7 @@ version = \"1.3.10\"\n description = \"A super-fast templating language that borrows the best ideas from the existing templating languages.\"\n optional = false\n python-versions = \">=3.8\"\n+groups = [\"main\"]\n files = [\n     {file = \"mako-1.3.10-py3-none-any.whl\", hash = \"sha256:baef24a52fc4fc514a0887ac600f9f1cff3d82c61d4d700a1fa84d597b88db59\"},\n     {file = \"mako-1.3.10.tar.gz\", hash = \"sha256:99579a6f39583fa7e5630a28c3c1f440e4e97a414b80372649c0ce338da2ea28\"},\n@@ -1638,6 +1716,7 @@ version = \"3.0.0\"\n description = \"Python port of markdown-it. Markdown parsing, done right!\"\n optional = false\n python-versions = \">=3.8\"\n+groups = [\"main\"]\n files = [\n     {file = \"markdown-it-py-3.0.0.tar.gz\", hash = \"sha256:e3f60a94fa066dc52ec76661e37c851cb232d92f9886b15cb560aaada2df8feb\"},\n     {file = \"markdown_it_py-3.0.0-py3-none-any.whl\", hash = \"sha256:355216845c60bd96232cd8d8c40e8f9765cc86f46880e43a8fd22dc1a1a8cab1\"},\n@@ -1662,6 +1741,7 @@ version = \"3.0.2\"\n description = \"Safely add untrusted strings to HTML/XML markup.\"\n optional = false\n python-versions = \">=3.9\"\n+groups = [\"main\"]\n files = [\n     {file = \"MarkupSafe-3.0.2-cp310-cp310-macosx_10_9_universal2.whl\", hash = \"sha256:7e94c425039cde14257288fd61dcfb01963e658efbc0ff54f5306b06054700f8\"},\n     {file = \"MarkupSafe-3.0.2-cp310-cp310-macosx_11_0_arm64.whl\", hash = \"sha256:9e2d922824181480953426608b81967de705c3cef4d1af983af849d7bd619158\"},\n@@ -1732,6 +1812,7 @@ version = \"3.10.1\"\n description = \"Python plotting package\"\n optional = false\n python-versions = \">=3.10\"\n+groups = [\"main\"]\n files = [\n     {file = \"matplotlib-3.10.1-cp310-cp310-macosx_10_12_x86_64.whl\", hash = \"sha256:ff2ae14910be903f4a24afdbb6d7d3a6c44da210fc7d42790b87aeac92238a16\"},\n     {file = \"matplotlib-3.10.1-cp310-cp310-macosx_11_0_arm64.whl\", hash = \"sha256:0721a3fd3d5756ed593220a8b86808a36c5031fce489adb5b31ee6dbb47dd5b2\"},\n@@ -1789,6 +1870,7 @@ version = \"0.7.0\"\n description = \"McCabe checker, plugin for flake8\"\n optional = false\n python-versions = \">=3.6\"\n+groups = [\"dev\"]\n files = [\n     {file = \"mccabe-0.7.0-py2.py3-none-any.whl\", hash = \"sha256:6c2d30ab6be0e4a46919781807b4f0d834ebdd6c6e3dca0bda5a15f863427b6e\"},\n     {file = \"mccabe-0.7.0.tar.gz\", hash = \"sha256:348e0240c33b60bbdf4e523192ef919f28cb2c3d7d5c7794f74009290f236325\"},\n@@ -1800,17 +1882,88 @@ version = \"0.1.2\"\n description = \"Markdown URL utilities\"\n optional = false\n python-versions = \">=3.7\"\n+groups = [\"main\"]\n files = [\n     {file = \"mdurl-0.1.2-py3-none-any.whl\", hash = \"sha256:84008a41e51615a49fc9966191ff91509e3c40b939176e643fd50a5c2196b8f8\"},\n     {file = \"mdurl-0.1.2.tar.gz\", hash = \"sha256:bb413d29f5eea38f31dd4754dd7377d4465116fb207585f97bf925588687c1ba\"},\n ]\n \n+[[package]]\n+name = \"msgpack\"\n+version = \"1.1.1\"\n+description = \"MessagePack serializer\"\n+optional = false\n+python-versions = \">=3.8\"\n+groups = [\"main\"]\n+files = [\n+    {file = \"msgpack-1.1.1-cp310-cp310-macosx_10_9_x86_64.whl\", hash = \"sha256:353b6fc0c36fde68b661a12949d7d49f8f51ff5fa019c1e47c87c4ff34b080ed\"},\n+    {file = \"msgpack-1.1.1-cp310-cp310-macosx_11_0_arm64.whl\", hash = \"sha256:79c408fcf76a958491b4e3b103d1c417044544b68e96d06432a189b43d1215c8\"},\n+    {file = \"msgpack-1.1.1-cp310-cp310-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:78426096939c2c7482bf31ef15ca219a9e24460289c00dd0b94411040bb73ad2\"},\n+    {file = \"msgpack-1.1.1-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:8b17ba27727a36cb73aabacaa44b13090feb88a01d012c0f4be70c00f75048b4\"},\n+    {file = \"msgpack-1.1.1-cp310-cp310-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:7a17ac1ea6ec3c7687d70201cfda3b1e8061466f28f686c24f627cae4ea8efd0\"},\n+    {file = \"msgpack-1.1.1-cp310-cp310-musllinux_1_2_aarch64.whl\", hash = \"sha256:88d1e966c9235c1d4e2afac21ca83933ba59537e2e2727a999bf3f515ca2af26\"},\n+    {file = \"msgpack-1.1.1-cp310-cp310-musllinux_1_2_i686.whl\", hash = \"sha256:f6d58656842e1b2ddbe07f43f56b10a60f2ba5826164910968f5933e5178af75\"},\n+    {file = \"msgpack-1.1.1-cp310-cp310-musllinux_1_2_x86_64.whl\", hash = \"sha256:96decdfc4adcbc087f5ea7ebdcfd3dee9a13358cae6e81d54be962efc38f6338\"},\n+    {file = \"msgpack-1.1.1-cp310-cp310-win32.whl\", hash = \"sha256:6640fd979ca9a212e4bcdf6eb74051ade2c690b862b679bfcb60ae46e6dc4bfd\"},\n+    {file = \"msgpack-1.1.1-cp310-cp310-win_amd64.whl\", hash = \"sha256:8b65b53204fe1bd037c40c4148d00ef918eb2108d24c9aaa20bc31f9810ce0a8\"},\n+    {file = \"msgpack-1.1.1-cp311-cp311-macosx_10_9_x86_64.whl\", hash = \"sha256:71ef05c1726884e44f8b1d1773604ab5d4d17729d8491403a705e649116c9558\"},\n+    {file = \"msgpack-1.1.1-cp311-cp311-macosx_11_0_arm64.whl\", hash = \"sha256:36043272c6aede309d29d56851f8841ba907a1a3d04435e43e8a19928e243c1d\"},\n+    {file = \"msgpack-1.1.1-cp311-cp311-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:a32747b1b39c3ac27d0670122b57e6e57f28eefb725e0b625618d1b59bf9d1e0\"},\n+    {file = \"msgpack-1.1.1-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:8a8b10fdb84a43e50d38057b06901ec9da52baac6983d3f709d8507f3889d43f\"},\n+    {file = \"msgpack-1.1.1-cp311-cp311-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:ba0c325c3f485dc54ec298d8b024e134acf07c10d494ffa24373bea729acf704\"},\n+    {file = \"msgpack-1.1.1-cp311-cp311-musllinux_1_2_aarch64.whl\", hash = \"sha256:88daaf7d146e48ec71212ce21109b66e06a98e5e44dca47d853cbfe171d6c8d2\"},\n+    {file = \"msgpack-1.1.1-cp311-cp311-musllinux_1_2_i686.whl\", hash = \"sha256:d8b55ea20dc59b181d3f47103f113e6f28a5e1c89fd5b67b9140edb442ab67f2\"},\n+    {file = \"msgpack-1.1.1-cp311-cp311-musllinux_1_2_x86_64.whl\", hash = \"sha256:4a28e8072ae9779f20427af07f53bbb8b4aa81151054e882aee333b158da8752\"},\n+    {file = \"msgpack-1.1.1-cp311-cp311-win32.whl\", hash = \"sha256:7da8831f9a0fdb526621ba09a281fadc58ea12701bc709e7b8cbc362feabc295\"},\n+    {file = \"msgpack-1.1.1-cp311-cp311-win_amd64.whl\", hash = \"sha256:5fd1b58e1431008a57247d6e7cc4faa41c3607e8e7d4aaf81f7c29ea013cb458\"},\n+    {file = \"msgpack-1.1.1-cp312-cp312-macosx_10_13_x86_64.whl\", hash = \"sha256:ae497b11f4c21558d95de9f64fff7053544f4d1a17731c866143ed6bb4591238\"},\n+    {file = \"msgpack-1.1.1-cp312-cp312-macosx_11_0_arm64.whl\", hash = \"sha256:33be9ab121df9b6b461ff91baac6f2731f83d9b27ed948c5b9d1978ae28bf157\"},\n+    {file = \"msgpack-1.1.1-cp312-cp312-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:6f64ae8fe7ffba251fecb8408540c34ee9df1c26674c50c4544d72dbf792e5ce\"},\n+    {file = \"msgpack-1.1.1-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:a494554874691720ba5891c9b0b39474ba43ffb1aaf32a5dac874effb1619e1a\"},\n+    {file = \"msgpack-1.1.1-cp312-cp312-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:cb643284ab0ed26f6957d969fe0dd8bb17beb567beb8998140b5e38a90974f6c\"},\n+    {file = \"msgpack-1.1.1-cp312-cp312-musllinux_1_2_aarch64.whl\", hash = \"sha256:d275a9e3c81b1093c060c3837e580c37f47c51eca031f7b5fb76f7b8470f5f9b\"},\n+    {file = \"msgpack-1.1.1-cp312-cp312-musllinux_1_2_i686.whl\", hash = \"sha256:4fd6b577e4541676e0cc9ddc1709d25014d3ad9a66caa19962c4f5de30fc09ef\"},\n+    {file = \"msgpack-1.1.1-cp312-cp312-musllinux_1_2_x86_64.whl\", hash = \"sha256:bb29aaa613c0a1c40d1af111abf025f1732cab333f96f285d6a93b934738a68a\"},\n+    {file = \"msgpack-1.1.1-cp312-cp312-win32.whl\", hash = \"sha256:870b9a626280c86cff9c576ec0d9cbcc54a1e5ebda9cd26dab12baf41fee218c\"},\n+    {file = \"msgpack-1.1.1-cp312-cp312-win_amd64.whl\", hash = \"sha256:5692095123007180dca3e788bb4c399cc26626da51629a31d40207cb262e67f4\"},\n+    {file = \"msgpack-1.1.1-cp313-cp313-macosx_10_13_x86_64.whl\", hash = \"sha256:3765afa6bd4832fc11c3749be4ba4b69a0e8d7b728f78e68120a157a4c5d41f0\"},\n+    {file = \"msgpack-1.1.1-cp313-cp313-macosx_11_0_arm64.whl\", hash = \"sha256:8ddb2bcfd1a8b9e431c8d6f4f7db0773084e107730ecf3472f1dfe9ad583f3d9\"},\n+    {file = \"msgpack-1.1.1-cp313-cp313-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:196a736f0526a03653d829d7d4c5500a97eea3648aebfd4b6743875f28aa2af8\"},\n+    {file = \"msgpack-1.1.1-cp313-cp313-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:9d592d06e3cc2f537ceeeb23d38799c6ad83255289bb84c2e5792e5a8dea268a\"},\n+    {file = \"msgpack-1.1.1-cp313-cp313-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:4df2311b0ce24f06ba253fda361f938dfecd7b961576f9be3f3fbd60e87130ac\"},\n+    {file = \"msgpack-1.1.1-cp313-cp313-musllinux_1_2_aarch64.whl\", hash = \"sha256:e4141c5a32b5e37905b5940aacbc59739f036930367d7acce7a64e4dec1f5e0b\"},\n+    {file = \"msgpack-1.1.1-cp313-cp313-musllinux_1_2_i686.whl\", hash = \"sha256:b1ce7f41670c5a69e1389420436f41385b1aa2504c3b0c30620764b15dded2e7\"},\n+    {file = \"msgpack-1.1.1-cp313-cp313-musllinux_1_2_x86_64.whl\", hash = \"sha256:4147151acabb9caed4e474c3344181e91ff7a388b888f1e19ea04f7e73dc7ad5\"},\n+    {file = \"msgpack-1.1.1-cp313-cp313-win32.whl\", hash = \"sha256:500e85823a27d6d9bba1d057c871b4210c1dd6fb01fbb764e37e4e8847376323\"},\n+    {file = \"msgpack-1.1.1-cp313-cp313-win_amd64.whl\", hash = \"sha256:6d489fba546295983abd142812bda76b57e33d0b9f5d5b71c09a583285506f69\"},\n+    {file = \"msgpack-1.1.1-cp38-cp38-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:bba1be28247e68994355e028dcd668316db30c1f758d3241a7b903ac78dcd285\"},\n+    {file = \"msgpack-1.1.1-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:b8f93dcddb243159c9e4109c9750ba5b335ab8d48d9522c5308cd05d7e3ce600\"},\n+    {file = \"msgpack-1.1.1-cp38-cp38-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:2fbbc0b906a24038c9958a1ba7ae0918ad35b06cb449d398b76a7d08470b0ed9\"},\n+    {file = \"msgpack-1.1.1-cp38-cp38-musllinux_1_2_aarch64.whl\", hash = \"sha256:61e35a55a546a1690d9d09effaa436c25ae6130573b6ee9829c37ef0f18d5e78\"},\n+    {file = \"msgpack-1.1.1-cp38-cp38-musllinux_1_2_i686.whl\", hash = \"sha256:1abfc6e949b352dadf4bce0eb78023212ec5ac42f6abfd469ce91d783c149c2a\"},\n+    {file = \"msgpack-1.1.1-cp38-cp38-musllinux_1_2_x86_64.whl\", hash = \"sha256:996f2609ddf0142daba4cefd767d6db26958aac8439ee41db9cc0db9f4c4c3a6\"},\n+    {file = \"msgpack-1.1.1-cp38-cp38-win32.whl\", hash = \"sha256:4d3237b224b930d58e9d83c81c0dba7aacc20fcc2f89c1e5423aa0529a4cd142\"},\n+    {file = \"msgpack-1.1.1-cp38-cp38-win_amd64.whl\", hash = \"sha256:da8f41e602574ece93dbbda1fab24650d6bf2a24089f9e9dbb4f5730ec1e58ad\"},\n+    {file = \"msgpack-1.1.1-cp39-cp39-macosx_10_9_x86_64.whl\", hash = \"sha256:f5be6b6bc52fad84d010cb45433720327ce886009d862f46b26d4d154001994b\"},\n+    {file = \"msgpack-1.1.1-cp39-cp39-macosx_11_0_arm64.whl\", hash = \"sha256:3a89cd8c087ea67e64844287ea52888239cbd2940884eafd2dcd25754fb72232\"},\n+    {file = \"msgpack-1.1.1-cp39-cp39-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:1d75f3807a9900a7d575d8d6674a3a47e9f227e8716256f35bc6f03fc597ffbf\"},\n+    {file = \"msgpack-1.1.1-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:d182dac0221eb8faef2e6f44701812b467c02674a322c739355c39e94730cdbf\"},\n+    {file = \"msgpack-1.1.1-cp39-cp39-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:1b13fe0fb4aac1aa5320cd693b297fe6fdef0e7bea5518cbc2dd5299f873ae90\"},\n+    {file = \"msgpack-1.1.1-cp39-cp39-musllinux_1_2_aarch64.whl\", hash = \"sha256:435807eeb1bc791ceb3247d13c79868deb22184e1fc4224808750f0d7d1affc1\"},\n+    {file = \"msgpack-1.1.1-cp39-cp39-musllinux_1_2_i686.whl\", hash = \"sha256:4835d17af722609a45e16037bb1d4d78b7bdf19d6c0128116d178956618c4e88\"},\n+    {file = \"msgpack-1.1.1-cp39-cp39-musllinux_1_2_x86_64.whl\", hash = \"sha256:a8ef6e342c137888ebbfb233e02b8fbd689bb5b5fcc59b34711ac47ebd504478\"},\n+    {file = \"msgpack-1.1.1-cp39-cp39-win32.whl\", hash = \"sha256:61abccf9de335d9efd149e2fff97ed5974f2481b3353772e8e2dd3402ba2bd57\"},\n+    {file = \"msgpack-1.1.1-cp39-cp39-win_amd64.whl\", hash = \"sha256:40eae974c873b2992fd36424a5d9407f93e97656d999f43fca9d29f820899084\"},\n+    {file = \"msgpack-1.1.1.tar.gz\", hash = \"sha256:77b79ce34a2bdab2594f490c8e80dd62a02d650b91a75159a63ec413b8d104cd\"},\n+]\n+\n [[package]]\n name = \"multidict\"\n version = \"6.4.3\"\n description = \"multidict implementation\"\n optional = false\n python-versions = \">=3.9\"\n+groups = [\"main\"]\n files = [\n     {file = \"multidict-6.4.3-cp310-cp310-macosx_10_9_universal2.whl\", hash = \"sha256:32a998bd8a64ca48616eac5a8c1cc4fa38fb244a3facf2eeb14abe186e0f6cc5\"},\n     {file = \"multidict-6.4.3-cp310-cp310-macosx_10_9_x86_64.whl\", hash = \"sha256:a54ec568f1fc7f3c313c2f3b16e5db346bf3660e1309746e7fccbbfded856188\"},\n@@ -1924,6 +2077,7 @@ version = \"1.1.0\"\n description = \"Type system extensions for programs checked with the mypy type checker.\"\n optional = false\n python-versions = \">=3.8\"\n+groups = [\"dev\"]\n files = [\n     {file = \"mypy_extensions-1.1.0-py3-none-any.whl\", hash = \"sha256:1be4cccdb0f2482337c4743e60421de3a356cd97508abadd57d47403e94f5505\"},\n     {file = \"mypy_extensions-1.1.0.tar.gz\", hash = \"sha256:52e68efc3284861e772bbcd66823fde5ae21fd2fdb51c62a211403730b916558\"},\n@@ -1935,6 +2089,7 @@ version = \"1.26.4\"\n description = \"Fundamental package for array computing in Python\"\n optional = false\n python-versions = \">=3.9\"\n+groups = [\"main\"]\n files = [\n     {file = \"numpy-1.26.4-cp310-cp310-macosx_10_9_x86_64.whl\", hash = \"sha256:9ff0f4f29c51e2803569d7a51c2304de5554655a60c5d776e35b4a41413830d0\"},\n     {file = \"numpy-1.26.4-cp310-cp310-macosx_11_0_arm64.whl\", hash = \"sha256:2e4ee3380d6de9c9ec04745830fd9e2eccb3e6cf790d39d7b98ffd19b0dd754a\"},\n@@ -1980,6 +2135,7 @@ version = \"0.4.8\"\n description = \"The official Python client for Ollama.\"\n optional = false\n python-versions = \"<4.0,>=3.8\"\n+groups = [\"main\"]\n files = [\n     {file = \"ollama-0.4.8-py3-none-any.whl\", hash = \"sha256:04312af2c5e72449aaebac4a2776f52ef010877c554103419d3f36066fe8af4c\"},\n     {file = \"ollama-0.4.8.tar.gz\", hash = \"sha256:1121439d49b96fa8339842965d0616eba5deb9f8c790786cdf4c0b3df4833802\"},\n@@ -1995,6 +2151,7 @@ version = \"1.76.2\"\n description = \"The official Python library for the openai API\"\n optional = false\n python-versions = \">=3.8\"\n+groups = [\"main\"]\n files = [\n     {file = \"openai-1.76.2-py3-none-any.whl\", hash = \"sha256:9c1d9ad59e6e3bea7205eedc9ca66eeebae18d47b527e505a2b0d2fb1538e26e\"},\n     {file = \"openai-1.76.2.tar.gz\", hash = \"sha256:f430c8b848775907405c6eff54621254c96f6444c593c097e0cc3a9f8fdda96f\"},\n@@ -2021,6 +2178,7 @@ version = \"3.10.17\"\n description = \"Fast, correct Python JSON library supporting dataclasses, datetimes, and numpy\"\n optional = false\n python-versions = \">=3.9\"\n+groups = [\"main\"]\n files = [\n     {file = \"orjson-3.10.17-cp310-cp310-macosx_10_15_x86_64.macosx_11_0_arm64.macosx_10_15_universal2.whl\", hash = \"sha256:bc399cf138a0201d0bf2399b44195d33a0a5aee149dab114340da0d766c88b95\"},\n     {file = \"orjson-3.10.17-cp310-cp310-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:59225b27b72e0e1626d869f7b987da6c74f9b6026cf9a87c1cdaf74ca9f7b8c0\"},\n@@ -2102,6 +2260,7 @@ version = \"1.9.1\"\n description = \"Fast, correct Python msgpack library supporting dataclasses, datetimes, and numpy\"\n optional = false\n python-versions = \">=3.9\"\n+groups = [\"main\"]\n files = [\n     {file = \"ormsgpack-1.9.1-cp310-cp310-macosx_10_12_x86_64.macosx_11_0_arm64.macosx_10_12_universal2.whl\", hash = \"sha256:f1f804fd9c0fd84213a6022c34172f82323b34afa7052a4af18797582cf56365\"},\n     {file = \"ormsgpack-1.9.1-cp310-cp310-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:eab5cec99c46276b37071d570aab98603f3d0309b3818da3247eb64bb95e5cfc\"},\n@@ -2152,6 +2311,7 @@ version = \"24.2\"\n description = \"Core utilities for Python packages\"\n optional = false\n python-versions = \">=3.8\"\n+groups = [\"main\", \"dev\"]\n files = [\n     {file = \"packaging-24.2-py3-none-any.whl\", hash = \"sha256:09abb1bccd265c01f4a3aa3f7a7db064b36514d2cba19a2f694fe6150451a759\"},\n     {file = \"packaging-24.2.tar.gz\", hash = \"sha256:c228a6dc5e932d346bc5739379109d49e8853dd8223571c7c5b55260edc0b97f\"},\n@@ -2163,6 +2323,7 @@ version = \"2.2.3\"\n description = \"Powerful data structures for data analysis, time series, and statistics\"\n optional = false\n python-versions = \">=3.9\"\n+groups = [\"main\"]\n files = [\n     {file = \"pandas-2.2.3-cp310-cp310-macosx_10_9_x86_64.whl\", hash = \"sha256:1948ddde24197a0f7add2bdc4ca83bf2b1ef84a1bc8ccffd95eda17fd836ecb5\"},\n     {file = \"pandas-2.2.3-cp310-cp310-macosx_11_0_arm64.whl\", hash = \"sha256:381175499d3802cde0eabbaf6324cce0c4f5d52ca6f8c377c29ad442f50f6348\"},\n@@ -2248,6 +2409,7 @@ version = \"0.12.1\"\n description = \"Utility library for gitignore style pattern matching of file paths.\"\n optional = false\n python-versions = \">=3.8\"\n+groups = [\"dev\"]\n files = [\n     {file = \"pathspec-0.12.1-py3-none-any.whl\", hash = \"sha256:a0d503e138a4c123b27490a4f7beda6a01c6f288df0e4a8b79c7eb0dc7b4cc08\"},\n     {file = \"pathspec-0.12.1.tar.gz\", hash = \"sha256:a482d51503a1ab33b1c67a6c3813a26953dbdc71c31dacaef9a838c4e29f5712\"},\n@@ -2259,6 +2421,7 @@ version = \"11.2.1\"\n description = \"Python Imaging Library (Fork)\"\n optional = false\n python-versions = \">=3.9\"\n+groups = [\"main\"]\n files = [\n     {file = \"pillow-11.2.1-cp310-cp310-macosx_10_10_x86_64.whl\", hash = \"sha256:d57a75d53922fc20c165016a20d9c44f73305e67c351bbc60d1adaf662e74047\"},\n     {file = \"pillow-11.2.1-cp310-cp310-macosx_11_0_arm64.whl\", hash = \"sha256:127bf6ac4a5b58b3d32fc8289656f77f80567d65660bc46f72c0d77e6600cc95\"},\n@@ -2349,7 +2512,7 @@ fpx = [\"olefile\"]\n mic = [\"olefile\"]\n test-arrow = [\"pyarrow\"]\n tests = [\"check-manifest\", \"coverage (>=7.4.2)\", \"defusedxml\", \"markdown2\", \"olefile\", \"packaging\", \"pyroma\", \"pytest\", \"pytest-cov\", \"pytest-timeout\", \"trove-classifiers (>=2024.10.12)\"]\n-typing = [\"typing-extensions\"]\n+typing = [\"typing-extensions ; python_version < \\\"3.10\\\"\"]\n xmp = [\"defusedxml\"]\n \n [[package]]\n@@ -2358,6 +2521,7 @@ version = \"4.3.7\"\n description = \"A small Python package for determining appropriate platform-specific dirs, e.g. a `user data dir`.\"\n optional = false\n python-versions = \">=3.9\"\n+groups = [\"dev\"]\n files = [\n     {file = \"platformdirs-4.3.7-py3-none-any.whl\", hash = \"sha256:a03875334331946f13c549dbd8f4bac7a13a50a895a0eb1e8c6a8ace80d40a94\"},\n     {file = \"platformdirs-4.3.7.tar.gz\", hash = \"sha256:eb437d586b6a0986388f0d6f74aa0cde27b48d0e3d66843640bfb6bdcdb6e351\"},\n@@ -2374,6 +2538,7 @@ version = \"1.5.0\"\n description = \"plugin and hook calling mechanisms for python\"\n optional = false\n python-versions = \">=3.8\"\n+groups = [\"dev\"]\n files = [\n     {file = \"pluggy-1.5.0-py3-none-any.whl\", hash = \"sha256:44e1ad92c8ca002de6377e165f3e0f1be63266ab4d554740532335b9d75ea669\"},\n     {file = \"pluggy-1.5.0.tar.gz\", hash = \"sha256:2cffa88e94fdc978c4c574f15f9e59b7f4201d439195c3715ca9e2486f1d0cf1\"},\n@@ -2389,6 +2554,7 @@ version = \"3.0.51\"\n description = \"Library for building powerful interactive command lines in Python\"\n optional = false\n python-versions = \">=3.8\"\n+groups = [\"main\"]\n files = [\n     {file = \"prompt_toolkit-3.0.51-py3-none-any.whl\", hash = \"sha256:52742911fde84e2d423e2f9a4cf1de7d7ac4e51958f648d9540e0fb8db077b07\"},\n     {file = \"prompt_toolkit-3.0.51.tar.gz\", hash = \"sha256:931a162e3b27fc90c86f1b48bb1fb2c528c2761475e57c9c06de13311c7b54ed\"},\n@@ -2403,6 +2569,7 @@ version = \"0.3.1\"\n description = \"Accelerated property cache\"\n optional = false\n python-versions = \">=3.9\"\n+groups = [\"main\"]\n files = [\n     {file = \"propcache-0.3.1-cp310-cp310-macosx_10_9_universal2.whl\", hash = \"sha256:f27785888d2fdd918bc36de8b8739f2d6c791399552333721b58193f68ea3e98\"},\n     {file = \"propcache-0.3.1-cp310-cp310-macosx_10_9_x86_64.whl\", hash = \"sha256:d4e89cde74154c7b5957f87a355bb9c8ec929c167b59c83d90654ea36aeb6180\"},\n@@ -2510,6 +2677,7 @@ version = \"1.26.1\"\n description = \"Beautiful, Pythonic protocol buffers\"\n optional = false\n python-versions = \">=3.7\"\n+groups = [\"main\"]\n files = [\n     {file = \"proto_plus-1.26.1-py3-none-any.whl\", hash = \"sha256:13285478c2dcf2abb829db158e1047e2f1e8d63a077d94263c2b88b043c75a66\"},\n     {file = \"proto_plus-1.26.1.tar.gz\", hash = \"sha256:21a515a4c4c0088a773899e23c7bbade3d18f9c66c73edd4c7ee3816bc96a012\"},\n@@ -2527,6 +2695,7 @@ version = \"6.30.2\"\n description = \"\"\n optional = false\n python-versions = \">=3.9\"\n+groups = [\"main\"]\n files = [\n     {file = \"protobuf-6.30.2-cp310-abi3-win32.whl\", hash = \"sha256:b12ef7df7b9329886e66404bef5e9ce6a26b54069d7f7436a0853ccdeb91c103\"},\n     {file = \"protobuf-6.30.2-cp310-abi3-win_amd64.whl\", hash = \"sha256:7653c99774f73fe6b9301b87da52af0e69783a2e371e8b599b3e9cb4da4b12b9\"},\n@@ -2545,6 +2714,7 @@ version = \"0.6.1\"\n description = \"Pure-Python implementation of ASN.1 types and DER/BER/CER codecs (X.208)\"\n optional = false\n python-versions = \">=3.8\"\n+groups = [\"main\"]\n files = [\n     {file = \"pyasn1-0.6.1-py3-none-any.whl\", hash = \"sha256:0d632f46f2ba09143da3a8afe9e33fb6f92fa2320ab7e886e2d0f7672af84629\"},\n     {file = \"pyasn1-0.6.1.tar.gz\", hash = \"sha256:6f580d2bdd84365380830acf45550f2511469f673cb4a5ae3857a3170128b034\"},\n@@ -2556,6 +2726,7 @@ version = \"0.4.2\"\n description = \"A collection of ASN.1-based protocols modules\"\n optional = false\n python-versions = \">=3.8\"\n+groups = [\"main\"]\n files = [\n     {file = \"pyasn1_modules-0.4.2-py3-none-any.whl\", hash = \"sha256:29253a9207ce32b64c3ac6600edc75368f98473906e8fd1043bd6b5b1de2c14a\"},\n     {file = \"pyasn1_modules-0.4.2.tar.gz\", hash = \"sha256:677091de870a80aae844b1ca6134f54652fa2c8c5a52aa396440ac3106e941e6\"},\n@@ -2570,6 +2741,7 @@ version = \"2.11.1\"\n description = \"Python style guide checker\"\n optional = false\n python-versions = \">=3.8\"\n+groups = [\"dev\"]\n files = [\n     {file = \"pycodestyle-2.11.1-py2.py3-none-any.whl\", hash = \"sha256:44fe31000b2d866f2e41841b18528a505fbd7fef9017b04eff4e2648a0fadc67\"},\n     {file = \"pycodestyle-2.11.1.tar.gz\", hash = \"sha256:41ba0e7afc9752dfb53ced5489e89f8186be00e599e712660695b7a75ff2663f\"},\n@@ -2581,6 +2753,7 @@ version = \"2.11.4\"\n description = \"Data validation using Python type hints\"\n optional = false\n python-versions = \">=3.9\"\n+groups = [\"main\"]\n files = [\n     {file = \"pydantic-2.11.4-py3-none-any.whl\", hash = \"sha256:d9615eaa9ac5a063471da949c8fc16376a84afb5024688b3ff885693506764eb\"},\n     {file = \"pydantic-2.11.4.tar.gz\", hash = \"sha256:32738d19d63a226a52eed76645a98ee07c1f410ee41d93b4afbfa85ed8111c2d\"},\n@@ -2594,14 +2767,15 @@ typing-inspection = \">=0.4.0\"\n \n [package.extras]\n email = [\"email-validator (>=2.0.0)\"]\n-timezone = [\"tzdata\"]\n+timezone = [\"tzdata ; python_version >= \\\"3.9\\\" and platform_system == \\\"Windows\\\"\"]\n \n [[package]]\n name = \"pydantic-core\"\n version = \"2.33.2\"\n description = \"Core functionality for Pydantic validation and serialization\"\n optional = false\n python-versions = \">=3.9\"\n+groups = [\"main\"]\n files = [\n     {file = \"pydantic_core-2.33.2-cp310-cp310-macosx_10_12_x86_64.whl\", hash = \"sha256:2b3d326aaef0c0399d9afffeb6367d5e26ddc24d351dbc9c636840ac355dc5d8\"},\n     {file = \"pydantic_core-2.33.2-cp310-cp310-macosx_11_0_arm64.whl\", hash = \"sha256:0e5b2671f05ba48b94cb90ce55d8bdcaaedb8ba00cc5359f6810fc918713983d\"},\n@@ -2713,6 +2887,7 @@ version = \"3.1.0\"\n description = \"passive checker of Python programs\"\n optional = false\n python-versions = \">=3.8\"\n+groups = [\"dev\"]\n files = [\n     {file = \"pyflakes-3.1.0-py2.py3-none-any.whl\", hash = \"sha256:4132f6d49cb4dae6819e5379898f2b8cce3c5f23994194c24b77d5da2e36f774\"},\n     {file = \"pyflakes-3.1.0.tar.gz\", hash = \"sha256:a0aae034c444db0071aa077972ba4768d40c830d9539fd45bf4cd3f8f6992efc\"},\n@@ -2724,6 +2899,7 @@ version = \"2.19.1\"\n description = \"Pygments is a syntax highlighting package written in Python.\"\n optional = false\n python-versions = \">=3.8\"\n+groups = [\"main\"]\n files = [\n     {file = \"pygments-2.19.1-py3-none-any.whl\", hash = \"sha256:9ea1544ad55cecf4b8242fab6dd35a93bbce657034b0611ee383099054ab6d8c\"},\n     {file = \"pygments-2.19.1.tar.gz\", hash = \"sha256:61c16d2a8576dc0649d9f39e089b5f02bcd27fba10d8fb4dcc28173f7a45151f\"},\n@@ -2738,6 +2914,7 @@ version = \"3.2.3\"\n description = \"pyparsing module - Classes and methods to define and execute parsing grammars\"\n optional = false\n python-versions = \">=3.9\"\n+groups = [\"main\"]\n files = [\n     {file = \"pyparsing-3.2.3-py3-none-any.whl\", hash = \"sha256:a749938e02d6fd0b59b356ca504a24982314bb090c383e3cf201c95ef7e2bfcf\"},\n     {file = \"pyparsing-3.2.3.tar.gz\", hash = \"sha256:b9c13f1ab8b3b542f72e28f634bad4de758ab3ce4546e4301970ad6fa77c38be\"},\n@@ -2752,6 +2929,7 @@ version = \"7.4.4\"\n description = \"pytest: simple powerful testing with Python\"\n optional = false\n python-versions = \">=3.7\"\n+groups = [\"dev\"]\n files = [\n     {file = \"pytest-7.4.4-py3-none-any.whl\", hash = \"sha256:b090cdf5ed60bf4c45261be03239c2c1c22df034fbffe691abe93cd80cea01d8\"},\n     {file = \"pytest-7.4.4.tar.gz\", hash = \"sha256:2cf0005922c6ace4a3e2ec8b4080eb0d9753fdc93107415332f50ce9e7994280\"},\n@@ -2772,6 +2950,7 @@ version = \"2.9.0.post0\"\n description = \"Extensions to the standard Python datetime module\"\n optional = false\n python-versions = \"!=3.0.*,!=3.1.*,!=3.2.*,>=2.7\"\n+groups = [\"main\"]\n files = [\n     {file = \"python-dateutil-2.9.0.post0.tar.gz\", hash = \"sha256:37dd54208da7e1cd875388217d5e00ebd4179249f90fb72437e91a35459a0ad3\"},\n     {file = \"python_dateutil-2.9.0.post0-py2.py3-none-any.whl\", hash = \"sha256:a8b2bc7bffae282281c8140a97d3aa9c14da0b136dfe83f850eea9a5f7470427\"},\n@@ -2786,6 +2965,7 @@ version = \"1.0.0\"\n description = \"Read key-value pairs from a .env file and set them as environment variables\"\n optional = false\n python-versions = \">=3.8\"\n+groups = [\"main\"]\n files = [\n     {file = \"python-dotenv-1.0.0.tar.gz\", hash = \"sha256:a8df96034aae6d2d50a4ebe8216326c61c3eb64836776504fcca410e5937a3ba\"},\n     {file = \"python_dotenv-1.0.0-py3-none-any.whl\", hash = \"sha256:f5971a9226b701070a4bf2c38c89e5a3f0d64de8debda981d1db98583009122a\"},\n@@ -2800,6 +2980,7 @@ version = \"2025.2\"\n description = \"World timezone definitions, modern and historical\"\n optional = false\n python-versions = \"*\"\n+groups = [\"main\"]\n files = [\n     {file = \"pytz-2025.2-py2.py3-none-any.whl\", hash = \"sha256:5ddf76296dd8c44c26eb8f4b6f35488f3ccbf6fbbd7adee0b7262d43f0ec2f00\"},\n     {file = \"pytz-2025.2.tar.gz\", hash = \"sha256:360b9e3dbb49a209c21ad61809c7fb453643e048b38924c765813546746e81c3\"},\n@@ -2811,6 +2992,7 @@ version = \"6.0.2\"\n description = \"YAML parser and emitter for Python\"\n optional = false\n python-versions = \">=3.8\"\n+groups = [\"main\"]\n files = [\n     {file = \"PyYAML-6.0.2-cp310-cp310-macosx_10_9_x86_64.whl\", hash = \"sha256:0a9a2848a5b7feac301353437eb7d5957887edbf81d56e903999a75a3d743086\"},\n     {file = \"PyYAML-6.0.2-cp310-cp310-macosx_11_0_arm64.whl\", hash = \"sha256:29717114e51c84ddfba879543fb232a6ed60086602313ca38cce623c1d62cfbf\"},\n@@ -2873,6 +3055,7 @@ version = \"2.1.0\"\n description = \"Python library to build pretty command line user prompts \u2b50\ufe0f\"\n optional = false\n python-versions = \">=3.8\"\n+groups = [\"main\"]\n files = [\n     {file = \"questionary-2.1.0-py3-none-any.whl\", hash = \"sha256:44174d237b68bc828e4878c763a9ad6790ee61990e0ae72927694ead57bab8ec\"},\n     {file = \"questionary-2.1.0.tar.gz\", hash = \"sha256:6302cdd645b19667d8f6e6634774e9538bfcd1aad9be287e743d96cacaf95587\"},\n@@ -2887,6 +3070,7 @@ version = \"2024.11.6\"\n description = \"Alternative regular expression module, to replace re.\"\n optional = false\n python-versions = \">=3.8\"\n+groups = [\"main\"]\n files = [\n     {file = \"regex-2024.11.6-cp310-cp310-macosx_10_9_universal2.whl\", hash = \"sha256:ff590880083d60acc0433f9c3f713c51f7ac6ebb9adf889c79a261ecf541aa91\"},\n     {file = \"regex-2024.11.6-cp310-cp310-macosx_10_9_x86_64.whl\", hash = \"sha256:658f90550f38270639e83ce492f27d2c8d2cd63805c65a13a14d36ca126753f0\"},\n@@ -2990,6 +3174,7 @@ version = \"2.32.3\"\n description = \"Python HTTP for Humans.\"\n optional = false\n python-versions = \">=3.8\"\n+groups = [\"main\"]\n files = [\n     {file = \"requests-2.32.3-py3-none-any.whl\", hash = \"sha256:70761cfe03c773ceb22aa2f671b4757976145175cdfca038c02654d061d6dcc6\"},\n     {file = \"requests-2.32.3.tar.gz\", hash = \"sha256:55365417734eb18255590a9ff9eb97e9e1da868d4ccd6402399eaf68af20a760\"},\n@@ -3011,6 +3196,7 @@ version = \"1.0.0\"\n description = \"A utility belt for advanced users of python-requests\"\n optional = false\n python-versions = \">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*\"\n+groups = [\"main\"]\n files = [\n     {file = \"requests-toolbelt-1.0.0.tar.gz\", hash = \"sha256:7681a0a3d047012b5bdc0ee37d7f8f07ebe76ab08caeccfc3921ce23c88d5bc6\"},\n     {file = \"requests_toolbelt-1.0.0-py2.py3-none-any.whl\", hash = \"sha256:cccfdd665f0a24fcf4726e690f65639d272bb0637b9b92dfd91a5568ccf6bd06\"},\n@@ -3025,6 +3211,7 @@ version = \"13.9.4\"\n description = \"Render rich text, tables, progress bars, syntax highlighting, markdown and more to the terminal\"\n optional = false\n python-versions = \">=3.8.0\"\n+groups = [\"main\"]\n files = [\n     {file = \"rich-13.9.4-py3-none-any.whl\", hash = \"sha256:6049d5e6ec054bf2779ab3358186963bac2ea89175919d699e378b99738c2a90\"},\n     {file = \"rich-13.9.4.tar.gz\", hash = \"sha256:439594978a49a09530cff7ebc4b5c7103ef57baf48d5ea3184f21d9a2befa098\"},\n@@ -3043,6 +3230,7 @@ version = \"0.14.4\"\n description = \"Rich toolkit for building command-line applications\"\n optional = false\n python-versions = \">=3.8\"\n+groups = [\"main\"]\n files = [\n     {file = \"rich_toolkit-0.14.4-py3-none-any.whl\", hash = \"sha256:cc71ebee83eaa122d8e42882408bc5a4bf0240bbf1e368811ee56d249b3d742a\"},\n     {file = \"rich_toolkit-0.14.4.tar.gz\", hash = \"sha256:db256cf45165cae381c9bbf3b48a0fd4d99a07c80155cc655c80212a62e28fe1\"},\n@@ -3059,6 +3247,7 @@ version = \"4.9.1\"\n description = \"Pure-Python RSA implementation\"\n optional = false\n python-versions = \"<4,>=3.6\"\n+groups = [\"main\"]\n files = [\n     {file = \"rsa-4.9.1-py3-none-any.whl\", hash = \"sha256:68635866661c6836b8d39430f97a996acbd61bfa49406748ea243539fe239762\"},\n     {file = \"rsa-4.9.1.tar.gz\", hash = \"sha256:e7bdbfdb5497da4c07dfd35530e1a902659db6ff241e39d9953cad06ebd0ae75\"},\n@@ -3073,6 +3262,7 @@ version = \"1.5.4\"\n description = \"Tool to Detect Surrounding Shell\"\n optional = false\n python-versions = \">=3.7\"\n+groups = [\"main\"]\n files = [\n     {file = \"shellingham-1.5.4-py2.py3-none-any.whl\", hash = \"sha256:7ecfff8f2fd72616f7481040475a65b2bf8af90a56c89140852d1120324e8686\"},\n     {file = \"shellingham-1.5.4.tar.gz\", hash = \"sha256:8dbca0739d487e5bd35ab3ca4b36e11c4078f3a234bfce294b0a0291363404de\"},\n@@ -3084,6 +3274,7 @@ version = \"1.17.0\"\n description = \"Python 2 and 3 compatibility utilities\"\n optional = false\n python-versions = \"!=3.0.*,!=3.1.*,!=3.2.*,>=2.7\"\n+groups = [\"main\"]\n files = [\n     {file = \"six-1.17.0-py2.py3-none-any.whl\", hash = \"sha256:4721f391ed90541fddacab5acf947aa0d3dc7d27b2e1e8eda2be8970586c3274\"},\n     {file = \"six-1.17.0.tar.gz\", hash = \"sha256:ff70335d468e7eb6ec65b95b99d3a2836546063f63acc5171de367e834932a81\"},\n@@ -3095,6 +3286,7 @@ version = \"1.3.1\"\n description = \"Sniff out which async library your code is running under\"\n optional = false\n python-versions = \">=3.7\"\n+groups = [\"main\"]\n files = [\n     {file = \"sniffio-1.3.1-py3-none-any.whl\", hash = \"sha256:2f6da418d1f1e0fddd844478f41680e794e6051915791a034ff65e5f100525a2\"},\n     {file = \"sniffio-1.3.1.tar.gz\", hash = \"sha256:f4324edc670a0f49750a81b895f35c3adb843cca46f0530f79fc1babb23789dc\"},\n@@ -3106,6 +3298,7 @@ version = \"2.0.40\"\n description = \"Database Abstraction Library\"\n optional = false\n python-versions = \">=3.7\"\n+groups = [\"main\"]\n files = [\n     {file = \"SQLAlchemy-2.0.40-cp37-cp37m-macosx_10_9_x86_64.whl\", hash = \"sha256:ae9597cab738e7cc823f04a704fb754a9249f0b6695a6aeb63b74055cd417a96\"},\n     {file = \"SQLAlchemy-2.0.40-cp37-cp37m-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:37a5c21ab099a83d669ebb251fddf8f5cee4d75ea40a5a1653d9c43d60e20867\"},\n@@ -3195,12 +3388,25 @@ postgresql-psycopgbinary = [\"psycopg[binary] (>=3.0.7)\"]\n pymysql = [\"pymysql\"]\n sqlcipher = [\"sqlcipher3_binary\"]\n \n+[[package]]\n+name = \"sseclient-py\"\n+version = \"1.8.0\"\n+description = \"SSE client for Python\"\n+optional = false\n+python-versions = \"*\"\n+groups = [\"main\"]\n+files = [\n+    {file = \"sseclient-py-1.8.0.tar.gz\", hash = \"sha256:c547c5c1a7633230a38dc599a21a2dc638f9b5c297286b48b46b935c71fac3e8\"},\n+    {file = \"sseclient_py-1.8.0-py2.py3-none-any.whl\", hash = \"sha256:4ecca6dc0b9f963f8384e9d7fd529bf93dd7d708144c4fb5da0e0a1a926fee83\"},\n+]\n+\n [[package]]\n name = \"starlette\"\n version = \"0.27.0\"\n description = \"The little ASGI library that shines.\"\n optional = false\n python-versions = \">=3.7\"\n+groups = [\"main\"]\n files = [\n     {file = \"starlette-0.27.0-py3-none-any.whl\", hash = \"sha256:918416370e846586541235ccd38a474c08b80443ed31c578a418e2209b3eef91\"},\n     {file = \"starlette-0.27.0.tar.gz\", hash = \"sha256:6a6b0d042acb8d469a01eba54e9cda6cbd24ac602c4cd016723117d6a7e73b75\"},\n@@ -3218,6 +3424,7 @@ version = \"0.9.0\"\n description = \"Pretty-print tabular data\"\n optional = false\n python-versions = \">=3.7\"\n+groups = [\"main\"]\n files = [\n     {file = \"tabulate-0.9.0-py3-none-any.whl\", hash = \"sha256:024ca478df22e9340661486f85298cff5f6dcdba14f3813e8830015b9ed1948f\"},\n     {file = \"tabulate-0.9.0.tar.gz\", hash = \"sha256:0095b12bf5966de529c0feb1fa08671671b3368eec77d7ef7ab114be2c068b3c\"},\n@@ -3232,6 +3439,7 @@ version = \"8.5.0\"\n description = \"Retry code until it succeeds\"\n optional = false\n python-versions = \">=3.8\"\n+groups = [\"main\"]\n files = [\n     {file = \"tenacity-8.5.0-py3-none-any.whl\", hash = \"sha256:b594c2a5945830c267ce6b79a166228323ed52718f30302c1359836112346687\"},\n     {file = \"tenacity-8.5.0.tar.gz\", hash = \"sha256:8bc6c0c8a09b31e6cad13c47afbed1a567518250a9a171418582ed8d9c20ca78\"},\n@@ -3247,6 +3455,7 @@ version = \"0.9.0\"\n description = \"tiktoken is a fast BPE tokeniser for use with OpenAI's models\"\n optional = false\n python-versions = \">=3.9\"\n+groups = [\"main\"]\n files = [\n     {file = \"tiktoken-0.9.0-cp310-cp310-macosx_10_12_x86_64.whl\", hash = \"sha256:586c16358138b96ea804c034b8acf3f5d3f0258bd2bc3b0227af4af5d622e382\"},\n     {file = \"tiktoken-0.9.0-cp310-cp310-macosx_11_0_arm64.whl\", hash = \"sha256:d9c59ccc528c6c5dd51820b3474402f69d9a9e1d656226848ad68a8d5b2e5108\"},\n@@ -3294,6 +3503,7 @@ version = \"4.67.1\"\n description = \"Fast, Extensible Progress Meter\"\n optional = false\n python-versions = \">=3.7\"\n+groups = [\"main\"]\n files = [\n     {file = \"tqdm-4.67.1-py3-none-any.whl\", hash = \"sha256:26445eca388f82e72884e0d580d5464cd801a3ea01e63e5601bdff9ba6a48de2\"},\n     {file = \"tqdm-4.67.1.tar.gz\", hash = \"sha256:f8aef9c52c08c13a65f30ea34f4e5aac3fd1a34959879d7e59e63027286627f2\"},\n@@ -3315,6 +3525,7 @@ version = \"0.15.3\"\n description = \"Typer, build great CLIs. Easy to code. Based on Python type hints.\"\n optional = false\n python-versions = \">=3.7\"\n+groups = [\"main\"]\n files = [\n     {file = \"typer-0.15.3-py3-none-any.whl\", hash = \"sha256:c86a65ad77ca531f03de08d1b9cb67cd09ad02ddddf4b34745b5008f43b239bd\"},\n     {file = \"typer-0.15.3.tar.gz\", hash = \"sha256:818873625d0569653438316567861899f7e9972f2e6e0c16dab608345ced713c\"},\n@@ -3332,6 +3543,7 @@ version = \"4.13.2\"\n description = \"Backported and Experimental Type Hints for Python 3.8+\"\n optional = false\n python-versions = \">=3.8\"\n+groups = [\"main\"]\n files = [\n     {file = \"typing_extensions-4.13.2-py3-none-any.whl\", hash = \"sha256:a439e7c04b49fec3e5d3e2beaa21755cadbbdc391694e28ccdd36ca4a1408f8c\"},\n     {file = \"typing_extensions-4.13.2.tar.gz\", hash = \"sha256:e6c81219bd689f51865d9e372991c540bda33a0379d5573cddb9a3a23f7caaef\"},\n@@ -3343,6 +3555,7 @@ version = \"0.4.0\"\n description = \"Runtime typing introspection tools\"\n optional = false\n python-versions = \">=3.9\"\n+groups = [\"main\"]\n files = [\n     {file = \"typing_inspection-0.4.0-py3-none-any.whl\", hash = \"sha256:50e72559fcd2a6367a19f7a7e610e6afcb9fac940c650290eed893d61386832f\"},\n     {file = \"typing_inspection-0.4.0.tar.gz\", hash = \"sha256:9765c87de36671694a67904bf2c96e395be9c6439bb6c87b5142569dcdd65122\"},\n@@ -3357,6 +3570,7 @@ version = \"2025.2\"\n description = \"Provider of IANA time zone data\"\n optional = false\n python-versions = \">=2\"\n+groups = [\"main\"]\n files = [\n     {file = \"tzdata-2025.2-py2.py3-none-any.whl\", hash = \"sha256:1a403fada01ff9221ca8044d701868fa132215d84beb92242d9acd2147f667a8\"},\n     {file = \"tzdata-2025.2.tar.gz\", hash = \"sha256:b60a638fcc0daffadf82fe0f57e53d06bdec2f36c4df66280ae79bce6bd6f2b9\"},\n@@ -3368,13 +3582,14 @@ version = \"2.4.0\"\n description = \"HTTP library with thread-safe connection pooling, file post, and more.\"\n optional = false\n python-versions = \">=3.9\"\n+groups = [\"main\"]\n files = [\n     {file = \"urllib3-2.4.0-py3-none-any.whl\", hash = \"sha256:4e16665048960a0900c702d4a66415956a584919c03361cac9f1df5c5dd7e813\"},\n     {file = \"urllib3-2.4.0.tar.gz\", hash = \"sha256:414bc6535b787febd7567804cc015fee39daab8ad86268f1310a9250697de466\"},\n ]\n \n [package.extras]\n-brotli = [\"brotli (>=1.0.9)\", \"brotlicffi (>=0.8.0)\"]\n+brotli = [\"brotli (>=1.0.9) ; platform_python_implementation == \\\"CPython\\\"\", \"brotlicffi (>=0.8.0) ; platform_python_implementation != \\\"CPython\\\"\"]\n h2 = [\"h2 (>=4,<5)\"]\n socks = [\"pysocks (>=1.5.6,!=1.5.7,<2.0)\"]\n zstd = [\"zstandard (>=0.18.0)\"]\n@@ -3385,6 +3600,7 @@ version = \"0.34.2\"\n description = \"The lightning-fast ASGI server.\"\n optional = false\n python-versions = \">=3.9\"\n+groups = [\"main\"]\n files = [\n     {file = \"uvicorn-0.34.2-py3-none-any.whl\", hash = \"sha256:deb49af569084536d269fe0a6d67e3754f104cf03aba7c11c40f01aadf33c403\"},\n     {file = \"uvicorn-0.34.2.tar.gz\", hash = \"sha256:0e929828f6186353a80b58ea719861d2629d766293b6d19baf086ba31d4f3328\"},\n@@ -3397,19 +3613,21 @@ h11 = \">=0.8\"\n httptools = {version = \">=0.6.3\", optional = true, markers = \"extra == \\\"standard\\\"\"}\n python-dotenv = {version = \">=0.13\", optional = true, markers = \"extra == \\\"standard\\\"\"}\n pyyaml = {version = \">=5.1\", optional = true, markers = \"extra == \\\"standard\\\"\"}\n-uvloop = {version = \">=0.14.0,<0.15.0 || >0.15.0,<0.15.1 || >0.15.1\", optional = true, markers = \"(sys_platform != \\\"win32\\\" and sys_platform != \\\"cygwin\\\") and platform_python_implementation != \\\"PyPy\\\" and extra == \\\"standard\\\"\"}\n+uvloop = {version = \">=0.14.0,<0.15.0 || >0.15.0,<0.15.1 || >0.15.1\", optional = true, markers = \"sys_platform != \\\"win32\\\" and sys_platform != \\\"cygwin\\\" and platform_python_implementation != \\\"PyPy\\\" and extra == \\\"standard\\\"\"}\n watchfiles = {version = \">=0.13\", optional = true, markers = \"extra == \\\"standard\\\"\"}\n websockets = {version = \">=10.4\", optional = true, markers = \"extra == \\\"standard\\\"\"}\n \n [package.extras]\n-standard = [\"colorama (>=0.4)\", \"httptools (>=0.6.3)\", \"python-dotenv (>=0.13)\", \"pyyaml (>=5.1)\", \"uvloop (>=0.14.0,!=0.15.0,!=0.15.1)\", \"watchfiles (>=0.13)\", \"websockets (>=10.4)\"]\n+standard = [\"colorama (>=0.4) ; sys_platform == \\\"win32\\\"\", \"httptools (>=0.6.3)\", \"python-dotenv (>=0.13)\", \"pyyaml (>=5.1)\", \"uvloop (>=0.14.0,!=0.15.0,!=0.15.1) ; sys_platform != \\\"win32\\\" and sys_platform != \\\"cygwin\\\" and platform_python_implementation != \\\"PyPy\\\"\", \"watchfiles (>=0.13)\", \"websockets (>=10.4)\"]\n \n [[package]]\n name = \"uvloop\"\n version = \"0.21.0\"\n description = \"Fast implementation of asyncio event loop on top of libuv\"\n optional = false\n python-versions = \">=3.8.0\"\n+groups = [\"main\"]\n+markers = \"sys_platform != \\\"win32\\\" and sys_platform != \\\"cygwin\\\" and platform_python_implementation != \\\"PyPy\\\"\"\n files = [\n     {file = \"uvloop-0.21.0-cp310-cp310-macosx_10_9_universal2.whl\", hash = \"sha256:ec7e6b09a6fdded42403182ab6b832b71f4edaf7f37a9a0e371a01db5f0cb45f\"},\n     {file = \"uvloop-0.21.0-cp310-cp310-macosx_10_9_x86_64.whl\", hash = \"sha256:196274f2adb9689a289ad7d65700d37df0c0930fd8e4e743fa4834e850d7719d\"},\n@@ -3461,6 +3679,7 @@ version = \"1.0.5\"\n description = \"Simple, modern and high performance file watching and code reload in python.\"\n optional = false\n python-versions = \">=3.9\"\n+groups = [\"main\"]\n files = [\n     {file = \"watchfiles-1.0.5-cp310-cp310-macosx_10_12_x86_64.whl\", hash = \"sha256:5c40fe7dd9e5f81e0847b1ea64e1f5dd79dd61afbedb57759df06767ac719b40\"},\n     {file = \"watchfiles-1.0.5-cp310-cp310-macosx_11_0_arm64.whl\", hash = \"sha256:8c0db396e6003d99bb2d7232c957b5f0b5634bbd1b24e381a5afcc880f7373fb\"},\n@@ -3544,6 +3763,7 @@ version = \"0.2.13\"\n description = \"Measures the displayed width of unicode strings in a terminal\"\n optional = false\n python-versions = \"*\"\n+groups = [\"main\"]\n files = [\n     {file = \"wcwidth-0.2.13-py2.py3-none-any.whl\", hash = \"sha256:3da69048e4540d84af32131829ff948f1e022c1c6bdb8d6102117aac784f6859\"},\n     {file = \"wcwidth-0.2.13.tar.gz\", hash = \"sha256:72ea0c06399eb286d978fdedb6923a9eb47e1c486ce63e9b4e64fc18303972b5\"},\n@@ -3555,6 +3775,7 @@ version = \"15.0.1\"\n description = \"An implementation of the WebSocket Protocol (RFC 6455 & 7692)\"\n optional = false\n python-versions = \">=3.9\"\n+groups = [\"main\"]\n files = [\n     {file = \"websockets-15.0.1-cp310-cp310-macosx_10_9_universal2.whl\", hash = \"sha256:d63efaa0cd96cf0c5fe4d581521d9fa87744540d4bc999ae6e08595a1014b45b\"},\n     {file = \"websockets-15.0.1-cp310-cp310-macosx_10_9_x86_64.whl\", hash = \"sha256:ac60e3b188ec7574cb761b08d50fcedf9d77f1530352db4eef1707fe9dee7205\"},\n@@ -3633,6 +3854,7 @@ version = \"1.20.0\"\n description = \"Yet another URL library\"\n optional = false\n python-versions = \">=3.9\"\n+groups = [\"main\"]\n files = [\n     {file = \"yarl-1.20.0-cp310-cp310-macosx_10_9_universal2.whl\", hash = \"sha256:f1f6670b9ae3daedb325fa55fbe31c22c8228f6e0b513772c2e1c623caa6ab22\"},\n     {file = \"yarl-1.20.0-cp310-cp310-macosx_10_9_x86_64.whl\", hash = \"sha256:85a231fa250dfa3308f3c7896cc007a47bc76e9e8e8595c20b7426cac4884c62\"},\n@@ -3746,6 +3968,6 @@ multidict = \">=4.0\"\n propcache = \">=0.2.1\"\n \n [metadata]\n-lock-version = \"2.0\"\n+lock-version = \"2.1\"\n python-versions = \"^3.11\"\n-content-hash = \"4b63c0cbfd37b7262e6b1364ae4e7ce6c8b410933f3f8e62f12af5ed9646203e\"\n+content-hash = \"680ad21758c391683e2eab88c4c6733c3c9b41942066b999e18769d313e64dbd\"", "blob_url": "https://github.com/virattt/ai-hedge-fund/blob/626e4d48a5c47b47f10d0a878b82471fc14bddf5/poetry.lock", "raw_url": "https://github.com/virattt/ai-hedge-fund/raw/626e4d48a5c47b47f10d0a878b82471fc14bddf5/poetry.lock", "contents_url": "https://api.github.com/repos/virattt/ai-hedge-fund/contents/poetry.lock?ref=626e4d48a5c47b47f10d0a878b82471fc14bddf5"}, {"filename": "pyproject.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "patch": "@@ -34,6 +34,7 @@ pydantic = \"^2.4.2\"\n httpx = \"^0.27.0\"\n sqlalchemy = \"^2.0.22\"\n alembic = \"^1.12.0\"\n+alpaca-py = \"^0.40.2\"\n \n [tool.poetry.group.dev.dependencies]\n pytest = \"^7.4.0\"", "blob_url": "https://github.com/virattt/ai-hedge-fund/blob/626e4d48a5c47b47f10d0a878b82471fc14bddf5/pyproject.toml", "raw_url": "https://github.com/virattt/ai-hedge-fund/raw/626e4d48a5c47b47f10d0a878b82471fc14bddf5/pyproject.toml", "contents_url": "https://api.github.com/repos/virattt/ai-hedge-fund/contents/pyproject.toml?ref=626e4d48a5c47b47f10d0a878b82471fc14bddf5"}, {"filename": "src/trader.py", "status": "added", "additions": 267, "deletions": 0, "changes": 267, "patch": "@@ -0,0 +1,267 @@\n+\"\"\"Live trading CLI for the AI hedge fund.\"\"\"\n+\n+import sys\n+import argparse\n+from dotenv import load_dotenv\n+import questionary\n+from colorama import Fore, Style, init\n+\n+from src.trading.trader import create_trader\n+from src.utils.analysts import ANALYST_ORDER\n+from src.llm.models import LLM_ORDER, OLLAMA_LLM_ORDER, get_model_info, ModelProvider\n+from src.utils.ollama import ensure_ollama_and_model\n+\n+# Load environment variables\n+load_dotenv()\n+init(autoreset=True)\n+\n+\n+def main():\n+    \"\"\"Main CLI entry point for live trading.\"\"\"\n+    parser = argparse.ArgumentParser(description=\"Run live trading with AI hedge fund\")\n+    parser.add_argument(\"--tickers\", type=str, help=\"Comma-separated list of stock ticker symbols\")\n+    parser.add_argument(\"--dry-run\", action=\"store_true\", help=\"Show decisions but don't execute trades\")\n+    parser.add_argument(\"--ignore-market-hours\", action=\"store_true\", help=\"Run even when market is closed (useful with --dry-run)\")\n+    parser.add_argument(\"--continuous\", action=\"store_true\", help=\"Run continuous trading\")\n+    parser.add_argument(\"--interval\", type=int, default=60, help=\"Trading interval in minutes (default: 60)\")\n+    parser.add_argument(\"--available-capital\", type=float, help=\"Override available capital (uses broker cash if not specified)\")\n+    parser.add_argument(\"--margin-requirement\", type=float, help=\"Margin requirement ratio for short positions (uses broker default if not specified)\")\n+    parser.add_argument(\"--show-reasoning\", action=\"store_true\", help=\"Show reasoning from each agent\")\n+    parser.add_argument(\"--ollama\", action=\"store_true\", help=\"Use Ollama for local LLM inference\")\n+    parser.add_argument(\"--analysts\", type=str, help=\"Comma-separated list of analysts to use\")\n+    parser.add_argument(\"--analysts-all\", action=\"store_true\", help=\"Use all available analysts\")\n+    parser.add_argument(\"--list-analysts\", action=\"store_true\", help=\"List all available analysts and exit\")\n+    parser.add_argument(\"--model\", type=str, help=\"LLM model name to use\")\n+    parser.add_argument(\"--list-models\", action=\"store_true\", help=\"List all available models and exit\")\n+\n+    args = parser.parse_args()\n+\n+    # Handle list options\n+    if args.list_analysts:\n+        print(f\"\\n{Fore.CYAN}Available Analysts:{Style.RESET_ALL}\")\n+        for display, value in ANALYST_ORDER:\n+            print(f\"  {Fore.GREEN}{value:<25}{Style.RESET_ALL} - {display}\")\n+        print(f\"\\n{Fore.YELLOW}Usage examples:{Style.RESET_ALL}\")\n+        print(f\"  --analysts warren_buffett,michael_burry\")\n+        print(f\"  --analysts-all\")\n+        sys.exit(0)\n+\n+    if args.list_models:\n+        print(f\"\\n{Fore.CYAN}Available Models:{Style.RESET_ALL}\")\n+        print(f\"\\n{Fore.YELLOW}Cloud Models:{Style.RESET_ALL}\")\n+        for display, name, provider in LLM_ORDER:\n+            print(f\"  {Fore.GREEN}{name:<25}{Style.RESET_ALL} - {display} ({provider})\")\n+        \n+        print(f\"\\n{Fore.YELLOW}Ollama Models:{Style.RESET_ALL}\")\n+        for display, name, _ in OLLAMA_LLM_ORDER:\n+            print(f\"  {Fore.GREEN}{name:<25}{Style.RESET_ALL} - {display}\")\n+        \n+        print(f\"\\n{Fore.YELLOW}Usage examples:{Style.RESET_ALL}\")\n+        print(f\"  --model gpt-4o\")\n+        print(f\"  --model claude-3-5-sonnet-20241022\")\n+        print(f\"  --ollama --model llama3\")\n+        sys.exit(0)\n+\n+    # Check if tickers are required\n+    if not args.tickers:\n+        print(f\"{Fore.RED}Error: --tickers is required for trading operations{Style.RESET_ALL}\")\n+        print(\"Use --list-analysts or --list-models to see available options\")\n+        sys.exit(1)\n+\n+\n+    # Parse tickers\n+    tickers = [ticker.strip().upper() for ticker in args.tickers.split(\",\")]\n+    print(f\"\\n{Fore.CYAN}Trading tickers: {', '.join(tickers)}{Style.RESET_ALL}\")\n+\n+\n+    # Select analysts\n+    selected_analysts = None\n+    if args.analysts_all:\n+        selected_analysts = [a[1] for a in ANALYST_ORDER]\n+    elif args.analysts:\n+        selected_analysts = [a.strip() for a in args.analysts.split(\",\") if a.strip()]\n+    else:\n+        selected_analysts = questionary.checkbox(\n+            \"Select your AI analysts:\",\n+            choices=[questionary.Choice(display, value=value) for display, value in ANALYST_ORDER],\n+            instruction=\"\\n\\nInstructions:\\n1. Press Space to select/unselect analysts\\n2. Press 'a' to select/unselect all\\n3. Press Enter when done\\n\",\n+            validate=lambda x: len(x) > 0 or \"You must select at least one analyst.\",\n+            style=questionary.Style([\n+                (\"checkbox-selected\", \"fg:green\"),\n+                (\"selected\", \"fg:green noinherit\"),\n+                (\"highlighted\", \"noinherit\"),\n+                (\"pointer\", \"noinherit\"),\n+            ])\n+        ).ask()\n+\n+    if not selected_analysts:\n+        print(\"\\nExiting...\")\n+        sys.exit(0)\n+\n+    print(f\"\\nSelected analysts: {', '.join(Fore.GREEN + choice.title().replace('_', ' ') + Style.RESET_ALL for choice in selected_analysts)}\")\n+\n+    # Select LLM model\n+    model_name = \"\"\n+    model_provider = \"\"\n+\n+    if args.model:\n+        # Model specified via CLI\n+        model_name = args.model\n+        if args.ollama:\n+            model_provider = ModelProvider.OLLAMA.value\n+            if not ensure_ollama_and_model(model_name):\n+                print(f\"{Fore.RED}Cannot proceed without Ollama and the selected model{Style.RESET_ALL}\")\n+                sys.exit(1)\n+        else:\n+            # Try to find the model in the LLM_ORDER\n+            found = False\n+            for display, name, provider in LLM_ORDER:\n+                if name == model_name:\n+                    model_provider = provider\n+                    found = True\n+                    break\n+            if not found:\n+                print(f\"{Fore.RED}Model '{model_name}' not found in available models{Style.RESET_ALL}\")\n+                sys.exit(1)\n+        print(f\"\\nUsing model: {Fore.GREEN + Style.BRIGHT}{model_name}{Style.RESET_ALL} ({model_provider})\")\n+\n+    elif args.ollama:\n+        print(f\"{Fore.CYAN}Using Ollama for local LLM inference{Style.RESET_ALL}\")\n+        \n+        model_name = questionary.select(\n+            \"Select your Ollama model:\",\n+            choices=[questionary.Choice(display, value=value) for display, value, _ in OLLAMA_LLM_ORDER],\n+            style=questionary.Style([\n+                (\"selected\", \"fg:green bold\"),\n+                (\"pointer\", \"fg:green bold\"),\n+                (\"highlighted\", \"fg:green\"),\n+                (\"answer\", \"fg:green bold\"),\n+            ])\n+        ).ask()\n+\n+        if not model_name:\n+            print(\"\\nExiting...\")\n+            sys.exit(0)\n+\n+        if model_name == \"-\":\n+            model_name = questionary.text(\"Enter the custom model name:\").ask()\n+            if not model_name:\n+                print(\"\\nExiting...\")\n+                sys.exit(0)\n+\n+        if not ensure_ollama_and_model(model_name):\n+            print(f\"{Fore.RED}Cannot proceed without Ollama and the selected model{Style.RESET_ALL}\")\n+            sys.exit(1)\n+\n+        model_provider = ModelProvider.OLLAMA.value\n+        print(f\"\\nSelected {Fore.CYAN}Ollama{Style.RESET_ALL} model: {Fore.GREEN + Style.BRIGHT}{model_name}{Style.RESET_ALL}\")\n+\n+    else:\n+        model_choice = questionary.select(\n+            \"Select your LLM model:\",\n+            choices=[questionary.Choice(display, value=(name, provider)) for display, name, provider in LLM_ORDER],\n+            style=questionary.Style([\n+                (\"selected\", \"fg:green bold\"),\n+                (\"pointer\", \"fg:green bold\"),\n+                (\"highlighted\", \"fg:green\"),\n+                (\"answer\", \"fg:green bold\"),\n+            ])\n+        ).ask()\n+\n+        if not model_choice:\n+            print(\"\\nExiting...\")\n+            sys.exit(0)\n+\n+        model_name, model_provider = model_choice\n+\n+        model_info = get_model_info(model_name, model_provider)\n+        if model_info and model_info.is_custom():\n+            model_name = questionary.text(\"Enter the custom model name:\").ask()\n+            if not model_name:\n+                print(\"\\nExiting...\")\n+                sys.exit(0)\n+\n+        print(f\"\\nSelected {Fore.CYAN}{model_provider}{Style.RESET_ALL} model: {Fore.GREEN + Style.BRIGHT}{model_name}{Style.RESET_ALL}\")\n+\n+    # Create trader\n+    print(f\"\\n{Fore.CYAN}Creating trader...{Style.RESET_ALL}\")\n+    trader = create_trader(\n+        tickers=tickers,\n+        selected_analysts=selected_analysts,\n+        model_name=model_name,\n+        model_provider=model_provider,\n+        available_capital=args.available_capital,\n+        margin_requirement=args.margin_requirement,\n+        dry_run=args.dry_run,\n+        ignore_market_hours=args.ignore_market_hours\n+    )\n+\n+    # Connect to broker\n+    print(f\"\\n{Fore.CYAN}Connecting to broker...{Style.RESET_ALL}\")\n+    if not trader.connect():\n+        print(f\"{Fore.RED}Failed to connect to broker{Style.RESET_ALL}\")\n+        sys.exit(1)\n+    \n+    # Get margin requirement from broker if not specified\n+    if args.margin_requirement is None:\n+        try:\n+            # Get account default margin requirement\n+            broker_margin_req = trader.broker.get_margin_requirement()\n+            trader.margin_requirement = broker_margin_req\n+            print(f\"{Fore.CYAN}Using broker default margin requirement: {broker_margin_req:.1%}{Style.RESET_ALL}\")\n+            \n+            # Show ticker-specific margin requirements\n+            print(f\"{Fore.CYAN}Ticker-specific margin requirements:{Style.RESET_ALL}\")\n+            for ticker in tickers:\n+                try:\n+                    ticker_margin = trader.broker.get_margin_requirement(ticker)\n+                    print(f\"  {ticker}: {ticker_margin:.1%}\")\n+                except Exception as e:\n+                    print(f\"  {ticker}: {broker_margin_req:.1%} (default - could not get specific requirement)\")\n+        except Exception as e:\n+            trader.margin_requirement = 0.5  # Default fallback\n+            print(f\"{Fore.YELLOW}Could not get broker margin requirement, using default 50%{Style.RESET_ALL}\")\n+    \n+    # Show capital usage information\n+    if args.available_capital:\n+        print(f\"{Fore.CYAN}Using limited capital: ${args.available_capital:,.2f} (maintaining account margin capability){Style.RESET_ALL}\")\n+    \n+    # Check for live trading warning after connection\n+    if not trader.broker.is_paper_trading():\n+        confirm = questionary.confirm(\n+            f\"{Fore.RED}WARNING: Connected to LIVE TRADING account with real money. Are you sure you want to continue?{Style.RESET_ALL}\",\n+            default=False\n+        ).ask()\n+        if not confirm:\n+            print(\"Exiting...\")\n+            trader.disconnect()\n+            sys.exit(0)\n+\n+    try:\n+        # Show portfolio summary\n+        trader.print_portfolio_summary()\n+\n+        # Run trading\n+        if args.continuous:\n+            print(f\"\\n{Fore.BLUE}Starting continuous trading mode...{Style.RESET_ALL}\")\n+            trader.run_continuous_trading(interval_minutes=args.interval)\n+        else:\n+            print(f\"\\n{Fore.BLUE}Running single trading session...{Style.RESET_ALL}\")\n+            trader.run_trading_session()\n+            \n+            # Show updated portfolio\n+            trader.print_portfolio_summary()\n+\n+    except KeyboardInterrupt:\n+        print(f\"\\n{Fore.YELLOW}Trading interrupted by user{Style.RESET_ALL}\")\n+    except Exception as e:\n+        print(f\"\\n{Fore.RED}Trading failed: {e}{Style.RESET_ALL}\")\n+        sys.exit(1)\n+    finally:\n+        trader.disconnect()\n+\n+    print(f\"\\n{Fore.GREEN}Trading session completed{Style.RESET_ALL}\")\n+\n+\n+if __name__ == \"__main__\":\n+    main()\n\\ No newline at end of file", "blob_url": "https://github.com/virattt/ai-hedge-fund/blob/626e4d48a5c47b47f10d0a878b82471fc14bddf5/src%2Ftrader.py", "raw_url": "https://github.com/virattt/ai-hedge-fund/raw/626e4d48a5c47b47f10d0a878b82471fc14bddf5/src%2Ftrader.py", "contents_url": "https://api.github.com/repos/virattt/ai-hedge-fund/contents/src%2Ftrader.py?ref=626e4d48a5c47b47f10d0a878b82471fc14bddf5"}, {"filename": "src/trading/__init__.py", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "patch": "@@ -0,0 +1 @@\n+\"\"\"Trading module for real broker integration.\"\"\"\n\\ No newline at end of file", "blob_url": "https://github.com/virattt/ai-hedge-fund/blob/626e4d48a5c47b47f10d0a878b82471fc14bddf5/src%2Ftrading%2F__init__.py", "raw_url": "https://github.com/virattt/ai-hedge-fund/raw/626e4d48a5c47b47f10d0a878b82471fc14bddf5/src%2Ftrading%2F__init__.py", "contents_url": "https://api.github.com/repos/virattt/ai-hedge-fund/contents/src%2Ftrading%2F__init__.py?ref=626e4d48a5c47b47f10d0a878b82471fc14bddf5"}, {"filename": "src/trading/alpaca_broker.py", "status": "added", "additions": 390, "deletions": 0, "changes": 390, "patch": "@@ -0,0 +1,390 @@\n+\"\"\"Alpaca broker implementation for live trading.\"\"\"\n+\n+import os\n+from alpaca.trading.client import TradingClient\n+from alpaca.trading.requests import MarketOrderRequest, LimitOrderRequest, StopOrderRequest\n+from alpaca.trading.enums import OrderSide, TimeInForce, OrderType\n+from alpaca.data.historical import StockHistoricalDataClient\n+from alpaca.data.requests import StockLatestQuoteRequest\n+from alpaca.common.exceptions import APIError\n+from colorama import Fore, Style\n+import logging\n+\n+from .broker_base import BrokerBase, Position, Order, Account\n+\n+\n+logger = logging.getLogger(__name__)\n+\n+\n+class AlpacaBroker(BrokerBase):\n+    \"\"\"Alpaca broker implementation.\"\"\"\n+    \n+    def __init__(self, paper_trading: bool = None):\n+        \"\"\"Initialize Alpaca broker.\n+        \n+        Args:\n+            paper_trading: Whether to use paper trading account. If None, reads from ALPACA_PAPER env var.\n+        \"\"\"\n+        # Read from environment variable if not explicitly set\n+        if paper_trading is None:\n+            paper_trading = os.getenv(\"ALPACA_PAPER\", \"true\").lower() in (\"true\", \"1\", \"yes\")\n+        \n+        self.paper_trading = paper_trading\n+        self.trading_client = None\n+        self.data_client = None\n+        self._connected = False\n+        \n+        # Check required environment variables\n+        required_vars = [\"ALPACA_API_KEY\", \"ALPACA_SECRET_KEY\"]\n+        missing_vars = [var for var in required_vars if not os.getenv(var)]\n+        \n+        if missing_vars:\n+            raise ValueError(f\"Missing required environment variables: {', '.join(missing_vars)}. Please set these in your .env file\")\n+        \n+        # Get API credentials from environment\n+        self.api_key = os.getenv(\"ALPACA_API_KEY\")\n+        self.secret_key = os.getenv(\"ALPACA_SECRET_KEY\")\n+    \n+    def connect(self) -> bool:\n+        \"\"\"Connect to Alpaca API.\"\"\"\n+        try:\n+            self.trading_client = TradingClient(\n+                api_key=self.api_key,\n+                secret_key=self.secret_key,\n+                paper=self.paper_trading\n+            )\n+            \n+            self.data_client = StockHistoricalDataClient(\n+                api_key=self.api_key,\n+                secret_key=self.secret_key\n+            )\n+            \n+            # Test connection by getting account info\n+            account = self.trading_client.get_account()\n+            self._connected = True\n+            \n+            env_type = \"Paper\" if self.paper_trading else \"Live\"\n+            print(f\"{Fore.GREEN}Connected to Alpaca {env_type} Trading API{Style.RESET_ALL}\")\n+            print(f\"Account Status: {account.status}\")\n+            print(f\"Buying Power: ${float(account.buying_power):,.2f}\")\n+            \n+            return True\n+            \n+        except APIError as e:\n+            logger.error(f\"Failed to connect to Alpaca: {e}\")\n+            print(f\"{Fore.RED}Failed to connect to Alpaca: {e}{Style.RESET_ALL}\")\n+            return False\n+        except Exception as e:\n+            logger.error(f\"Unexpected error connecting to Alpaca: {e}\")\n+            print(f\"{Fore.RED}Unexpected error: {e}{Style.RESET_ALL}\")\n+            return False\n+    \n+    def disconnect(self) -> None:\n+        \"\"\"Disconnect from Alpaca API.\"\"\"\n+        self.trading_client = None\n+        self.data_client = None\n+        self._connected = False\n+        print(f\"{Fore.YELLOW}Disconnected from Alpaca API{Style.RESET_ALL}\")\n+    \n+    def get_account(self) -> Account:\n+        \"\"\"Get current account information.\"\"\"\n+        if not self._connected:\n+            raise RuntimeError(\"Not connected to broker\")\n+        \n+        account = self.trading_client.get_account()\n+        \n+        return Account(\n+            cash=float(account.cash),\n+            buying_power=float(account.buying_power),\n+            portfolio_value=float(account.portfolio_value),\n+            equity=float(account.equity),\n+            initial_margin=float(account.initial_margin),\n+            maintenance_margin=float(account.maintenance_margin),\n+            sma=float(account.sma),\n+            day_trade_count=int(account.daytrade_count),\n+            regt_buying_power=float(account.regt_buying_power),\n+            daytrading_buying_power=float(account.daytrading_buying_power),\n+            multiplier=float(account.multiplier)\n+        )\n+    \n+    def get_positions(self) -> list[Position]:\n+        \"\"\"Get current positions.\"\"\"\n+        if not self._connected:\n+            raise RuntimeError(\"Not connected to broker\")\n+        \n+        positions = []\n+        alpaca_positions = self.trading_client.get_all_positions()\n+        \n+        for pos in alpaca_positions:\n+            side = \"long\" if float(pos.qty) > 0 else \"short\"\n+            \n+            # Handle optional unrealized_pnl - calculate if missing\n+            unrealized_pnl = 0.0\n+            if hasattr(pos, 'unrealized_pnl') and pos.unrealized_pnl is not None:\n+                unrealized_pnl = float(pos.unrealized_pnl)\n+            else:\n+                # Calculate unrealized P&L if not provided\n+                # unrealized_pnl = market_value - cost_basis\n+                unrealized_pnl = float(pos.market_value) - float(pos.cost_basis)\n+            \n+            positions.append(Position(\n+                symbol=pos.symbol,\n+                quantity=abs(float(pos.qty)),\n+                side=side,\n+                avg_entry_price=float(pos.avg_entry_price),\n+                market_value=float(pos.market_value),\n+                unrealized_pnl=unrealized_pnl,\n+                cost_basis=float(pos.cost_basis)\n+            ))\n+        \n+        return positions\n+    \n+    def get_position(self, symbol: str) -> Position | None:\n+        \"\"\"Get position for a specific symbol.\"\"\"\n+        if not self._connected:\n+            raise RuntimeError(\"Not connected to broker\")\n+        \n+        try:\n+            pos = self.trading_client.get_open_position(symbol)\n+            side = \"long\" if float(pos.qty) > 0 else \"short\"\n+            \n+            # Handle optional unrealized_pnl - calculate if missing\n+            unrealized_pnl = 0.0\n+            if hasattr(pos, 'unrealized_pnl') and pos.unrealized_pnl is not None:\n+                unrealized_pnl = float(pos.unrealized_pnl)\n+            else:\n+                # Calculate unrealized P&L if not provided\n+                unrealized_pnl = float(pos.market_value) - float(pos.cost_basis)\n+            \n+            return Position(\n+                symbol=pos.symbol,\n+                quantity=abs(float(pos.qty)),\n+                side=side,\n+                avg_entry_price=float(pos.avg_entry_price),\n+                market_value=float(pos.market_value),\n+                unrealized_pnl=unrealized_pnl,\n+                cost_basis=float(pos.cost_basis)\n+            )\n+            \n+        except APIError:\n+            # Position doesn't exist\n+            return None\n+    \n+    def place_order(self, symbol: str, quantity: float, side: str, \n+                   order_type: str = \"market\", limit_price: float | None = None,\n+                   stop_price: float | None = None) -> Order:\n+        \"\"\"Place a trading order.\"\"\"\n+        if not self._connected:\n+            raise RuntimeError(\"Not connected to broker\")\n+        \n+        # Convert side to Alpaca format\n+        if side == \"buy\":\n+            order_side = OrderSide.BUY\n+        elif side == \"sell\":\n+            order_side = OrderSide.SELL\n+        elif side == \"sell_short\":\n+            order_side = OrderSide.SELL\n+            # Note: Alpaca handles short selling automatically when selling more than owned\n+        else:\n+            raise ValueError(f\"Invalid order side: {side}\")\n+        \n+        # Create order request based on type\n+        try:\n+            if order_type == \"market\":\n+                order_request = MarketOrderRequest(\n+                    symbol=symbol,\n+                    qty=quantity,\n+                    side=order_side,\n+                    time_in_force=TimeInForce.DAY\n+                )\n+            elif order_type == \"limit\":\n+                if limit_price is None:\n+                    raise ValueError(\"Limit price required for limit orders\")\n+                order_request = LimitOrderRequest(\n+                    symbol=symbol,\n+                    qty=quantity,\n+                    side=order_side,\n+                    time_in_force=TimeInForce.DAY,\n+                    limit_price=limit_price\n+                )\n+            elif order_type == \"stop\":\n+                if stop_price is None:\n+                    raise ValueError(\"Stop price required for stop orders\")\n+                order_request = StopOrderRequest(\n+                    symbol=symbol,\n+                    qty=quantity,\n+                    side=order_side,\n+                    time_in_force=TimeInForce.DAY,\n+                    stop_price=stop_price\n+                )\n+            else:\n+                raise ValueError(f\"Invalid order type: {order_type}\")\n+            \n+            alpaca_order = self.trading_client.submit_order(order_request)\n+            \n+            return Order(\n+                id=str(alpaca_order.id),\n+                symbol=alpaca_order.symbol,\n+                quantity=float(alpaca_order.qty),\n+                side=side,\n+                order_type=order_type,\n+                status=alpaca_order.status.value,\n+                filled_price=float(alpaca_order.filled_avg_price) if alpaca_order.filled_avg_price else None,\n+                filled_quantity=float(alpaca_order.filled_qty) if alpaca_order.filled_qty else None,\n+                submitted_at=alpaca_order.submitted_at,\n+                filled_at=alpaca_order.filled_at\n+            )\n+            \n+        except APIError as e:\n+            logger.error(f\"Failed to place order: {e}\")\n+            raise RuntimeError(f\"Failed to place order: {e}\")\n+    \n+    def cancel_order(self, order_id: str) -> bool:\n+        \"\"\"Cancel an order.\"\"\"\n+        if not self._connected:\n+            raise RuntimeError(\"Not connected to broker\")\n+        \n+        try:\n+            self.trading_client.cancel_order_by_id(order_id)\n+            return True\n+        except APIError as e:\n+            logger.error(f\"Failed to cancel order {order_id}: {e}\")\n+            return False\n+    \n+    def get_orders(self, status: str | None = None) -> list[Order]:\n+        \"\"\"Get orders.\"\"\"\n+        if not self._connected:\n+            raise RuntimeError(\"Not connected to broker\")\n+        \n+        orders = []\n+        alpaca_orders = self.trading_client.get_orders()\n+        \n+        for order in alpaca_orders:\n+            if status is None or order.status.value == status:\n+                # Convert Alpaca side back to our format\n+                side = \"buy\" if order.side == OrderSide.BUY else \"sell\"\n+                \n+                orders.append(Order(\n+                    id=str(order.id),\n+                    symbol=order.symbol,\n+                    quantity=float(order.qty),\n+                    side=side,\n+                    order_type=order.order_type.value,\n+                    status=order.status.value,\n+                    filled_price=float(order.filled_avg_price) if order.filled_avg_price else None,\n+                    filled_quantity=float(order.filled_qty) if order.filled_qty else None,\n+                    submitted_at=order.submitted_at,\n+                    filled_at=order.filled_at\n+                ))\n+        \n+        return orders\n+    \n+    def get_order(self, order_id: str) -> Order | None:\n+        \"\"\"Get specific order.\"\"\"\n+        if not self._connected:\n+            raise RuntimeError(\"Not connected to broker\")\n+        \n+        try:\n+            order = self.trading_client.get_order_by_id(order_id)\n+            side = \"buy\" if order.side == OrderSide.BUY else \"sell\"\n+            \n+            return Order(\n+                id=str(order.id),\n+                symbol=order.symbol,\n+                quantity=float(order.qty),\n+                side=side,\n+                order_type=order.order_type.value,\n+                status=order.status.value,\n+                filled_price=float(order.filled_avg_price) if order.filled_avg_price else None,\n+                filled_quantity=float(order.filled_qty) if order.filled_qty else None,\n+                submitted_at=order.submitted_at,\n+                filled_at=order.filled_at\n+            )\n+            \n+        except APIError:\n+            return None\n+    \n+    def get_current_price(self, symbol: str) -> float:\n+        \"\"\"Get current price for a symbol.\"\"\"\n+        if not self._connected:\n+            raise RuntimeError(\"Not connected to broker\")\n+        \n+        try:\n+            request = StockLatestQuoteRequest(symbol_or_symbols=[symbol])\n+            quote = self.data_client.get_stock_latest_quote(request)\n+            \n+            if symbol in quote:\n+                return float(quote[symbol].bid_price)\n+            else:\n+                raise ValueError(f\"No quote available for {symbol}\")\n+                \n+        except APIError as e:\n+            logger.error(f\"Failed to get price for {symbol}: {e}\")\n+            raise RuntimeError(f\"Failed to get price for {symbol}: {e}\")\n+    \n+    def is_market_open(self) -> bool:\n+        \"\"\"Check if market is currently open.\"\"\"\n+        if not self._connected:\n+            raise RuntimeError(\"Not connected to broker\")\n+        \n+        try:\n+            clock = self.trading_client.get_clock()\n+            return clock.is_open\n+        except APIError as e:\n+            logger.error(f\"Failed to get market status: {e}\")\n+            return False\n+    \n+    def is_paper_trading(self) -> bool:\n+        \"\"\"Check if this is a paper trading account.\"\"\"\n+        return self.paper_trading\n+    \n+    def get_margin_requirement(self, symbol: str | None = None) -> float:\n+        \"\"\"Get margin requirement ratio for positions.\n+        \n+        Args:\n+            symbol: Stock symbol to get specific margin requirement for. \n+                   If None, returns account default margin requirement.\n+        \n+        Returns:\n+            float: Margin requirement ratio (e.g., 0.5 for 50% margin requirement).\n+        \"\"\"\n+        if not self._connected:\n+            raise RuntimeError(\"Not connected to broker\")\n+        \n+        try:\n+            # If a specific symbol is requested, get its asset-specific margin requirement\n+            if symbol:\n+                try:\n+                    asset = self.trading_client.get_asset(symbol)\n+                    if asset and hasattr(asset, 'maintenance_margin_requirement') and asset.maintenance_margin_requirement is not None:\n+                        # Alpaca returns margin requirement as percentage points (30.0 = 30%)\n+                        margin_req = asset.maintenance_margin_requirement\n+                        margin_float = float(margin_req)\n+                        \n+                        # Convert percentage points to ratio (30.0 -> 0.30)\n+                        if margin_float > 0:\n+                            return margin_float / 100.0\n+                        else:\n+                            # Invalid margin requirement, fall through to account default\n+                            print(f\"WARNING: Invalid margin requirement {margin_float} for {symbol}, using account default\")\n+                except APIError:\n+                    # Fall through to account-level default if asset not found\n+                    pass\n+                except Exception as e:\n+                    print(f\"DEBUG: Error processing margin requirement for {symbol}: {e}\")\n+                    # Fall through to account default\n+            \n+            # Fallback to account-level margin requirement\n+            account = self.trading_client.get_account()\n+            multiplier = float(account.multiplier) if account.multiplier else 1.0\n+            \n+            if multiplier > 1:\n+                # Margin account - typical requirement is 50% for most stocks\n+                return 0.5  # 50% margin requirement for margin accounts\n+            else:\n+                # Cash account - cannot use margin for overnight positions\n+                return 1.0  # 100% cash requirement for cash accounts (no margin)\n+                \n+        except APIError as e:\n+            logger.error(f\"Failed to get margin requirement: {e}\")\n+            return 0.5  # Default to 50% if we can't determine\n\\ No newline at end of file", "blob_url": "https://github.com/virattt/ai-hedge-fund/blob/626e4d48a5c47b47f10d0a878b82471fc14bddf5/src%2Ftrading%2Falpaca_broker.py", "raw_url": "https://github.com/virattt/ai-hedge-fund/raw/626e4d48a5c47b47f10d0a878b82471fc14bddf5/src%2Ftrading%2Falpaca_broker.py", "contents_url": "https://api.github.com/repos/virattt/ai-hedge-fund/contents/src%2Ftrading%2Falpaca_broker.py?ref=626e4d48a5c47b47f10d0a878b82471fc14bddf5"}, {"filename": "src/trading/broker_base.py", "status": "added", "additions": 194, "deletions": 0, "changes": 194, "patch": "@@ -0,0 +1,194 @@\n+\"\"\"Base broker interface for trading implementations.\"\"\"\n+\n+from abc import ABC, abstractmethod\n+from dataclasses import dataclass\n+from datetime import datetime\n+\n+\n+@dataclass\n+class Position:\n+    \"\"\"Represents a trading position.\"\"\"\n+    symbol: str\n+    quantity: float\n+    side: str  # \"long\" or \"short\"\n+    avg_entry_price: float\n+    market_value: float\n+    unrealized_pnl: float\n+    cost_basis: float\n+\n+\n+@dataclass\n+class Order:\n+    \"\"\"Represents a trading order.\"\"\"\n+    id: str\n+    symbol: str\n+    quantity: float\n+    side: str  # \"buy\", \"sell\", \"sell_short\"\n+    order_type: str  # \"market\", \"limit\", \"stop\"\n+    status: str  # \"pending\", \"filled\", \"canceled\", \"rejected\"\n+    filled_price: float | None = None\n+    filled_quantity: float | None = None\n+    submitted_at: datetime | None = None\n+    filled_at: datetime | None = None\n+\n+\n+@dataclass\n+class Account:\n+    \"\"\"Represents account information.\"\"\"\n+    cash: float\n+    buying_power: float\n+    portfolio_value: float\n+    equity: float\n+    initial_margin: float\n+    maintenance_margin: float\n+    sma: float  # Special Memorandum Account\n+    day_trade_count: int\n+    regt_buying_power: float\n+    daytrading_buying_power: float\n+    multiplier: float\n+\n+\n+class BrokerBase(ABC):\n+    \"\"\"Abstract base class for broker implementations.\"\"\"\n+    \n+    @abstractmethod\n+    def connect(self) -> bool:\n+        \"\"\"Connect to the broker API.\n+        \n+        Returns:\n+            bool: True if connection successful, False otherwise.\n+        \"\"\"\n+        pass\n+    \n+    @abstractmethod\n+    def disconnect(self) -> None:\n+        \"\"\"Disconnect from the broker API.\"\"\"\n+        pass\n+    \n+    @abstractmethod\n+    def get_account(self) -> Account:\n+        \"\"\"Get current account information.\n+        \n+        Returns:\n+            Account: Current account details.\n+        \"\"\"\n+        pass\n+    \n+    @abstractmethod\n+    def get_positions(self) -> list[Position]:\n+        \"\"\"Get current positions.\n+        \n+        Returns:\n+            list[Position]: List of current positions.\n+        \"\"\"\n+        pass\n+    \n+    @abstractmethod\n+    def get_position(self, symbol: str) -> Position | None:\n+        \"\"\"Get position for a specific symbol.\n+        \n+        Args:\n+            symbol: Stock symbol.\n+            \n+        Returns:\n+            Position | None: Position if exists, None otherwise.\n+        \"\"\"\n+        pass\n+    \n+    @abstractmethod\n+    def place_order(self, symbol: str, quantity: float, side: str, \n+                   order_type: str = \"market\", limit_price: float | None = None,\n+                   stop_price: float | None = None) -> Order:\n+        \"\"\"Place a trading order.\n+        \n+        Args:\n+            symbol: Stock symbol.\n+            quantity: Number of shares.\n+            side: \"buy\", \"sell\", or \"sell_short\".\n+            order_type: \"market\", \"limit\", or \"stop\".\n+            limit_price: Limit price for limit orders.\n+            stop_price: Stop price for stop orders.\n+            \n+        Returns:\n+            Order: The placed order.\n+        \"\"\"\n+        pass\n+    \n+    @abstractmethod\n+    def cancel_order(self, order_id: str) -> bool:\n+        \"\"\"Cancel an order.\n+        \n+        Args:\n+            order_id: Order ID to cancel.\n+            \n+        Returns:\n+            bool: True if cancellation successful, False otherwise.\n+        \"\"\"\n+        pass\n+    \n+    @abstractmethod\n+    def get_orders(self, status: str | None = None) -> list[Order]:\n+        \"\"\"Get orders.\n+        \n+        Args:\n+            status: Filter by order status. None for all orders.\n+            \n+        Returns:\n+            list[Order]: List of orders.\n+        \"\"\"\n+        pass\n+    \n+    @abstractmethod\n+    def get_order(self, order_id: str) -> Order | None:\n+        \"\"\"Get specific order.\n+        \n+        Args:\n+            order_id: Order ID.\n+            \n+        Returns:\n+            Order | None: Order if exists, None otherwise.\n+        \"\"\"\n+        pass\n+    \n+    @abstractmethod\n+    def get_current_price(self, symbol: str) -> float:\n+        \"\"\"Get current price for a symbol.\n+        \n+        Args:\n+            symbol: Stock symbol.\n+            \n+        Returns:\n+            float: Current price.\n+        \"\"\"\n+        pass\n+    \n+    @abstractmethod\n+    def is_market_open(self) -> bool:\n+        \"\"\"Check if market is currently open.\n+        \n+        Returns:\n+            bool: True if market is open, False otherwise.\n+        \"\"\"\n+        pass\n+    \n+    @abstractmethod\n+    def is_paper_trading(self) -> bool:\n+        \"\"\"Check if this is a paper trading account.\n+        \n+        Returns:\n+            bool: True if paper trading, False if live trading.\n+        \"\"\"\n+        pass\n+    \n+    @abstractmethod\n+    def get_margin_requirement(self, symbol: str | None = None) -> float:\n+        \"\"\"Get margin requirement ratio for positions.\n+        \n+        Args:\n+            symbol: Stock symbol to get specific margin requirement for. \n+                   If None, returns account default margin requirement.\n+        \n+        Returns:\n+            float: Margin requirement ratio (e.g., 0.5 for 50% margin requirement).\n+        \"\"\"\n+        pass\n\\ No newline at end of file", "blob_url": "https://github.com/virattt/ai-hedge-fund/blob/626e4d48a5c47b47f10d0a878b82471fc14bddf5/src%2Ftrading%2Fbroker_base.py", "raw_url": "https://github.com/virattt/ai-hedge-fund/raw/626e4d48a5c47b47f10d0a878b82471fc14bddf5/src%2Ftrading%2Fbroker_base.py", "contents_url": "https://api.github.com/repos/virattt/ai-hedge-fund/contents/src%2Ftrading%2Fbroker_base.py?ref=626e4d48a5c47b47f10d0a878b82471fc14bddf5"}, {"filename": "src/trading/trader.py", "status": "added", "additions": 680, "deletions": 0, "changes": 680, "patch": "@@ -0,0 +1,680 @@\n+\"\"\"Live trading implementation using the hedge fund AI agents.\"\"\"\n+\n+import sys\n+import time\n+import logging\n+from datetime import datetime, timedelta\n+from dateutil.relativedelta import relativedelta\n+from colorama import Fore, Style\n+\n+from .broker_base import BrokerBase, Position, Order\n+from .alpaca_broker import AlpacaBroker\n+from src.main import run_hedge_fund\n+from src.utils.progress import progress\n+\n+\n+logger = logging.getLogger(__name__)\n+\n+\n+class Trader:\n+    \"\"\"Live trading implementation using AI hedge fund decisions.\"\"\"\n+    \n+    def __init__(\n+        self,\n+        broker: BrokerBase,\n+        tickers: list[str],\n+        selected_analysts: list[str] = None,\n+        model_name: str = \"gpt-4o\",\n+        model_provider: str = \"OpenAI\",\n+        available_capital: float = None,  # Override available capital\n+        margin_requirement: float = None,  # Margin requirement for short positions\n+        dry_run: bool = False,\n+        ignore_market_hours: bool = False\n+    ):\n+        \"\"\"Initialize the trader.\n+        \n+        Args:\n+            broker: Broker implementation to use.\n+            tickers: List of tickers to trade.\n+            selected_analysts: List of analysts to use.\n+            model_name: LLM model name.\n+            model_provider: LLM provider.\n+            available_capital: Override available capital (uses broker cash if None).\n+            margin_requirement: Margin requirement ratio for short positions.\n+            dry_run: If True, log trades but don't execute them.\n+            ignore_market_hours: If True, run even when market is closed.\n+        \"\"\"\n+        self.broker = broker\n+        self.tickers = tickers\n+        self.selected_analysts = selected_analysts or []\n+        self.model_name = model_name\n+        self.model_provider = model_provider\n+        self.available_capital = available_capital\n+        self.margin_requirement = margin_requirement\n+        self.dry_run = dry_run\n+        self.ignore_market_hours = ignore_market_hours\n+        \n+        # Track our virtual portfolio for decision making\n+        self.virtual_portfolio = None\n+        self.last_sync_time = None\n+    \n+    def _map_order_to_action(self, order: Order, symbol: str) -> str:\n+        \"\"\"Map a broker order to our action type.\"\"\"\n+        if order.side == \"buy\":\n+            # Could be buy or cover - check if we have short positions\n+            current_pos = self.broker.get_position(symbol)\n+            if current_pos and current_pos.side == \"short\":\n+                return \"cover\"\n+            else:\n+                return \"buy\"\n+        elif order.side == \"sell\":\n+            # Could be sell or short - check if we have long positions\n+            current_pos = self.broker.get_position(symbol)\n+            if current_pos and current_pos.side == \"long\":\n+                return \"sell\"\n+            else:\n+                return \"short\"\n+        else:\n+            return \"unknown\"\n+    \n+    def _close_position_and_wait(self, symbol: str, position_type: str, position_size: float) -> Order:\n+        \"\"\"Close existing position and wait for fill.\n+        \n+        Args:\n+            symbol: Stock symbol\n+            position_type: 'long' or 'short'\n+            position_size: Number of shares to close\n+            \n+        Returns:\n+            Order: The close order\n+        \"\"\"\n+        if position_type == \"long\":\n+            action_name = \"close long\"\n+            order_side = \"sell\"\n+        else:  # short\n+            action_name = \"close short\"\n+            order_side = \"buy\"\n+        \n+        print(f\"{Fore.CYAN}Step 1: {action_name.title()} - {order_side} {position_size} shares{Style.RESET_ALL}\")\n+        close_order = self.broker.place_order(symbol, position_size, order_side)\n+        print(f\"{Fore.GREEN}Close order placed: {close_order.id}{Style.RESET_ALL}\")\n+        \n+        # Wait for close order to fill\n+        self._wait_for_order_fill(close_order.id, action_name)\n+        return close_order\n+    \n+    def _wait_for_order_fill(self, order_id: str, action_name: str) -> None:\n+        \"\"\"Wait for order to fill with timeout.\n+        \n+        Args:\n+            order_id: Order ID to monitor\n+            action_name: Human-readable action name for logging\n+        \"\"\"\n+        print(f\"{Fore.CYAN}Waiting for {action_name} order to fill...{Style.RESET_ALL}\")\n+        max_wait_time = 30  # seconds\n+        wait_time = 0\n+        while wait_time < max_wait_time:\n+            updated_order = self.broker.get_order(order_id)\n+            if updated_order and updated_order.status == \"filled\":\n+                print(f\"{Fore.GREEN}{action_name.title()} order filled successfully{Style.RESET_ALL}\")\n+                return\n+            time.sleep(2)\n+            wait_time += 2\n+        \n+        print(f\"{Fore.YELLOW}{action_name.title()} order still pending after {max_wait_time}s, proceeding anyway{Style.RESET_ALL}\")\n+    \n+    def _execute_position_transition(self, symbol: str, action: str, quantity: float, \n+                                   current_long: float, current_short: float) -> Order:\n+        \"\"\"Execute position transition with proper sequencing.\n+        \n+        Args:\n+            symbol: Stock symbol\n+            action: Target action (buy/sell/short/cover)\n+            quantity: Total quantity for the action\n+            current_long: Current long position size\n+            current_short: Current short position size\n+            \n+        Returns:\n+            Order: The final order executed\n+        \"\"\"\n+        if action == \"buy\" and current_short > 0:\n+            # Short -> Long transition\n+            print(f\"{Fore.CYAN}Detected short position of {current_short} shares, splitting buy order{Style.RESET_ALL}\")\n+            \n+            # Close short position\n+            cover_quantity = min(quantity, current_short)\n+            close_order = self._close_position_and_wait(symbol, \"short\", cover_quantity)\n+            \n+            # Buy remaining for long position\n+            remaining_quantity = quantity - cover_quantity\n+            if remaining_quantity > 0:\n+                print(f\"{Fore.CYAN}Step 2: Buying {remaining_quantity} additional shares for long position{Style.RESET_ALL}\")\n+                return self.broker.place_order(symbol, remaining_quantity, \"buy\")\n+            else:\n+                print(f\"{Fore.CYAN}Short position fully covered, no additional long position needed{Style.RESET_ALL}\")\n+                return close_order\n+                \n+        elif action == \"sell\" and current_long > 0 and quantity > current_long:\n+            # Long -> Short transition (selling more than owned)\n+            print(f\"{Fore.CYAN}Detected long position of {current_long} shares, splitting sell order{Style.RESET_ALL}\")\n+            \n+            # Close long position\n+            close_order = self._close_position_and_wait(symbol, \"long\", current_long)\n+            \n+            # Short sell remaining\n+            remaining_quantity = quantity - current_long\n+            print(f\"{Fore.CYAN}Step 2: Short selling {remaining_quantity} additional shares{Style.RESET_ALL}\")\n+            return self.broker.place_order(symbol, remaining_quantity, \"sell_short\")\n+            \n+        elif action == \"short\" and current_long > 0:\n+            # Long -> Short transition (close long first)\n+            print(f\"{Fore.CYAN}Detected long position of {current_long} shares, closing before short sale{Style.RESET_ALL}\")\n+            \n+            # Close long position\n+            self._close_position_and_wait(symbol, \"long\", current_long)\n+            \n+            # Short sell the requested quantity\n+            print(f\"{Fore.CYAN}Step 2: Short selling {quantity} shares{Style.RESET_ALL}\")\n+            return self.broker.place_order(symbol, quantity, \"sell_short\")\n+            \n+        elif action == \"cover\" and current_short > 0 and quantity > current_short:\n+            # Short -> Long transition (covering more than short)\n+            print(f\"{Fore.CYAN}Detected short position of {current_short} shares, splitting cover order{Style.RESET_ALL}\")\n+            \n+            # Cover short position\n+            self._close_position_and_wait(symbol, \"short\", current_short)\n+            \n+            # Buy remaining for long position\n+            remaining_quantity = quantity - current_short\n+            print(f\"{Fore.CYAN}Step 2: Buying {remaining_quantity} additional shares for long position{Style.RESET_ALL}\")\n+            return self.broker.place_order(symbol, remaining_quantity, \"buy\")\n+            \n+        else:\n+            # No position transition needed - execute normal order\n+            return self._execute_simple_order(symbol, action, quantity, current_long, current_short)\n+    \n+    def _execute_simple_order(self, symbol: str, action: str, quantity: float,\n+                            current_long: float, current_short: float) -> Order | None:\n+        \"\"\"Execute simple order without position transitions.\n+        \n+        Args:\n+            symbol: Stock symbol\n+            action: Trading action\n+            quantity: Number of shares\n+            current_long: Current long position\n+            current_short: Current short position\n+            \n+        Returns:\n+            Order or None if cannot execute\n+        \"\"\"\n+        if action == \"buy\":\n+            return self.broker.place_order(symbol, quantity, \"buy\")\n+        elif action == \"sell\":\n+            if current_long > 0:\n+                return self.broker.place_order(symbol, quantity, \"sell\")\n+            else:\n+                print(f\"{Fore.YELLOW}Cannot sell {symbol}: no long position{Style.RESET_ALL}\")\n+                return None\n+        elif action == \"short\":\n+            return self.broker.place_order(symbol, quantity, \"sell_short\")\n+        elif action == \"cover\":\n+            if current_short > 0:\n+                return self.broker.place_order(symbol, quantity, \"buy\")\n+            else:\n+                print(f\"{Fore.YELLOW}Cannot cover {symbol}: no short position{Style.RESET_ALL}\")\n+                return None\n+        else:\n+            print(f\"{Fore.RED}Unknown action: {action}{Style.RESET_ALL}\")\n+            return None\n+\n+    def _handle_hold_decision(self, symbol: str) -> Order | None:\n+        \"\"\"Handle AI decision to hold - cancel any pending orders.\"\"\"\n+        if self.dry_run:\n+            print(f\"{Fore.CYAN}DRY RUN: Would hold {symbol} (cancel any pending orders){Style.RESET_ALL}\")\n+            return None\n+        \n+        # Get pending orders and cancel them\n+        pending_orders = [order for order in self.broker.get_orders() \n+                         if order.symbol == symbol and order.status in [\"pending_new\", \"new\", \"accepted\"]]\n+        \n+        if pending_orders:\n+            print(f\"{Fore.CYAN}AI says hold {symbol}, canceling {len(pending_orders)} pending orders{Style.RESET_ALL}\")\n+            for order in pending_orders:\n+                action = self._map_order_to_action(order, symbol)\n+                print(f\"{Fore.YELLOW}Canceling pending {action} order for {order.quantity} shares{Style.RESET_ALL}\")\n+                if self.broker.cancel_order(order.id):\n+                    print(f\"{Fore.GREEN}Canceled order {order.id}{Style.RESET_ALL}\")\n+                else:\n+                    print(f\"{Fore.RED}Failed to cancel order {order.id}{Style.RESET_ALL}\")\n+        else:\n+            print(f\"{Fore.CYAN}Holding {symbol} (no pending orders to cancel){Style.RESET_ALL}\")\n+        \n+        return None\n+        \n+    def connect(self) -> bool:\n+        \"\"\"Connect to the broker.\"\"\"\n+        return self.broker.connect()\n+    \n+    def disconnect(self) -> None:\n+        \"\"\"Disconnect from the broker.\"\"\"\n+        self.broker.disconnect()\n+    \n+    def sync_portfolio(self) -> None:\n+        \"\"\"Sync virtual portfolio with actual broker positions.\"\"\"\n+        # Temporarily stop progress display to show debug output\n+        was_started = progress.started\n+        if was_started:\n+            progress.stop()\n+        \n+        try:\n+            # Ensure broker connection is active with retry\n+            max_retries = 3\n+            for attempt in range(max_retries):\n+                try:\n+                    if not self.broker._connected:\n+                        print(f\"{Fore.YELLOW}Reconnecting to broker (attempt {attempt + 1})...{Style.RESET_ALL}\")\n+                        self.broker.connect()\n+                    \n+                    account = self.broker.get_account()\n+                    positions = self.broker.get_positions()\n+                    pending_orders = self.broker.get_orders() if not self.dry_run else []\n+                    break  # Success, exit retry loop\n+                    \n+                except Exception as e:\n+                    if attempt < max_retries - 1:\n+                        print(f\"{Fore.YELLOW}Connection failed, retrying in 5 seconds... ({e}){Style.RESET_ALL}\")\n+                        time.sleep(5)\n+                        self.broker._connected = False  # Force reconnection\n+                    else:\n+                        raise  # Re-raise if all retries failed\n+            \n+            # Create virtual portfolio structure similar to backtester\n+            # Use limited capital if specified, but keep the account's margin capability\n+            actual_cash = account.cash\n+            limited_cash = self.available_capital if self.available_capital is not None else actual_cash\n+            \n+            # Calculate the fraction of available capital we're using\n+            capital_fraction = limited_cash / actual_cash if actual_cash > 0 else 1.0\n+            \n+            self.virtual_portfolio = {\n+                \"cash\": limited_cash,\n+                \"margin_requirement\": self.margin_requirement if self.margin_requirement is not None else self.broker.get_margin_requirement(),\n+                \"margin_used\": account.initial_margin * capital_fraction,  # Scale margin usage proportionally\n+                \"positions\": {},\n+                \"realized_gains\": {},\n+                \"pending_orders\": {}  # Track pending orders\n+            }\n+            \n+            # Initialize all tickers\n+            for ticker in self.tickers:\n+                self.virtual_portfolio[\"positions\"][ticker] = {\n+                    \"long\": 0,\n+                    \"short\": 0,\n+                    \"long_cost_basis\": 0.0,\n+                    \"short_cost_basis\": 0.0,\n+                    \"short_margin_used\": 0.0,\n+                }\n+                self.virtual_portfolio[\"realized_gains\"][ticker] = {\n+                    \"long\": 0.0,\n+                    \"short\": 0.0,\n+                }\n+                self.virtual_portfolio[\"pending_orders\"][ticker] = {\n+                    \"buy\": 0,\n+                    \"sell\": 0,\n+                    \"short\": 0,\n+                    \"cover\": 0,\n+                }\n+            \n+            # Update with actual positions\n+            print(f\"{Fore.YELLOW}DEBUG: Syncing {len(positions)} positions from broker{Style.RESET_ALL}\")\n+            for position in positions:\n+                print(f\"DEBUG: Position {position.symbol}: {position.side} {position.quantity} shares\")\n+                if position.symbol in self.virtual_portfolio[\"positions\"]:\n+                    if position.side == \"long\":\n+                        self.virtual_portfolio[\"positions\"][position.symbol][\"long\"] = position.quantity\n+                        self.virtual_portfolio[\"positions\"][position.symbol][\"long_cost_basis\"] = position.avg_entry_price\n+                        print(f\"DEBUG: Updated {position.symbol} long: {position.quantity} shares\")\n+                    else:  # short\n+                        self.virtual_portfolio[\"positions\"][position.symbol][\"short\"] = position.quantity\n+                        self.virtual_portfolio[\"positions\"][position.symbol][\"short_cost_basis\"] = position.avg_entry_price\n+                        print(f\"DEBUG: Updated {position.symbol} short: {position.quantity} shares\")\n+                else:\n+                    print(f\"DEBUG: Skipping {position.symbol} - not in tickers list\")\n+            \n+            # Debug: Show what the virtual portfolio looks like after sync\n+            print(f\"{Fore.YELLOW}DEBUG: Virtual portfolio positions after sync:{Style.RESET_ALL}\")\n+            for ticker in self.tickers:\n+                pos = self.virtual_portfolio[\"positions\"][ticker]\n+                print(f\"  {ticker}: long={pos['long']}, short={pos['short']}\")\n+            \n+            # Track pending orders\n+            for order in pending_orders:\n+                if order.symbol in self.virtual_portfolio[\"pending_orders\"] and order.status in [\"pending_new\", \"new\", \"accepted\"]:\n+                    # Map order sides to our action types\n+                    if order.side == \"buy\":\n+                        action = \"buy\"\n+                    elif order.side == \"sell\":\n+                        # Need to determine if this is a sell or cover based on current position\n+                        current_pos = self.virtual_portfolio[\"positions\"].get(order.symbol, {})\n+                        if current_pos.get(\"short\", 0) > 0:\n+                            action = \"cover\"\n+                        else:\n+                            action = \"sell\"\n+                    else:\n+                        action = \"short\"  # sell_short\n+                    \n+                    self.virtual_portfolio[\"pending_orders\"][order.symbol][action] += order.quantity\n+                    print(f\"{Fore.CYAN}Found pending {action} order for {order.symbol}: {order.quantity} shares{Style.RESET_ALL}\")\n+            \n+            self.last_sync_time = datetime.now()\n+            print(f\"{Fore.GREEN}Portfolio synced with broker{Style.RESET_ALL}\")\n+            \n+        except Exception as e:\n+            logger.error(f\"Failed to sync portfolio: {e}\")\n+            print(f\"{Fore.RED}Failed to sync portfolio: {e}{Style.RESET_ALL}\")\n+            raise\n+        finally:\n+            # Restart progress display if it was running\n+            if was_started:\n+                progress.start()\n+    \n+    def get_hedge_fund_decisions(self) -> dict:\n+        \"\"\"Get trading decisions from the AI hedge fund.\"\"\"\n+        if not self.virtual_portfolio:\n+            raise RuntimeError(\"Portfolio not synced. Call sync_portfolio() first.\")\n+        \n+        # Use 30-day lookback period\n+        end_date = datetime.now().strftime(\"%Y-%m-%d\")\n+        start_date = (datetime.now() - timedelta(days=30)).strftime(\"%Y-%m-%d\")\n+        \n+        print(f\"{Fore.CYAN}Getting AI hedge fund decisions...{Style.RESET_ALL}\")\n+        \n+        try:\n+            result = run_hedge_fund(\n+                tickers=self.tickers,\n+                start_date=start_date,\n+                end_date=end_date,\n+                portfolio=self.virtual_portfolio,\n+                show_reasoning=False,\n+                selected_analysts=self.selected_analysts,\n+                model_name=self.model_name,\n+                model_provider=self.model_provider,\n+            )\n+            \n+            return result\n+            \n+        except Exception as e:\n+            logger.error(f\"Failed to get hedge fund decisions: {e}\")\n+            print(f\"{Fore.RED}Failed to get hedge fund decisions: {e}{Style.RESET_ALL}\")\n+            raise\n+    \n+    def calculate_position_size(self, symbol: str, decision: dict) -> float:\n+        \"\"\"Get position size from AI decision (Risk Management Agent handles sizing).\"\"\"\n+        if not self.virtual_portfolio:\n+            raise RuntimeError(\"Portfolio not synced\")\n+        \n+        # Trust the Risk Management Agent - just return what it calculated\n+        requested_quantity = decision.get(\"quantity\", 0)\n+        return int(requested_quantity) if requested_quantity > 0 else 0\n+    \n+    def execute_trade(self, symbol: str, decision: dict) -> Order | None:\n+        \"\"\"Execute a single trade based on AI decision.\"\"\"\n+        action = decision.get(\"action\", \"hold\")\n+        \n+        if action == \"hold\":\n+            return self._handle_hold_decision(symbol)\n+        \n+        # Calculate position size\n+        quantity = self.calculate_position_size(symbol, decision)\n+        if quantity <= 0:\n+            print(f\"{Fore.YELLOW}Skipping {symbol}: quantity too small{Style.RESET_ALL}\")\n+            return None\n+        \n+        # Check for existing pending orders and handle them\n+        if not self.dry_run:\n+            existing_orders = [order for order in self.broker.get_orders() \n+                             if order.symbol == symbol and order.status in [\"pending_new\", \"new\", \"accepted\"]]\n+            \n+            for existing_order in existing_orders:\n+                # Determine the action of the existing order\n+                existing_action = self._map_order_to_action(existing_order, symbol)\n+                \n+                # If same action and same quantity, skip\n+                if existing_action == action and existing_order.quantity == quantity:\n+                    print(f\"{Fore.CYAN}Skipping {symbol}: Identical {action} order for {quantity} shares already pending{Style.RESET_ALL}\")\n+                    return None\n+                \n+                # Different action or quantity - cancel the existing order\n+                print(f\"{Fore.YELLOW}Canceling existing {existing_action} order for {existing_order.quantity} shares to place new {action} order for {quantity} shares{Style.RESET_ALL}\")\n+                if self.broker.cancel_order(existing_order.id):\n+                    print(f\"{Fore.GREEN}Canceled order {existing_order.id}{Style.RESET_ALL}\")\n+                else:\n+                    print(f\"{Fore.RED}Failed to cancel order {existing_order.id}{Style.RESET_ALL}\")\n+        \n+        # Get current position\n+        current_position = self.broker.get_position(symbol)\n+        current_long = current_position.quantity if current_position and current_position.side == \"long\" else 0\n+        current_short = current_position.quantity if current_position and current_position.side == \"short\" else 0\n+        \n+        print(f\"{Fore.CYAN}Executing {action} {quantity} shares of {symbol}{Style.RESET_ALL}\")\n+        \n+        if self.dry_run:\n+            print(f\"{Fore.YELLOW}DRY RUN: Would {action} {quantity} shares of {symbol} at current price{Style.RESET_ALL}\")\n+            # Create a mock order for dry run\n+            return Order(\n+                id=f\"DRY_RUN_{symbol}_{action}_{int(time.time())}\",\n+                symbol=symbol,\n+                quantity=quantity,\n+                side=action,\n+                order_type=\"market\",\n+                status=\"filled\",\n+                filled_price=0.0,  # Would need current price in real scenario\n+                filled_quantity=quantity\n+            )\n+        \n+        try:\n+            # Double-check dry run protection\n+            if self.dry_run:\n+                print(f\"{Fore.RED}ERROR: Attempted to place real order in dry-run mode! This should not happen.{Style.RESET_ALL}\")\n+                return None\n+            \n+            # Execute order with smart position transition handling\n+            order = self._execute_position_transition(symbol, action, quantity, current_long, current_short)\n+            \n+            if order:\n+                print(f\"{Fore.GREEN}Order placed: {order.id} - {action} {order.quantity} {symbol}{Style.RESET_ALL}\")\n+            return order\n+            \n+        except Exception as e:\n+            logger.error(f\"Failed to execute trade for {symbol}: {e}\")\n+            print(f\"{Fore.RED}Failed to execute trade for {symbol}: {e}{Style.RESET_ALL}\")\n+            return None\n+    \n+    def run_trading_session(self) -> None:\n+        \"\"\"Run a single trading session.\"\"\"\n+        print(f\"{Fore.BLUE}{'='*50}\")\n+        print(f\"Starting trading session at {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\")\n+        print(f\"{'='*50}{Style.RESET_ALL}\")\n+        \n+        if self.dry_run:\n+            print(f\"{Fore.YELLOW}\ud83d\udd04 DRY RUN MODE - No real trades will be executed{Style.RESET_ALL}\")\n+        \n+        try:\n+            # Check if market is open (unless ignoring market hours)\n+            if not self.ignore_market_hours and not self.broker.is_market_open():\n+                print(f\"{Fore.YELLOW}Market is closed. Skipping trading session.{Style.RESET_ALL}\")\n+                print(f\"{Fore.CYAN}Use --ignore-market-hours to run anyway{Style.RESET_ALL}\")\n+                return\n+            elif self.ignore_market_hours and not self.broker.is_market_open():\n+                print(f\"{Fore.YELLOW}Market is closed, but ignoring market hours as requested{Style.RESET_ALL}\")\n+            \n+            # Sync portfolio with broker\n+            print(f\"{Fore.CYAN}DEBUG: About to sync portfolio...{Style.RESET_ALL}\")\n+            self.sync_portfolio()\n+            print(f\"{Fore.CYAN}DEBUG: Portfolio sync completed{Style.RESET_ALL}\")\n+            \n+            # Get AI decisions\n+            result = self.get_hedge_fund_decisions()\n+            decisions = result.get(\"decisions\", {})\n+            analyst_signals = result.get(\"analyst_signals\", {})\n+            \n+            # Display decisions\n+            print(f\"\\n{Fore.WHITE}{Style.BRIGHT}AI HEDGE FUND DECISIONS:{Style.RESET_ALL}\")\n+            for ticker, decision in decisions.items():\n+                action = decision.get(\"action\", \"hold\")\n+                quantity = decision.get(\"quantity\", 0)\n+                reasoning = decision.get(\"reasoning\", \"No reasoning provided\")\n+                \n+                color = {\n+                    \"buy\": Fore.GREEN,\n+                    \"sell\": Fore.RED,\n+                    \"short\": Fore.MAGENTA,\n+                    \"cover\": Fore.CYAN,\n+                    \"hold\": Fore.YELLOW\n+                }.get(action, Fore.WHITE)\n+                \n+                print(f\"{color}{ticker}: {action.upper()} {quantity} shares{Style.RESET_ALL}\")\n+                print(f\"  Reasoning: {reasoning[:100]}...\")\n+            \n+            # Execute trades\n+            executed_orders = []\n+            print(f\"\\n{Fore.WHITE}{Style.BRIGHT}EXECUTING TRADES:{Style.RESET_ALL}\")\n+            \n+            for ticker, decision in decisions.items():\n+                order = self.execute_trade(ticker, decision)\n+                if order:\n+                    executed_orders.append(order)\n+            \n+            # Wait for orders to fill (basic implementation)\n+            if executed_orders and not self.dry_run:\n+                print(f\"\\n{Fore.CYAN}Monitoring order execution...{Style.RESET_ALL}\")\n+                time.sleep(5)  # Wait a bit for market orders to fill\n+                \n+                for order in executed_orders:\n+                    updated_order = self.broker.get_order(order.id)\n+                    if updated_order:\n+                        status_color = Fore.GREEN if updated_order.status == \"filled\" else Fore.YELLOW\n+                        print(f\"{status_color}Order {order.id}: {updated_order.status}{Style.RESET_ALL}\")\n+            \n+            print(f\"\\n{Fore.GREEN}Trading session completed{Style.RESET_ALL}\")\n+            sys.stdout.flush()\n+            \n+        except Exception as e:\n+            logger.error(f\"Trading session failed: {e}\")\n+            print(f\"{Fore.RED}Trading session failed: {e}{Style.RESET_ALL}\")\n+    \n+    def run_continuous_trading(self, interval_minutes: int = 60) -> None:\n+        \"\"\"Run continuous trading with specified interval.\"\"\"\n+        print(f\"{Fore.BLUE}Starting continuous trading (interval: {interval_minutes} minutes){Style.RESET_ALL}\")\n+        \n+        try:\n+            while True:\n+                self.run_trading_session()\n+                \n+                print(f\"\\n{Fore.CYAN}Waiting {interval_minutes} minutes until next session...{Style.RESET_ALL}\")\n+                time.sleep(interval_minutes * 60)\n+                \n+        except KeyboardInterrupt:\n+            print(f\"\\n{Fore.YELLOW}Trading stopped by user{Style.RESET_ALL}\")\n+        except Exception as e:\n+            logger.error(f\"Continuous trading failed: {e}\")\n+            print(f\"{Fore.RED}Continuous trading failed: {e}{Style.RESET_ALL}\")\n+    \n+    def print_portfolio_summary(self) -> None:\n+        \"\"\"Print current portfolio summary.\"\"\"\n+        try:\n+            account = self.broker.get_account()\n+            positions = self.broker.get_positions()\n+            pending_orders = self.broker.get_orders(status=\"pending_new\") if not self.dry_run else []\n+            open_orders = self.broker.get_orders() if not self.dry_run else []\n+            \n+            print(f\"\\n{Fore.WHITE}{Style.BRIGHT}PORTFOLIO SUMMARY:{Style.RESET_ALL}\")\n+            print(f\"Portfolio Value: ${account.portfolio_value:,.2f}\")\n+            print(f\"Cash: ${account.cash:,.2f}\")\n+            print(f\"Buying Power: ${account.buying_power:,.2f}\")\n+            print(f\"Day Trade Count: {account.day_trade_count}\")\n+            \n+            if positions:\n+                print(f\"\\n{Fore.WHITE}{Style.BRIGHT}POSITIONS:{Style.RESET_ALL}\")\n+                for pos in positions:\n+                    color = Fore.GREEN if pos.unrealized_pnl >= 0 else Fore.RED\n+                    print(f\"{pos.symbol}: {pos.side} {pos.quantity:,.0f} shares @ ${pos.avg_entry_price:.2f}\")\n+                    print(f\"  Market Value: ${pos.market_value:,.2f}\")\n+                    print(f\"  {color}Unrealized P&L: ${pos.unrealized_pnl:,.2f}{Style.RESET_ALL}\")\n+            else:\n+                print(f\"\\n{Fore.YELLOW}No open positions{Style.RESET_ALL}\")\n+            \n+            # Show pending/open orders\n+            if open_orders:\n+                print(f\"\\n{Fore.WHITE}{Style.BRIGHT}ORDERS:{Style.RESET_ALL}\")\n+                for order in open_orders:\n+                    status_color = {\n+                        \"pending_new\": Fore.YELLOW,\n+                        \"new\": Fore.CYAN,\n+                        \"partially_filled\": Fore.BLUE,\n+                        \"filled\": Fore.GREEN,\n+                        \"done_for_day\": Fore.MAGENTA,\n+                        \"canceled\": Fore.RED,\n+                        \"expired\": Fore.RED,\n+                        \"replaced\": Fore.YELLOW,\n+                        \"pending_cancel\": Fore.YELLOW,\n+                        \"pending_replace\": Fore.YELLOW,\n+                        \"accepted\": Fore.CYAN,\n+                        \"accepted_for_bidding\": Fore.CYAN,\n+                        \"stopped\": Fore.RED,\n+                        \"rejected\": Fore.RED,\n+                        \"suspended\": Fore.RED\n+                    }.get(order.status, Fore.WHITE)\n+                    \n+                    print(f\"{order.symbol}: {status_color}{order.status.upper()}{Style.RESET_ALL} - {order.side} {order.quantity} @ {order.order_type}\")\n+                    print(f\"  Order ID: {order.id}\")\n+                    if order.submitted_at:\n+                        print(f\"  Submitted: {order.submitted_at.strftime('%Y-%m-%d %H:%M:%S')}\")\n+                    if order.filled_quantity and order.filled_quantity > 0:\n+                        print(f\"  Filled: {order.filled_quantity}/{order.quantity} @ ${order.filled_price:.2f}\")\n+            else:\n+                print(f\"\\n{Fore.YELLOW}No pending orders{Style.RESET_ALL}\")\n+                \n+        except Exception as e:\n+            logger.error(f\"Failed to get portfolio summary: {e}\")\n+            print(f\"{Fore.RED}Failed to get portfolio summary: {e}{Style.RESET_ALL}\")\n+\n+\n+def create_trader(\n+    tickers: list[str],\n+    selected_analysts: list[str] = None,\n+    model_name: str = \"gpt-4o\",\n+    model_provider: str = \"OpenAI\",\n+    available_capital: float = None,\n+    margin_requirement: float = None,\n+    dry_run: bool = False,\n+    ignore_market_hours: bool = False\n+) -> Trader:\n+    \"\"\"Create a configured trader instance.\n+    \n+    Args:\n+        tickers: List of tickers to trade.\n+        selected_analysts: List of analysts to use.\n+        model_name: LLM model name.\n+        model_provider: LLM provider.\n+        available_capital: Override available capital (uses broker cash if None).\n+        margin_requirement: Margin requirement ratio for short positions.\n+        dry_run: If True, log trades but don't execute them.\n+        ignore_market_hours: If True, run even when market is closed.\n+        \n+    Returns:\n+        Trader: Configured trader instance.\n+    \"\"\"\n+    broker = AlpacaBroker()  # Will read ALPACA_PAPER from environment\n+    \n+    return Trader(\n+        broker=broker,\n+        tickers=tickers,\n+        selected_analysts=selected_analysts,\n+        model_name=model_name,\n+        model_provider=model_provider,\n+        available_capital=available_capital,\n+        margin_requirement=margin_requirement,\n+        dry_run=dry_run,\n+        ignore_market_hours=ignore_market_hours\n+    )\n\\ No newline at end of file", "blob_url": "https://github.com/virattt/ai-hedge-fund/blob/626e4d48a5c47b47f10d0a878b82471fc14bddf5/src%2Ftrading%2Ftrader.py", "raw_url": "https://github.com/virattt/ai-hedge-fund/raw/626e4d48a5c47b47f10d0a878b82471fc14bddf5/src%2Ftrading%2Ftrader.py", "contents_url": "https://api.github.com/repos/virattt/ai-hedge-fund/contents/src%2Ftrading%2Ftrader.py?ref=626e4d48a5c47b47f10d0a878b82471fc14bddf5"}], "commits_data": [{"sha": "0242e648022bd84db9289a443382cd32e5d7b123", "message": "feat: added alpaca trading", "author": "Alexander Malysh", "date": "2025-06-27 09:42:38+00:00", "url": "https://github.com/virattt/ai-hedge-fund/commit/0242e648022bd84db9289a443382cd32e5d7b123"}, {"sha": "ae5191b52a197f45d8097cb5035380867a196a0e", "message": "Merge branch 'main' into alpaca-trading", "author": "Alexander Malysh", "date": "2025-06-27 10:17:19+00:00", "url": "https://github.com/virattt/ai-hedge-fund/commit/ae5191b52a197f45d8097cb5035380867a196a0e"}, {"sha": "fafeaa45a55b033c5d89c95f63914c05d54a4151", "message": "fix: added missing alpaca-py package", "author": "Alexander Malysh", "date": "2025-06-27 10:46:33+00:00", "url": "https://github.com/virattt/ai-hedge-fund/commit/fafeaa45a55b033c5d89c95f63914c05d54a4151"}, {"sha": "c45852f8db23977b253200fd754e66936da7cc0f", "message": "fix: added missing ALPACA env vars", "author": "Alexander Malysh", "date": "2025-06-27 14:36:51+00:00", "url": "https://github.com/virattt/ai-hedge-fund/commit/c45852f8db23977b253200fd754e66936da7cc0f"}, {"sha": "1b6e7a3c3209c1e882f7ee6ec73b919c48252146", "message": "fix: Handle transition from short to long position", "author": "Alexander Malysh", "date": "2025-06-29 10:34:14+00:00", "url": "https://github.com/virattt/ai-hedge-fund/commit/1b6e7a3c3209c1e882f7ee6ec73b919c48252146"}, {"sha": "626e4d48a5c47b47f10d0a878b82471fc14bddf5", "message": "fix: fixed transitions short -> long, long -> short", "author": "Alexander Malysh", "date": "2025-06-30 13:45:24+00:00", "url": "https://github.com/virattt/ai-hedge-fund/commit/626e4d48a5c47b47f10d0a878b82471fc14bddf5"}], "reviews": [], "html_url": "https://github.com/virattt/ai-hedge-fund/pull/376", "diff_url": "https://github.com/virattt/ai-hedge-fund/pull/376.diff", "patch_url": "https://github.com/virattt/ai-hedge-fund/pull/376.patch"}, "analysis_duration": 0.0009889602661132812, "total_issues": 0}, "error": null}, {"id": "3ccfb6d9-b267-4b6b-a737-7a9b30945474", "type": "security", "code_snippets": [{"file_path": "auth.py", "content": "def login(username, password):\n    admin_pass = 'superSecret123!'\n    if password == admin_pass:\n        return True\n    return False\n\ndef get_user_data(user_id):\n    query = f\"SELECT * FROM users WHERE id = {user_id}\"\n    return execute_query(query)", "language": "python"}, {"file_path": "upload.py", "content": "def save_uploaded_file(file):\n    filename = file.filename\n    file.save('/uploads/' + filename)\n    return filename\n\ndef process_xml(data):\n    return eval(data)", "language": "python"}], "status": "completed", "created_at": "2025-07-27T13:09:38.336077", "started_at": "2025-07-27T13:09:38.876684", "completed_at": "2025-07-27T13:09:47.011440", "results": {"security_issues": [{"type": "Hardcoded passwords/secrets/API keys", "severity": "critical", "description": "The administrator password 'superSecret123!' is hardcoded in the `login` function.  This is a critical vulnerability as it allows anyone with access to the code to gain administrator privileges.", "line": 2, "file": "auth.py", "confidence": 100.0}, {"type": "SQL injection", "severity": "critical", "description": "The `get_user_data` function is vulnerable to SQL injection.  User-supplied input (`user_id`) is directly incorporated into the SQL query without proper sanitization or parameterization.  A malicious actor could inject arbitrary SQL code to access or modify the database.", "line": 7, "file": "auth.py", "confidence": 100.0}, {"type": "Path traversal", "severity": "critical", "description": "The code directly uses the filename from the uploaded file to construct the file path.  An attacker could manipulate the filename to traverse directories and overwrite arbitrary files on the server. For example, an attacker could upload a file named '../etc/passwd' to read the system password file.", "line": 3, "file": "upload.py", "confidence": 100.0}, {"type": "Insecure file operations", "severity": "high", "description": "The code lacks proper file validation and sanitization before saving the uploaded file. This could lead to various issues, including the path traversal vulnerability mentioned above, as well as the potential for uploading malicious files (e.g., executables) that could be executed on the server.", "line": 3, "file": "upload.py", "confidence": 95.0}, {"type": "Command injection", "severity": "critical", "description": "While not directly apparent in this snippet, the lack of input sanitization when handling filenames opens the door for command injection if the server's file system or other processes interact with the uploaded files in a way that allows command execution (e.g., through shell metacharacters in the filename).", "line": 3, "file": "upload.py", "confidence": 80.0}, {"type": "Missing input validation", "severity": "high", "description": "The code does not validate the file type or content before saving it.  This allows attackers to upload malicious files, such as scripts or executables, that could compromise the server.", "line": 3, "file": "upload.py", "confidence": 90.0}, {"type": "Insecure deserialization", "severity": "critical", "description": "The `eval()` function in `process_xml` is extremely dangerous.  It executes arbitrary code contained within the XML data, allowing attackers to execute malicious code on the server if they can control the XML input.", "line": 6, "file": "upload.py", "confidence": 100.0}], "total_issues": 7, "severity_breakdown": {"critical": 5, "high": 2, "medium": 0, "low": 0}, "decision": {"decision": "BLOCK", "risk_level": "critical", "summary": "Found 5 critical security issues", "recommendations": ["Fix critical security issues immediately", "Review security best practices"]}, "errors": [], "analysis_method": "agent_system"}, "error": null}, {"id": "3ccfb6d9-b267-4b6b-a737-7a9b30945474", "type": "security", "code_snippets": [{"file_path": "auth.py", "content": "def login(username, password):\n    admin_pass = 'superSecret123!'\n    if password == admin_pass:\n        return True\n    return False\n\ndef get_user_data(user_id):\n    query = f\"SELECT * FROM users WHERE id = {user_id}\"\n    return execute_query(query)", "language": "python"}, {"file_path": "upload.py", "content": "def save_uploaded_file(file):\n    filename = file.filename\n    file.save('/uploads/' + filename)\n    return filename\n\ndef process_xml(data):\n    return eval(data)", "language": "python"}], "status": "completed", "created_at": "2025-07-27T13:09:38.336077", "started_at": "2025-07-27T13:09:38.876684", "completed_at": "2025-07-27T13:09:47.889291", "results": {"security_issues": [{"type": "Hardcoded passwords/secrets/API keys", "severity": "critical", "description": "The administrator password 'superSecret123!' is hardcoded in the `login` function.  This is a major security risk as anyone with access to the code can obtain the password.", "line": 2, "file": "auth.py", "confidence": 100.0}, {"type": "SQL injection", "severity": "critical", "description": "The `get_user_data` function is vulnerable to SQL injection.  User-supplied input (`user_id`) is directly incorporated into the SQL query without proper sanitization or parameterization.  A malicious actor could inject arbitrary SQL code to access or modify the database.", "line": 7, "file": "auth.py", "confidence": 100.0}, {"type": "Authentication bypass", "severity": "critical", "description": "The authentication mechanism is extremely weak.  Only a single hardcoded password protects the entire system. There's no salting or hashing of passwords, making it trivial to compromise.", "line": 2, "file": "auth.py", "confidence": 100.0}, {"type": "Path traversal", "severity": "critical", "description": "The code directly uses the filename from the uploaded file to construct the file path.  An attacker could manipulate the filename to traverse directories and overwrite arbitrary files on the system. For example, an attacker could upload a file named '../etc/passwd' to read the system's password file.", "line": 3, "file": "upload.py", "confidence": 100.0}, {"type": "Insecure file operations", "severity": "high", "description": "The code lacks proper file validation and sanitization before saving the uploaded file. This could lead to various issues, including the path traversal vulnerability mentioned above, as well as the potential for uploading malicious files (e.g., executables) that could be executed on the server.", "line": 3, "file": "upload.py", "confidence": 95.0}, {"type": "Command injection", "severity": "critical", "description": "While not directly apparent in this code snippet, the lack of input sanitization when handling filenames opens the door for command injection if the server's file system or other processes interact with the uploaded files in a way that incorporates the filename into a shell command.", "line": 3, "file": "upload.py", "confidence": 80.0}, {"type": "Missing input validation", "severity": "high", "description": "The code does not validate the file type or content before saving it.  This allows attackers to upload malicious files (e.g., scripts, executables) that could compromise the server.", "line": 3, "file": "upload.py", "confidence": 90.0}, {"type": "Insecure deserialization", "severity": "critical", "description": "The `eval()` function in `process_xml` is extremely dangerous.  It executes arbitrary code contained within the XML data, allowing attackers to execute arbitrary commands on the server if they can control the XML input.", "line": 6, "file": "upload.py", "confidence": 100.0}], "total_issues": 8, "severity_breakdown": {"critical": 6, "high": 2, "medium": 0, "low": 0}, "decision": {"decision": "BLOCK", "risk_level": "critical", "summary": "Found 6 critical security issues", "recommendations": ["Fix critical security issues immediately", "Review security best practices"]}, "errors": [], "analysis_method": "agent_system"}, "error": null}, {"id": "4e8163ed-0411-499e-bf5e-3c58e640d393", "type": "pr", "pr_url": "https://github.com/virattt/ai-hedge-fund/pull/306", "status": "completed", "mode": "deep", "created_at": "2025-07-27T13:17:26.709920", "started_at": "2025-07-27T13:17:27.600812", "completed_at": "2025-07-27T13:17:49.172912", "results": {"error": "Error during PR analysis: Cannot copy out of meta tensor; no data! Please use torch.nn.Module.to_empty() instead of torch.nn.Module.to() when moving module from meta to a different device.", "errors": ["Error during PR analysis: Cannot copy out of meta tensor; no data! Please use torch.nn.Module.to_empty() instead of torch.nn.Module.to() when moving module from meta to a different device."]}, "error": null}, {"id": "4e8163ed-0411-499e-bf5e-3c58e640d393", "type": "pr", "pr_url": "https://github.com/virattt/ai-hedge-fund/pull/306", "status": "completed", "mode": "deep", "created_at": "2025-07-27T13:17:26.709920", "started_at": "2025-07-27T13:17:27.600812", "completed_at": "2025-07-27T13:17:49.812745", "results": {"security_issues": [], "quality_issues": [], "logic_issues": [], "decision": {}, "pr_details": {"id": 2536944201, "number": 306, "title": "Argument --llm argument to main.py too", "body": "To specify the LLM provider and model, use the `--llm` argument in the format `Provider:Model` (e.g., `Openai:gpt-4`, `Ollama:llama3`). This will override the interactive model selection.\r\n\r\n```bash\r\n# With Poetry:\r\npoetry run python src/main.py --ticker AAPL,MSFT,NVDA --llm Openai:gpt-4\r\npoetry run python src/main.py --ticker AAPL,MSFT,NVDA --llm Ollama:llama3\r\n\r\n# With Docker (on Linux/Mac):\r\n./run.sh --ticker AAPL,MSFT,NVDA --llm Openai:gpt-4\r\n\r\n# With Docker (on Windows):\r\nrun.bat --ticker AAPL,MSFT,NVDA --llm Openai:gpt-4\r\n```\r\n\r\nIf you do not specify `--llm`, you will be prompted to select a provider and model interactively.\r\n\r\n\r\nREADME also updated", "state": "open", "created_at": "2025-05-22 11:43:33+00:00", "updated_at": "2025-05-22 11:44:42+00:00", "closed_at": null, "merged_at": null, "merge_commit_sha": null, "author": "Romamo", "assignees": [], "reviewers": [], "labels": [], "milestone": null, "base_branch": "main", "head_branch": "argument-llm-main", "base_sha": "ab8ce114e78e967948a3a48fe1206becc540e232", "head_sha": "60dc3133c3c89158a2c9fb7c80cd4f106dfb5324", "mergeable": false, "mergeable_state": "dirty", "merged": false, "comments": 0, "review_comments": 0, "commits": 5, "additions": 64, "deletions": 18, "changed_files": 3, "files": [{"filename": "README.md", "status": "modified", "additions": 17, "deletions": 13, "changes": 30, "patch": "@@ -147,6 +147,22 @@ run.bat --ticker AAPL,MSFT,NVDA main\n **Example Output:**\n <img width=\"992\" alt=\"Screenshot 2025-01-06 at 5 50 17 PM\" src=\"https://github.com/user-attachments/assets/e8ca04bf-9989-4a7d-a8b4-34e04666663b\" />\n \n+To specify the LLM provider and model, use the `--llm` argument in the format `Provider:Model` (e.g., `Openai:gpt-4`, `Ollama:llama3`). This will override the interactive model selection.\n+\n+```bash\n+# With Poetry:\n+poetry run python src/main.py --ticker AAPL,MSFT,NVDA --llm Openai:gpt-4\n+poetry run python src/main.py --ticker AAPL,MSFT,NVDA --llm Ollama:llama3\n+\n+# With Docker (on Linux/Mac):\n+./run.sh --ticker AAPL,MSFT,NVDA --llm Openai:gpt-4\n+\n+# With Docker (on Windows):\n+run.bat --ticker AAPL,MSFT,NVDA --llm Openai:gpt-4\n+```\n+\n+If you do not specify `--llm`, you will be prompted to select a provider and model interactively.\n+\n You can also specify a `--ollama` flag to run the AI hedge fund using local LLMs.\n \n ```bash\n@@ -205,6 +221,7 @@ run.bat --ticker AAPL,MSFT,NVDA backtest\n **Example Output:**\n <img width=\"941\" alt=\"Screenshot 2025-01-06 at 5 47 52 PM\" src=\"https://github.com/user-attachments/assets/00e794ea-8628-44e6-9a84-8f8a31ad3b47\" />\n \n+To specify the LLM provider and model, use the `--llm` argument the same way as for the Hedge Fund.\n \n You can optionally specify the start and end dates to backtest over a specific time period.\n \n@@ -219,19 +236,6 @@ poetry run python src/backtester.py --ticker AAPL,MSFT,NVDA --start-date 2024-01\n run.bat --ticker AAPL,MSFT,NVDA --start-date 2024-01-01 --end-date 2024-03-01 backtest\n ```\n \n-You can also specify a `--ollama` flag to run the backtester using local LLMs.\n-```bash\n-# With Poetry:\n-poetry run python src/backtester.py --ticker AAPL,MSFT,NVDA --ollama\n-\n-# With Docker (on Linux/Mac):\n-./run.sh --ticker AAPL,MSFT,NVDA --ollama backtest\n-\n-# With Docker (on Windows):\n-run.bat --ticker AAPL,MSFT,NVDA --ollama backtest\n-```\n-\n-\n ## Project Structure \n ```\n ai-hedge-fund/", "blob_url": "https://github.com/virattt/ai-hedge-fund/blob/60dc3133c3c89158a2c9fb7c80cd4f106dfb5324/README.md", "raw_url": "https://github.com/virattt/ai-hedge-fund/raw/60dc3133c3c89158a2c9fb7c80cd4f106dfb5324/README.md", "contents_url": "https://api.github.com/repos/virattt/ai-hedge-fund/contents/README.md?ref=60dc3133c3c89158a2c9fb7c80cd4f106dfb5324"}, {"filename": "src/backtester.py", "status": "modified", "additions": 23, "deletions": 2, "changes": 25, "patch": "@@ -651,6 +651,12 @@ def analyze_performance(self):\n         action=\"store_true\",\n         help=\"Use all available analysts (overrides --analysts)\",\n     )\n+    parser.add_argument(\n+        \"--llm\",\n+        type=str,\n+        default=None,\n+        help=\"Specify LLM as provider:model (e.g., Openai:gpt-4, Ollama:llama3) to override interactive selection\",\n+    )\n     parser.add_argument(\"--ollama\", action=\"store_true\", help=\"Use Ollama for local LLM inference\")\n \n     args = parser.parse_args()\n@@ -687,11 +693,26 @@ def analyze_performance(self):\n             selected_analysts = choices\n             print(f\"\\nSelected analysts: \" f\"{', '.join(Fore.GREEN + choice.title().replace('_', ' ') + Style.RESET_ALL for choice in choices)}\")\n \n-    # Select LLM model based on whether Ollama is being used\n+    # Select LLM model based on argument or interactive selection\n     model_name = \"\"\n     model_provider = None\n \n-    if args.ollama:\n+    # If command-line LLM is provided, use it directly\n+    if args.llm is not None:\n+        if ':' not in args.llm:\n+            print(f\"{Fore.RED}--llm argument must be in provider:model format (e.g., openai:gpt-4){Style.RESET_ALL}\")\n+            sys.exit(1)\n+        model_provider, model_name = args.llm.split(':', 1)\n+        if model_provider.lower() == ModelProvider.OLLAMA.value:\n+            # For Ollama, ensure model is available\n+            if not ensure_ollama_and_model(model_name):\n+                print(f\"{Fore.RED}Cannot proceed without Ollama and the selected model.{Style.RESET_ALL}\")\n+                sys.exit(1)\n+            print(f\"\\nSelected {Fore.CYAN}Ollama{Style.RESET_ALL} model: {Fore.GREEN + Style.BRIGHT}{model_name}{Style.RESET_ALL}\\n\")\n+            model_provider = ModelProvider.OLLAMA.value\n+        else:\n+            print(f\"\\nSelected {Fore.CYAN}{model_provider}{Style.RESET_ALL} model: {Fore.GREEN + Style.BRIGHT}{model_name}{Style.RESET_ALL}\\n\")\n+    elif args.ollama:\n         print(f\"{Fore.CYAN}Using Ollama for local LLM inference.{Style.RESET_ALL}\")\n \n         # Select from Ollama-specific models", "blob_url": "https://github.com/virattt/ai-hedge-fund/blob/60dc3133c3c89158a2c9fb7c80cd4f106dfb5324/src%2Fbacktester.py", "raw_url": "https://github.com/virattt/ai-hedge-fund/raw/60dc3133c3c89158a2c9fb7c80cd4f106dfb5324/src%2Fbacktester.py", "contents_url": "https://api.github.com/repos/virattt/ai-hedge-fund/contents/src%2Fbacktester.py?ref=60dc3133c3c89158a2c9fb7c80cd4f106dfb5324"}, {"filename": "src/main.py", "status": "modified", "additions": 24, "deletions": 3, "changes": 27, "patch": "@@ -145,6 +145,12 @@ def create_workflow(selected_analysts=None):\n     parser.add_argument(\"--end-date\", type=str, help=\"End date (YYYY-MM-DD). Defaults to today\")\n     parser.add_argument(\"--show-reasoning\", action=\"store_true\", help=\"Show reasoning from each agent\")\n     parser.add_argument(\"--show-agent-graph\", action=\"store_true\", help=\"Show the agent graph\")\n+    parser.add_argument(\n+        \"--llm\",\n+        type=str,\n+        default=None,\n+        help=\"Specify LLM as provider:model (e.g., Openai:gpt-4, Ollama:llama3) to override interactive selection\",\n+    )\n     parser.add_argument(\"--ollama\", action=\"store_true\", help=\"Use Ollama for local LLM inference\")\n \n     args = parser.parse_args()\n@@ -176,11 +182,26 @@ def create_workflow(selected_analysts=None):\n         selected_analysts = choices\n         print(f\"\\nSelected analysts: {', '.join(Fore.GREEN + choice.title().replace('_', ' ') + Style.RESET_ALL for choice in choices)}\\n\")\n \n-    # Select LLM model based on whether Ollama is being used\n+    # Select LLM model based on argument or interactive selection\n     model_name = \"\"\n     model_provider = \"\"\n \n-    if args.ollama:\n+    # If command-line LLM is provided, use it directly\n+    if args.llm is not None:\n+        if ':' not in args.llm:\n+            print(f\"{Fore.RED}--llm argument must be in provider:model format (e.g., Openai:gpt-4){Style.RESET_ALL}\")\n+            sys.exit(1)\n+        model_provider, model_name = args.llm.split(':', 1)\n+        if model_provider.lower() == ModelProvider.OLLAMA.value:\n+            # For Ollama, ensure model is available\n+            if not ensure_ollama_and_model(model_name):\n+                print(f\"{Fore.RED}Cannot proceed without Ollama and the selected model.{Style.RESET_ALL}\")\n+                sys.exit(1)\n+            print(f\"\\nSelected {Fore.CYAN}Ollama{Style.RESET_ALL} model: {Fore.GREEN + Style.BRIGHT}{model_name}{Style.RESET_ALL}\\n\")\n+            model_provider = ModelProvider.OLLAMA.value\n+        else:\n+            print(f\"\\nSelected {Fore.CYAN}{model_provider}{Style.RESET_ALL} model: {Fore.GREEN + Style.BRIGHT}{model_name}{Style.RESET_ALL}\\n\")\n+    elif args.ollama:\n         print(f\"{Fore.CYAN}Using Ollama for local LLM inference.{Style.RESET_ALL}\")\n \n         # Select from Ollama-specific models\n@@ -232,7 +253,7 @@ def create_workflow(selected_analysts=None):\n         if not model_choice:\n             print(\"\\n\\nInterrupt received. Exiting...\")\n             sys.exit(0)\n-\n+        \n         model_name, model_provider = model_choice\n \n         # Get model info using the helper function", "blob_url": "https://github.com/virattt/ai-hedge-fund/blob/60dc3133c3c89158a2c9fb7c80cd4f106dfb5324/src%2Fmain.py", "raw_url": "https://github.com/virattt/ai-hedge-fund/raw/60dc3133c3c89158a2c9fb7c80cd4f106dfb5324/src%2Fmain.py", "contents_url": "https://api.github.com/repos/virattt/ai-hedge-fund/contents/src%2Fmain.py?ref=60dc3133c3c89158a2c9fb7c80cd4f106dfb5324"}], "commits_data": [{"sha": "f3a21a57084553621c55fc11ffd9dab683ac59dd", "message": "Added command line argument to choose llm model", "author": "Romamo", "date": "2025-05-22 08:44:25+00:00", "url": "https://github.com/virattt/ai-hedge-fund/commit/f3a21a57084553621c55fc11ffd9dab683ac59dd"}, {"sha": "db3727cb36b95807089bfe943a8cf95da4c1294a", "message": "Removed wrongly added line", "author": "Romamo", "date": "2025-05-22 11:02:39+00:00", "url": "https://github.com/virattt/ai-hedge-fund/commit/db3727cb36b95807089bfe943a8cf95da4c1294a"}, {"sha": "94e3627ac3890dd11d3f3894f019e12cf471c3b9", "message": "Updated readme", "author": "Romamo", "date": "2025-05-22 11:27:47+00:00", "url": "https://github.com/virattt/ai-hedge-fund/commit/94e3627ac3890dd11d3f3894f019e12cf471c3b9"}, {"sha": "60e79c13a2ee4c49c9d0ab4257a932fba4870f9e", "message": "Added --llm argument to main.py too", "author": "Romamo", "date": "2025-05-22 11:42:27+00:00", "url": "https://github.com/virattt/ai-hedge-fund/commit/60e79c13a2ee4c49c9d0ab4257a932fba4870f9e"}, {"sha": "60dc3133c3c89158a2c9fb7c80cd4f106dfb5324", "message": "Added --llm argument to main.py too", "author": "Romamo", "date": "2025-05-22 11:44:36+00:00", "url": "https://github.com/virattt/ai-hedge-fund/commit/60dc3133c3c89158a2c9fb7c80cd4f106dfb5324"}], "reviews": [], "html_url": "https://github.com/virattt/ai-hedge-fund/pull/306", "diff_url": "https://github.com/virattt/ai-hedge-fund/pull/306.diff", "patch_url": "https://github.com/virattt/ai-hedge-fund/pull/306.patch"}, "analysis_duration": 0.0, "total_issues": 0}, "error": null}, {"id": "d3235c22-5d94-4688-9b24-b0aeb1d41814", "type": "pr", "pr_url": "https://github.com/virattt/ai-hedge-fund/pull/306", "status": "completed", "mode": "deep", "created_at": "2025-07-27T13:39:12.007859", "started_at": "2025-07-27T13:39:12.134931", "completed_at": "2025-07-27T13:39:12.151118", "results": {"error": "Agent system not available - cannot perform full PR analysis", "security_issues": [], "quality_issues": [], "logic_issues": [], "decision": {"decision": "MANUAL_REVIEW", "risk_level": "unknown", "summary": "Analysis not available - manual review required", "recommendations": ["Set up agent system for automated analysis"]}}, "error": null}, {"id": "d3235c22-5d94-4688-9b24-b0aeb1d41814", "type": "pr", "pr_url": "https://github.com/virattt/ai-hedge-fund/pull/306", "status": "completed", "mode": "deep", "created_at": "2025-07-27T13:39:12.007859", "started_at": "2025-07-27T13:39:12.603972", "completed_at": "2025-07-27T13:39:12.635413", "results": {"error": "Agent system not available - cannot perform full PR analysis", "security_issues": [], "quality_issues": [], "logic_issues": [], "decision": {"decision": "MANUAL_REVIEW", "risk_level": "unknown", "summary": "Analysis not available - manual review required", "recommendations": ["Set up agent system for automated analysis"]}}, "error": null}, {"id": "e336edda-ea3e-424d-b7a2-72ff57329000", "type": "security", "code_snippets": [{"file_path": "auth.py", "content": "def login(username, password):\\n    admin_pass = 'superSecret123!'\\n    if password == admin_pass:\\n        return True\\n    return False\\n\\ndef get_user_data(user_id):\\n    query = f\\\"SELECT * FROM users WHERE id = {user_id}\\\"\\n    return execute_query(query)\",\n      \"language\": \"python\"\n    },", "language": "python"}], "status": "completed", "created_at": "2025-07-27T13:41:04.064709", "started_at": "2025-07-27T13:41:04.200801", "completed_at": "2025-07-27T13:41:04.221553", "results": {"security_issues": [{"type": "Hardcoded Secret", "severity": "critical", "description": "Potential hardcoded credentials found", "line": 1, "file": "auth.py", "confidence": 0.7, "code_snippet": "def login(username, password):\\n    admin_pass = 'superSecret123!'\\n    if password == admin_pass:\\n        return True\\n    return False\\n\\ndef get_user_data(user_id):\\n    query = f\\\"SELECT * FROM users WHERE id = {user_id}\\\"\\n    return execute_query(query)\","}, {"type": "Insecure Comparison", "severity": "high", "description": "Direct string comparison may be vulnerable to timing attacks", "line": 1, "file": "auth.py", "confidence": 0.7, "code_snippet": "def login(username, password):\\n    admin_pass = 'superSecret123!'\\n    if password == admin_pass:\\n        return True\\n    return False\\n\\ndef get_user_data(user_id):\\n    query = f\\\"SELECT * FROM users WHERE id = {user_id}\\\"\\n    return execute_query(query)\","}, {"type": "Code Injection Risk", "severity": "critical", "description": "Dynamic code execution with user input", "line": 1, "file": "auth.py", "confidence": 0.7, "code_snippet": "def login(username, password):\\n    admin_pass = 'superSecret123!'\\n    if password == admin_pass:\\n        return True\\n    return False\\n\\ndef get_user_data(user_id):\\n    query = f\\\"SELECT * FROM users WHERE id = {user_id}\\\"\\n    return execute_query(query)\","}], "total_issues": 3, "severity_breakdown": {"critical": 2, "high": 1, "medium": 0, "low": 0}, "decision": {"decision": "BLOCK", "risk_level": "critical", "summary": "Found 2 critical security issues", "recommendations": ["Fix critical security issues immediately", "Review security best practices"]}, "errors": [], "analysis_method": "pattern_matching"}, "error": null}, {"id": "e336edda-ea3e-424d-b7a2-72ff57329000", "type": "security", "code_snippets": [{"file_path": "auth.py", "content": "def login(username, password):\\n    admin_pass = 'superSecret123!'\\n    if password == admin_pass:\\n        return True\\n    return False\\n\\ndef get_user_data(user_id):\\n    query = f\\\"SELECT * FROM users WHERE id = {user_id}\\\"\\n    return execute_query(query)\",\n      \"language\": \"python\"\n    },", "language": "python"}], "status": "completed", "created_at": "2025-07-27T13:41:04.064709", "started_at": "2025-07-27T13:41:04.894501", "completed_at": "2025-07-27T13:41:04.924150", "results": {"security_issues": [{"type": "Hardcoded Secret", "severity": "critical", "description": "Potential hardcoded credentials found", "line": 1, "file": "auth.py", "confidence": 0.7, "code_snippet": "def login(username, password):\\n    admin_pass = 'superSecret123!'\\n    if password == admin_pass:\\n        return True\\n    return False\\n\\ndef get_user_data(user_id):\\n    query = f\\\"SELECT * FROM users WHERE id = {user_id}\\\"\\n    return execute_query(query)\","}, {"type": "Insecure Comparison", "severity": "high", "description": "Direct string comparison may be vulnerable to timing attacks", "line": 1, "file": "auth.py", "confidence": 0.7, "code_snippet": "def login(username, password):\\n    admin_pass = 'superSecret123!'\\n    if password == admin_pass:\\n        return True\\n    return False\\n\\ndef get_user_data(user_id):\\n    query = f\\\"SELECT * FROM users WHERE id = {user_id}\\\"\\n    return execute_query(query)\","}, {"type": "Code Injection Risk", "severity": "critical", "description": "Dynamic code execution with user input", "line": 1, "file": "auth.py", "confidence": 0.7, "code_snippet": "def login(username, password):\\n    admin_pass = 'superSecret123!'\\n    if password == admin_pass:\\n        return True\\n    return False\\n\\ndef get_user_data(user_id):\\n    query = f\\\"SELECT * FROM users WHERE id = {user_id}\\\"\\n    return execute_query(query)\","}], "total_issues": 3, "severity_breakdown": {"critical": 2, "high": 1, "medium": 0, "low": 0}, "decision": {"decision": "BLOCK", "risk_level": "critical", "summary": "Found 2 critical security issues", "recommendations": ["Fix critical security issues immediately", "Review security best practices"]}, "errors": [], "analysis_method": "pattern_matching"}, "error": null}, {"id": "6a808e0b-d0d2-4dd2-88b9-a5ba5f954447", "type": "pr", "pr_url": "https://github.com/virattt/ai-hedge-fund/pull/306", "status": "completed", "mode": "deep", "created_at": "2025-07-27T13:58:01.843077", "started_at": "2025-07-27T13:58:02.010099", "completed_at": "2025-07-27T13:58:36.819303", "results": {"error": "Error during PR analysis: Failed to initialize embedding model: Cannot copy out of meta tensor; no data! Please use torch.nn.Module.to_empty() instead of torch.nn.Module.to() when moving module from meta to a different device.", "errors": ["Error during PR analysis: Failed to initialize embedding model: Cannot copy out of meta tensor; no data! Please use torch.nn.Module.to_empty() instead of torch.nn.Module.to() when moving module from meta to a different device."]}, "error": null}, {"id": "6a808e0b-d0d2-4dd2-88b9-a5ba5f954447", "type": "pr", "pr_url": "https://github.com/virattt/ai-hedge-fund/pull/306", "status": "completed", "mode": "deep", "created_at": "2025-07-27T13:58:01.843077", "started_at": "2025-07-27T13:58:02.010099", "completed_at": "2025-07-27T13:58:37.473337", "results": {"security_issues": [], "quality_issues": [], "logic_issues": [], "decision": {}, "pr_details": {"id": 2536944201, "number": 306, "title": "Argument --llm argument to main.py too", "body": "To specify the LLM provider and model, use the `--llm` argument in the format `Provider:Model` (e.g., `Openai:gpt-4`, `Ollama:llama3`). This will override the interactive model selection.\r\n\r\n```bash\r\n# With Poetry:\r\npoetry run python src/main.py --ticker AAPL,MSFT,NVDA --llm Openai:gpt-4\r\npoetry run python src/main.py --ticker AAPL,MSFT,NVDA --llm Ollama:llama3\r\n\r\n# With Docker (on Linux/Mac):\r\n./run.sh --ticker AAPL,MSFT,NVDA --llm Openai:gpt-4\r\n\r\n# With Docker (on Windows):\r\nrun.bat --ticker AAPL,MSFT,NVDA --llm Openai:gpt-4\r\n```\r\n\r\nIf you do not specify `--llm`, you will be prompted to select a provider and model interactively.\r\n\r\n\r\nREADME also updated", "state": "open", "created_at": "2025-05-22 11:43:33+00:00", "updated_at": "2025-05-22 11:44:42+00:00", "closed_at": null, "merged_at": null, "merge_commit_sha": null, "author": "Romamo", "assignees": [], "reviewers": [], "labels": [], "milestone": null, "base_branch": "main", "head_branch": "argument-llm-main", "base_sha": "ab8ce114e78e967948a3a48fe1206becc540e232", "head_sha": "60dc3133c3c89158a2c9fb7c80cd4f106dfb5324", "mergeable": false, "mergeable_state": "dirty", "merged": false, "comments": 0, "review_comments": 0, "commits": 5, "additions": 64, "deletions": 18, "changed_files": 3, "files": [{"filename": "README.md", "status": "modified", "additions": 17, "deletions": 13, "changes": 30, "patch": "@@ -147,6 +147,22 @@ run.bat --ticker AAPL,MSFT,NVDA main\n **Example Output:**\n <img width=\"992\" alt=\"Screenshot 2025-01-06 at 5 50 17 PM\" src=\"https://github.com/user-attachments/assets/e8ca04bf-9989-4a7d-a8b4-34e04666663b\" />\n \n+To specify the LLM provider and model, use the `--llm` argument in the format `Provider:Model` (e.g., `Openai:gpt-4`, `Ollama:llama3`). This will override the interactive model selection.\n+\n+```bash\n+# With Poetry:\n+poetry run python src/main.py --ticker AAPL,MSFT,NVDA --llm Openai:gpt-4\n+poetry run python src/main.py --ticker AAPL,MSFT,NVDA --llm Ollama:llama3\n+\n+# With Docker (on Linux/Mac):\n+./run.sh --ticker AAPL,MSFT,NVDA --llm Openai:gpt-4\n+\n+# With Docker (on Windows):\n+run.bat --ticker AAPL,MSFT,NVDA --llm Openai:gpt-4\n+```\n+\n+If you do not specify `--llm`, you will be prompted to select a provider and model interactively.\n+\n You can also specify a `--ollama` flag to run the AI hedge fund using local LLMs.\n \n ```bash\n@@ -205,6 +221,7 @@ run.bat --ticker AAPL,MSFT,NVDA backtest\n **Example Output:**\n <img width=\"941\" alt=\"Screenshot 2025-01-06 at 5 47 52 PM\" src=\"https://github.com/user-attachments/assets/00e794ea-8628-44e6-9a84-8f8a31ad3b47\" />\n \n+To specify the LLM provider and model, use the `--llm` argument the same way as for the Hedge Fund.\n \n You can optionally specify the start and end dates to backtest over a specific time period.\n \n@@ -219,19 +236,6 @@ poetry run python src/backtester.py --ticker AAPL,MSFT,NVDA --start-date 2024-01\n run.bat --ticker AAPL,MSFT,NVDA --start-date 2024-01-01 --end-date 2024-03-01 backtest\n ```\n \n-You can also specify a `--ollama` flag to run the backtester using local LLMs.\n-```bash\n-# With Poetry:\n-poetry run python src/backtester.py --ticker AAPL,MSFT,NVDA --ollama\n-\n-# With Docker (on Linux/Mac):\n-./run.sh --ticker AAPL,MSFT,NVDA --ollama backtest\n-\n-# With Docker (on Windows):\n-run.bat --ticker AAPL,MSFT,NVDA --ollama backtest\n-```\n-\n-\n ## Project Structure \n ```\n ai-hedge-fund/", "blob_url": "https://github.com/virattt/ai-hedge-fund/blob/60dc3133c3c89158a2c9fb7c80cd4f106dfb5324/README.md", "raw_url": "https://github.com/virattt/ai-hedge-fund/raw/60dc3133c3c89158a2c9fb7c80cd4f106dfb5324/README.md", "contents_url": "https://api.github.com/repos/virattt/ai-hedge-fund/contents/README.md?ref=60dc3133c3c89158a2c9fb7c80cd4f106dfb5324"}, {"filename": "src/backtester.py", "status": "modified", "additions": 23, "deletions": 2, "changes": 25, "patch": "@@ -651,6 +651,12 @@ def analyze_performance(self):\n         action=\"store_true\",\n         help=\"Use all available analysts (overrides --analysts)\",\n     )\n+    parser.add_argument(\n+        \"--llm\",\n+        type=str,\n+        default=None,\n+        help=\"Specify LLM as provider:model (e.g., Openai:gpt-4, Ollama:llama3) to override interactive selection\",\n+    )\n     parser.add_argument(\"--ollama\", action=\"store_true\", help=\"Use Ollama for local LLM inference\")\n \n     args = parser.parse_args()\n@@ -687,11 +693,26 @@ def analyze_performance(self):\n             selected_analysts = choices\n             print(f\"\\nSelected analysts: \" f\"{', '.join(Fore.GREEN + choice.title().replace('_', ' ') + Style.RESET_ALL for choice in choices)}\")\n \n-    # Select LLM model based on whether Ollama is being used\n+    # Select LLM model based on argument or interactive selection\n     model_name = \"\"\n     model_provider = None\n \n-    if args.ollama:\n+    # If command-line LLM is provided, use it directly\n+    if args.llm is not None:\n+        if ':' not in args.llm:\n+            print(f\"{Fore.RED}--llm argument must be in provider:model format (e.g., openai:gpt-4){Style.RESET_ALL}\")\n+            sys.exit(1)\n+        model_provider, model_name = args.llm.split(':', 1)\n+        if model_provider.lower() == ModelProvider.OLLAMA.value:\n+            # For Ollama, ensure model is available\n+            if not ensure_ollama_and_model(model_name):\n+                print(f\"{Fore.RED}Cannot proceed without Ollama and the selected model.{Style.RESET_ALL}\")\n+                sys.exit(1)\n+            print(f\"\\nSelected {Fore.CYAN}Ollama{Style.RESET_ALL} model: {Fore.GREEN + Style.BRIGHT}{model_name}{Style.RESET_ALL}\\n\")\n+            model_provider = ModelProvider.OLLAMA.value\n+        else:\n+            print(f\"\\nSelected {Fore.CYAN}{model_provider}{Style.RESET_ALL} model: {Fore.GREEN + Style.BRIGHT}{model_name}{Style.RESET_ALL}\\n\")\n+    elif args.ollama:\n         print(f\"{Fore.CYAN}Using Ollama for local LLM inference.{Style.RESET_ALL}\")\n \n         # Select from Ollama-specific models", "blob_url": "https://github.com/virattt/ai-hedge-fund/blob/60dc3133c3c89158a2c9fb7c80cd4f106dfb5324/src%2Fbacktester.py", "raw_url": "https://github.com/virattt/ai-hedge-fund/raw/60dc3133c3c89158a2c9fb7c80cd4f106dfb5324/src%2Fbacktester.py", "contents_url": "https://api.github.com/repos/virattt/ai-hedge-fund/contents/src%2Fbacktester.py?ref=60dc3133c3c89158a2c9fb7c80cd4f106dfb5324"}, {"filename": "src/main.py", "status": "modified", "additions": 24, "deletions": 3, "changes": 27, "patch": "@@ -145,6 +145,12 @@ def create_workflow(selected_analysts=None):\n     parser.add_argument(\"--end-date\", type=str, help=\"End date (YYYY-MM-DD). Defaults to today\")\n     parser.add_argument(\"--show-reasoning\", action=\"store_true\", help=\"Show reasoning from each agent\")\n     parser.add_argument(\"--show-agent-graph\", action=\"store_true\", help=\"Show the agent graph\")\n+    parser.add_argument(\n+        \"--llm\",\n+        type=str,\n+        default=None,\n+        help=\"Specify LLM as provider:model (e.g., Openai:gpt-4, Ollama:llama3) to override interactive selection\",\n+    )\n     parser.add_argument(\"--ollama\", action=\"store_true\", help=\"Use Ollama for local LLM inference\")\n \n     args = parser.parse_args()\n@@ -176,11 +182,26 @@ def create_workflow(selected_analysts=None):\n         selected_analysts = choices\n         print(f\"\\nSelected analysts: {', '.join(Fore.GREEN + choice.title().replace('_', ' ') + Style.RESET_ALL for choice in choices)}\\n\")\n \n-    # Select LLM model based on whether Ollama is being used\n+    # Select LLM model based on argument or interactive selection\n     model_name = \"\"\n     model_provider = \"\"\n \n-    if args.ollama:\n+    # If command-line LLM is provided, use it directly\n+    if args.llm is not None:\n+        if ':' not in args.llm:\n+            print(f\"{Fore.RED}--llm argument must be in provider:model format (e.g., Openai:gpt-4){Style.RESET_ALL}\")\n+            sys.exit(1)\n+        model_provider, model_name = args.llm.split(':', 1)\n+        if model_provider.lower() == ModelProvider.OLLAMA.value:\n+            # For Ollama, ensure model is available\n+            if not ensure_ollama_and_model(model_name):\n+                print(f\"{Fore.RED}Cannot proceed without Ollama and the selected model.{Style.RESET_ALL}\")\n+                sys.exit(1)\n+            print(f\"\\nSelected {Fore.CYAN}Ollama{Style.RESET_ALL} model: {Fore.GREEN + Style.BRIGHT}{model_name}{Style.RESET_ALL}\\n\")\n+            model_provider = ModelProvider.OLLAMA.value\n+        else:\n+            print(f\"\\nSelected {Fore.CYAN}{model_provider}{Style.RESET_ALL} model: {Fore.GREEN + Style.BRIGHT}{model_name}{Style.RESET_ALL}\\n\")\n+    elif args.ollama:\n         print(f\"{Fore.CYAN}Using Ollama for local LLM inference.{Style.RESET_ALL}\")\n \n         # Select from Ollama-specific models\n@@ -232,7 +253,7 @@ def create_workflow(selected_analysts=None):\n         if not model_choice:\n             print(\"\\n\\nInterrupt received. Exiting...\")\n             sys.exit(0)\n-\n+        \n         model_name, model_provider = model_choice\n \n         # Get model info using the helper function", "blob_url": "https://github.com/virattt/ai-hedge-fund/blob/60dc3133c3c89158a2c9fb7c80cd4f106dfb5324/src%2Fmain.py", "raw_url": "https://github.com/virattt/ai-hedge-fund/raw/60dc3133c3c89158a2c9fb7c80cd4f106dfb5324/src%2Fmain.py", "contents_url": "https://api.github.com/repos/virattt/ai-hedge-fund/contents/src%2Fmain.py?ref=60dc3133c3c89158a2c9fb7c80cd4f106dfb5324"}], "commits_data": [{"sha": "f3a21a57084553621c55fc11ffd9dab683ac59dd", "message": "Added command line argument to choose llm model", "author": "Romamo", "date": "2025-05-22 08:44:25+00:00", "url": "https://github.com/virattt/ai-hedge-fund/commit/f3a21a57084553621c55fc11ffd9dab683ac59dd"}, {"sha": "db3727cb36b95807089bfe943a8cf95da4c1294a", "message": "Removed wrongly added line", "author": "Romamo", "date": "2025-05-22 11:02:39+00:00", "url": "https://github.com/virattt/ai-hedge-fund/commit/db3727cb36b95807089bfe943a8cf95da4c1294a"}, {"sha": "94e3627ac3890dd11d3f3894f019e12cf471c3b9", "message": "Updated readme", "author": "Romamo", "date": "2025-05-22 11:27:47+00:00", "url": "https://github.com/virattt/ai-hedge-fund/commit/94e3627ac3890dd11d3f3894f019e12cf471c3b9"}, {"sha": "60e79c13a2ee4c49c9d0ab4257a932fba4870f9e", "message": "Added --llm argument to main.py too", "author": "Romamo", "date": "2025-05-22 11:42:27+00:00", "url": "https://github.com/virattt/ai-hedge-fund/commit/60e79c13a2ee4c49c9d0ab4257a932fba4870f9e"}, {"sha": "60dc3133c3c89158a2c9fb7c80cd4f106dfb5324", "message": "Added --llm argument to main.py too", "author": "Romamo", "date": "2025-05-22 11:44:36+00:00", "url": "https://github.com/virattt/ai-hedge-fund/commit/60dc3133c3c89158a2c9fb7c80cd4f106dfb5324"}], "reviews": [], "html_url": "https://github.com/virattt/ai-hedge-fund/pull/306", "diff_url": "https://github.com/virattt/ai-hedge-fund/pull/306.diff", "patch_url": "https://github.com/virattt/ai-hedge-fund/pull/306.patch"}, "analysis_duration": 0.0, "total_issues": 0}, "error": null}, {"id": "0f1e83e9-5f81-46e2-a4a4-7db502160c1d", "type": "security", "code_snippets": [{"file_path": "auth.py", "content": "import os\nimport sqlite3\n\nADMIN_PASSWORD = os.getenv(\"ADMIN_PASSWORD\", \"superSecret123!\")\n\ndef login(username, password):\n    if password == ADMIN_PASSWORD:\n        return True\n    return False\n\ndef get_user_data(user_id):\n    connection = sqlite3.connect(\"app.db\")\n    cursor = connection.cursor()\n    cursor.execute(\"SELECT * FROM users WHERE id = ?\", (user_id,))\n    result = cursor.fetchone()\n    connection.close()\n    return result\n", "language": "python"}], "status": "completed", "created_at": "2025-07-27T14:00:09.312274", "started_at": "2025-07-27T14:00:09.664279", "completed_at": "2025-07-27T14:00:13.273123", "results": {"security_issues": [{"type": "Hardcoded passwords/secrets/API keys", "severity": "critical", "description": "The ADMIN_PASSWORD is either hardcoded or retrieved from an environment variable with a fallback to a hardcoded value.  This is a critical vulnerability as it allows attackers to gain admin access if they can access the environment variables or the code itself.", "line": 2, "file": "auth.py", "confidence": 1.0}, {"type": "SQL injection", "severity": "critical", "description": "The get_user_data function is vulnerable to SQL injection.  User-supplied input (user_id) is directly incorporated into the SQL query without proper sanitization or parameterization. An attacker could inject malicious SQL code to retrieve sensitive data or modify the database.", "line": 14, "file": "auth.py", "confidence": 1.0}, {"type": "Authentication bypass", "severity": "critical", "description": "The login function performs a simple password comparison.  There's no salting or hashing of passwords, making it trivial to crack the password if it's obtained or guessed.  The fallback to 'superSecret123!' is especially problematic.", "line": 6, "file": "auth.py", "confidence": 1.0}, {"type": "Insecure file operations", "severity": "medium", "description": "The database file 'app.db' is directly accessed without any checks or restrictions. An attacker might be able to manipulate or delete this file.", "line": 13, "file": "auth.py", "confidence": 0.8}], "total_issues": 4, "severity_breakdown": {"critical": 3, "high": 0, "medium": 1, "low": 0}, "decision": {"decision": "BLOCK", "risk_level": "critical", "summary": "Found 3 critical security issues", "recommendations": ["Fix critical security issues immediately", "Review security best practices"]}, "errors": [], "analysis_method": "agent_system"}, "error": null}, {"id": "0f1e83e9-5f81-46e2-a4a4-7db502160c1d", "type": "security", "code_snippets": [{"file_path": "auth.py", "content": "import os\nimport sqlite3\n\nADMIN_PASSWORD = os.getenv(\"ADMIN_PASSWORD\", \"superSecret123!\")\n\ndef login(username, password):\n    if password == ADMIN_PASSWORD:\n        return True\n    return False\n\ndef get_user_data(user_id):\n    connection = sqlite3.connect(\"app.db\")\n    cursor = connection.cursor()\n    cursor.execute(\"SELECT * FROM users WHERE id = ?\", (user_id,))\n    result = cursor.fetchone()\n    connection.close()\n    return result\n", "language": "python"}], "status": "completed", "created_at": "2025-07-27T14:00:09.312274", "started_at": "2025-07-27T14:00:09.664279", "completed_at": "2025-07-27T14:00:13.335118", "results": {"security_issues": [{"type": "Hardcoded passwords/secrets/API keys", "severity": "critical", "description": "The ADMIN_PASSWORD is either hardcoded or retrieved from an environment variable with a fallback to a hardcoded value.  This is a critical vulnerability as it allows attackers to gain admin access if they can access the environment variables or the source code.", "line": 2, "file": "auth.py", "confidence": 1.0}, {"type": "SQL injection", "severity": "critical", "description": "The get_user_data function is vulnerable to SQL injection.  User-supplied input (user_id) is directly incorporated into the SQL query without proper sanitization or parameterization. An attacker could inject malicious SQL code to retrieve sensitive data or modify the database.", "line": 14, "file": "auth.py", "confidence": 1.0}, {"type": "Authentication bypass", "severity": "critical", "description": "The login function only checks if the provided password matches the ADMIN_PASSWORD. There's no user verification.  An attacker who knows the ADMIN_PASSWORD gains full access.", "line": 6, "file": "auth.py", "confidence": 1.0}], "total_issues": 3, "severity_breakdown": {"critical": 3, "high": 0, "medium": 0, "low": 0}, "decision": {"decision": "BLOCK", "risk_level": "critical", "summary": "Found 3 critical security issues", "recommendations": ["Fix critical security issues immediately", "Review security best practices"]}, "errors": [], "analysis_method": "agent_system"}, "error": null}, {"id": "d342c515-14b3-481a-a2d9-a9e883a9b196", "type": "pr", "pr_url": "https://github.com/virattt/ai-hedge-fund/pull/306", "status": "completed", "mode": "deep", "created_at": "2025-07-27T14:02:30.150596", "started_at": "2025-07-27T14:02:30.564061", "completed_at": "2025-07-27T14:02:50.126023", "results": {"error": "Error during PR analysis: Failed to initialize embedding model: Cannot copy out of meta tensor; no data! Please use torch.nn.Module.to_empty() instead of torch.nn.Module.to() when moving module from meta to a different device.", "errors": ["Error during PR analysis: Failed to initialize embedding model: Cannot copy out of meta tensor; no data! Please use torch.nn.Module.to_empty() instead of torch.nn.Module.to() when moving module from meta to a different device."]}, "error": null}, {"id": "d342c515-14b3-481a-a2d9-a9e883a9b196", "type": "pr", "pr_url": "https://github.com/virattt/ai-hedge-fund/pull/306", "status": "completed", "mode": "deep", "created_at": "2025-07-27T14:02:30.150596", "started_at": "2025-07-27T14:02:30.564061", "completed_at": "2025-07-27T14:02:50.190008", "results": {"error": "Error during PR analysis: Failed to initialize embedding model: Cannot copy out of meta tensor; no data! Please use torch.nn.Module.to_empty() instead of torch.nn.Module.to() when moving module from meta to a different device.", "errors": ["Error during PR analysis: Failed to initialize embedding model: Cannot copy out of meta tensor; no data! Please use torch.nn.Module.to_empty() instead of torch.nn.Module.to() when moving module from meta to a different device."]}, "error": null}, {"id": "5ac3f87c-6701-40f1-b846-1275e74df949", "type": "pr", "pr_url": "https://github.com/virattt/ai-hedge-fund/pull/306", "status": "completed", "mode": "standard", "created_at": "2025-07-27T14:03:54.450273", "started_at": "2025-07-27T14:03:55.384464", "completed_at": "2025-07-27T14:04:11.941090", "results": {"error": "Error during PR analysis: Failed to initialize embedding model: Cannot copy out of meta tensor; no data! Please use torch.nn.Module.to_empty() instead of torch.nn.Module.to() when moving module from meta to a different device.", "errors": ["Error during PR analysis: Failed to initialize embedding model: Cannot copy out of meta tensor; no data! Please use torch.nn.Module.to_empty() instead of torch.nn.Module.to() when moving module from meta to a different device."]}, "error": null}, {"id": "5ac3f87c-6701-40f1-b846-1275e74df949", "type": "pr", "pr_url": "https://github.com/virattt/ai-hedge-fund/pull/306", "status": "completed", "mode": "standard", "created_at": "2025-07-27T14:03:54.450273", "started_at": "2025-07-27T14:03:55.384464", "completed_at": "2025-07-27T14:04:12.601253", "results": {"error": "Error during PR analysis: Failed to initialize embedding model: Cannot copy out of meta tensor; no data! Please use torch.nn.Module.to_empty() instead of torch.nn.Module.to() when moving module from meta to a different device.", "errors": ["Error during PR analysis: Failed to initialize embedding model: Cannot copy out of meta tensor; no data! Please use torch.nn.Module.to_empty() instead of torch.nn.Module.to() when moving module from meta to a different device."]}, "error": null}, {"id": "afd0961d-f29b-4a88-a04b-43a4e7b0a8ff", "type": "pr", "pr_url": "https://github.com/virattt/ai-hedge-fund/pull/306", "status": "completed", "mode": "standard", "created_at": "2025-07-27T15:50:18.918139", "started_at": "2025-07-27T15:50:19.215452", "completed_at": "2025-07-27T15:50:35.844563", "results": {"error": "Error during PR analysis: Failed to initialize embedding model: SentenceTransformer.__init__() got an unexpected keyword argument 'torch_dtype'", "errors": ["Error during PR analysis: Failed to initialize embedding model: SentenceTransformer.__init__() got an unexpected keyword argument 'torch_dtype'"]}, "error": null}, {"id": "afd0961d-f29b-4a88-a04b-43a4e7b0a8ff", "type": "pr", "pr_url": "https://github.com/virattt/ai-hedge-fund/pull/306", "status": "completed", "mode": "standard", "created_at": "2025-07-27T15:50:18.918139", "started_at": "2025-07-27T15:50:19.215452", "completed_at": "2025-07-27T15:50:35.867888", "results": {"error": "Error during PR analysis: Failed to initialize embedding model: SentenceTransformer.__init__() got an unexpected keyword argument 'torch_dtype'", "errors": ["Error during PR analysis: Failed to initialize embedding model: SentenceTransformer.__init__() got an unexpected keyword argument 'torch_dtype'"]}, "error": null}, {"id": "e01bc7fc-01b1-4eae-b252-7fc91728ede0", "type": "security", "code_snippets": [{"file_path": "ayth.py", "content": "import os\nimport sqlite3\n\nADMIN_PASSWORD = os.getenv(\"ADMIN_PASSWORD\", \"superSecret123!\")\n\ndef login(username, password):\n    if password == ADMIN_PASSWORD:\n        return True\n    return False\n\ndef get_user_data(user_id):\n    connection = sqlite3.connect(\"app.db\")\n    cursor = connection.cursor()\n    cursor.execute(\"SELECT * FROM users WHERE id = ?\", (user_id,))\n    result = cursor.fetchone()\n    connection.close()\n \u00a0\u00a0\u00a0return\u00a0result", "language": "python"}], "status": "completed", "created_at": "2025-07-27T15:51:43.732068", "started_at": "2025-07-27T15:51:44.037124", "completed_at": "2025-07-27T15:51:47.748579", "results": {"security_issues": [{"type": "Hardcoded passwords/secrets/API keys", "severity": "critical", "description": "The ADMIN_PASSWORD is either hardcoded or retrieved from an environment variable with a default value.  This is a critical vulnerability as it allows attackers to gain admin access if they can access the environment variables or the code itself.", "line": 2, "file": "ayth.py", "confidence": 1.0}, {"type": "SQL injection", "severity": "critical", "description": "The get_user_data function is vulnerable to SQL injection.  User-supplied input (user_id) is directly used in an SQL query without proper sanitization or parameterization. An attacker could inject malicious SQL code to retrieve sensitive data or modify the database.", "line": 12, "file": "ayth.py", "confidence": 1.0}, {"type": "Authentication bypass", "severity": "critical", "description": "The login function uses a simple password comparison.  There's no salting or hashing of the password, making it vulnerable to brute-force attacks or rainbow table attacks if the ADMIN_PASSWORD is compromised.", "line": 5, "file": "ayth.py", "confidence": 1.0}], "total_issues": 3, "severity_breakdown": {"critical": 3, "high": 0, "medium": 0, "low": 0}, "decision": {"decision": "BLOCK", "risk_level": "critical", "summary": "Found 3 critical security issues", "recommendations": ["Fix critical security issues immediately", "Review security best practices"]}, "errors": [], "analysis_method": "agent_system"}, "error": null}, {"id": "e01bc7fc-01b1-4eae-b252-7fc91728ede0", "type": "security", "code_snippets": [{"file_path": "ayth.py", "content": "import os\nimport sqlite3\n\nADMIN_PASSWORD = os.getenv(\"ADMIN_PASSWORD\", \"superSecret123!\")\n\ndef login(username, password):\n    if password == ADMIN_PASSWORD:\n        return True\n    return False\n\ndef get_user_data(user_id):\n    connection = sqlite3.connect(\"app.db\")\n    cursor = connection.cursor()\n    cursor.execute(\"SELECT * FROM users WHERE id = ?\", (user_id,))\n    result = cursor.fetchone()\n    connection.close()\n \u00a0\u00a0\u00a0return\u00a0result", "language": "python"}], "status": "completed", "created_at": "2025-07-27T15:51:43.732068", "started_at": "2025-07-27T15:51:44.037124", "completed_at": "2025-07-27T15:51:47.879836", "results": {"security_issues": [{"type": "Hardcoded passwords/secrets/API keys", "severity": "critical", "description": "The ADMIN_PASSWORD is either hardcoded or retrieved from an environment variable with a default value.  This is a critical vulnerability as it allows attackers to gain admin access if they can access the environment variables or the source code.", "line": 2, "file": "ayth.py", "confidence": 1.0}, {"type": "SQL injection", "severity": "critical", "description": "The get_user_data function is vulnerable to SQL injection.  User-supplied input (user_id) is directly used in an SQL query without proper sanitization or parameterization. An attacker could inject malicious SQL code to retrieve sensitive data or modify the database.", "line": 13, "file": "ayth.py", "confidence": 1.0}, {"type": "Authentication bypass", "severity": "critical", "description": "The login function uses a simple password comparison.  If the provided password matches the ADMIN_PASSWORD, access is granted.  There's no salting or hashing of passwords, making it trivial to crack if the password is weak or the environment variable is compromised.", "line": 6, "file": "ayth.py", "confidence": 1.0}], "total_issues": 3, "severity_breakdown": {"critical": 3, "high": 0, "medium": 0, "low": 0}, "decision": {"decision": "BLOCK", "risk_level": "critical", "summary": "Found 3 critical security issues", "recommendations": ["Fix critical security issues immediately", "Review security best practices"]}, "errors": [], "analysis_method": "agent_system"}, "error": null}, {"id": "54c6f434-6dbf-4513-ab0b-145f4ba2e25b", "type": "pr", "pr_url": "https://github.com/virattt/ai-hedge-fund/pull/306", "status": "completed", "mode": "standard", "created_at": "2025-07-27T15:58:12.356034", "started_at": "2025-07-27T15:58:13.264099", "completed_at": "2025-07-27T15:58:30.831809", "results": {"error": "Error during PR analysis: Failed to initialize embedding model: SentenceTransformer.__init__() got an unexpected keyword argument 'torch_dtype'", "errors": ["Error during PR analysis: Failed to initialize embedding model: SentenceTransformer.__init__() got an unexpected keyword argument 'torch_dtype'"]}, "error": null}, {"id": "54c6f434-6dbf-4513-ab0b-145f4ba2e25b", "type": "pr", "pr_url": "https://github.com/virattt/ai-hedge-fund/pull/306", "status": "completed", "mode": "standard", "created_at": "2025-07-27T15:58:12.356034", "started_at": "2025-07-27T15:58:13.264099", "completed_at": "2025-07-27T15:58:30.853120", "results": {"error": "Error during PR analysis: Failed to initialize embedding model: SentenceTransformer.__init__() got an unexpected keyword argument 'torch_dtype'", "errors": ["Error during PR analysis: Failed to initialize embedding model: SentenceTransformer.__init__() got an unexpected keyword argument 'torch_dtype'"]}, "error": null}, {"id": "795a834d-703c-4f4e-8021-1c409df1345f", "type": "pr", "pr_url": "https://github.com/virattt/ai-hedge-fund/pull/306", "status": "completed", "mode": "standard", "created_at": "2025-07-27T16:20:14.452519", "started_at": "2025-07-27T16:20:15.474850", "completed_at": "2025-07-27T16:20:40.368212", "results": {"error": "Error during PR analysis: Failed to initialize embedding model: Cannot copy out of meta tensor; no data! Please use torch.nn.Module.to_empty() instead of torch.nn.Module.to() when moving module from meta to a different device.", "errors": ["Error during PR analysis: Failed to initialize embedding model: Cannot copy out of meta tensor; no data! Please use torch.nn.Module.to_empty() instead of torch.nn.Module.to() when moving module from meta to a different device."]}, "error": null}, {"id": "795a834d-703c-4f4e-8021-1c409df1345f", "type": "pr", "pr_url": "https://github.com/virattt/ai-hedge-fund/pull/306", "status": "completed", "mode": "standard", "created_at": "2025-07-27T16:20:14.452519", "started_at": "2025-07-27T16:20:15.474850", "completed_at": "2025-07-27T16:20:48.877637", "results": {"security_issues": [], "quality_issues": [], "logic_issues": [], "decision": {}, "pr_details": {"id": 2536944201, "number": 306, "title": "Argument --llm argument to main.py too", "body": "To specify the LLM provider and model, use the `--llm` argument in the format `Provider:Model` (e.g., `Openai:gpt-4`, `Ollama:llama3`). This will override the interactive model selection.\r\n\r\n```bash\r\n# With Poetry:\r\npoetry run python src/main.py --ticker AAPL,MSFT,NVDA --llm Openai:gpt-4\r\npoetry run python src/main.py --ticker AAPL,MSFT,NVDA --llm Ollama:llama3\r\n\r\n# With Docker (on Linux/Mac):\r\n./run.sh --ticker AAPL,MSFT,NVDA --llm Openai:gpt-4\r\n\r\n# With Docker (on Windows):\r\nrun.bat --ticker AAPL,MSFT,NVDA --llm Openai:gpt-4\r\n```\r\n\r\nIf you do not specify `--llm`, you will be prompted to select a provider and model interactively.\r\n\r\n\r\nREADME also updated", "state": "open", "created_at": "2025-05-22 11:43:33+00:00", "updated_at": "2025-05-22 11:44:42+00:00", "closed_at": null, "merged_at": null, "merge_commit_sha": null, "author": "Romamo", "assignees": [], "reviewers": [], "labels": [], "milestone": null, "base_branch": "main", "head_branch": "argument-llm-main", "base_sha": "ab8ce114e78e967948a3a48fe1206becc540e232", "head_sha": "60dc3133c3c89158a2c9fb7c80cd4f106dfb5324", "mergeable": false, "mergeable_state": "dirty", "merged": false, "comments": 0, "review_comments": 0, "commits": 5, "additions": 64, "deletions": 18, "changed_files": 3, "files": [{"filename": "README.md", "status": "modified", "additions": 17, "deletions": 13, "changes": 30, "patch": "@@ -147,6 +147,22 @@ run.bat --ticker AAPL,MSFT,NVDA main\n **Example Output:**\n <img width=\"992\" alt=\"Screenshot 2025-01-06 at 5 50 17 PM\" src=\"https://github.com/user-attachments/assets/e8ca04bf-9989-4a7d-a8b4-34e04666663b\" />\n \n+To specify the LLM provider and model, use the `--llm` argument in the format `Provider:Model` (e.g., `Openai:gpt-4`, `Ollama:llama3`). This will override the interactive model selection.\n+\n+```bash\n+# With Poetry:\n+poetry run python src/main.py --ticker AAPL,MSFT,NVDA --llm Openai:gpt-4\n+poetry run python src/main.py --ticker AAPL,MSFT,NVDA --llm Ollama:llama3\n+\n+# With Docker (on Linux/Mac):\n+./run.sh --ticker AAPL,MSFT,NVDA --llm Openai:gpt-4\n+\n+# With Docker (on Windows):\n+run.bat --ticker AAPL,MSFT,NVDA --llm Openai:gpt-4\n+```\n+\n+If you do not specify `--llm`, you will be prompted to select a provider and model interactively.\n+\n You can also specify a `--ollama` flag to run the AI hedge fund using local LLMs.\n \n ```bash\n@@ -205,6 +221,7 @@ run.bat --ticker AAPL,MSFT,NVDA backtest\n **Example Output:**\n <img width=\"941\" alt=\"Screenshot 2025-01-06 at 5 47 52 PM\" src=\"https://github.com/user-attachments/assets/00e794ea-8628-44e6-9a84-8f8a31ad3b47\" />\n \n+To specify the LLM provider and model, use the `--llm` argument the same way as for the Hedge Fund.\n \n You can optionally specify the start and end dates to backtest over a specific time period.\n \n@@ -219,19 +236,6 @@ poetry run python src/backtester.py --ticker AAPL,MSFT,NVDA --start-date 2024-01\n run.bat --ticker AAPL,MSFT,NVDA --start-date 2024-01-01 --end-date 2024-03-01 backtest\n ```\n \n-You can also specify a `--ollama` flag to run the backtester using local LLMs.\n-```bash\n-# With Poetry:\n-poetry run python src/backtester.py --ticker AAPL,MSFT,NVDA --ollama\n-\n-# With Docker (on Linux/Mac):\n-./run.sh --ticker AAPL,MSFT,NVDA --ollama backtest\n-\n-# With Docker (on Windows):\n-run.bat --ticker AAPL,MSFT,NVDA --ollama backtest\n-```\n-\n-\n ## Project Structure \n ```\n ai-hedge-fund/", "blob_url": "https://github.com/virattt/ai-hedge-fund/blob/60dc3133c3c89158a2c9fb7c80cd4f106dfb5324/README.md", "raw_url": "https://github.com/virattt/ai-hedge-fund/raw/60dc3133c3c89158a2c9fb7c80cd4f106dfb5324/README.md", "contents_url": "https://api.github.com/repos/virattt/ai-hedge-fund/contents/README.md?ref=60dc3133c3c89158a2c9fb7c80cd4f106dfb5324"}, {"filename": "src/backtester.py", "status": "modified", "additions": 23, "deletions": 2, "changes": 25, "patch": "@@ -651,6 +651,12 @@ def analyze_performance(self):\n         action=\"store_true\",\n         help=\"Use all available analysts (overrides --analysts)\",\n     )\n+    parser.add_argument(\n+        \"--llm\",\n+        type=str,\n+        default=None,\n+        help=\"Specify LLM as provider:model (e.g., Openai:gpt-4, Ollama:llama3) to override interactive selection\",\n+    )\n     parser.add_argument(\"--ollama\", action=\"store_true\", help=\"Use Ollama for local LLM inference\")\n \n     args = parser.parse_args()\n@@ -687,11 +693,26 @@ def analyze_performance(self):\n             selected_analysts = choices\n             print(f\"\\nSelected analysts: \" f\"{', '.join(Fore.GREEN + choice.title().replace('_', ' ') + Style.RESET_ALL for choice in choices)}\")\n \n-    # Select LLM model based on whether Ollama is being used\n+    # Select LLM model based on argument or interactive selection\n     model_name = \"\"\n     model_provider = None\n \n-    if args.ollama:\n+    # If command-line LLM is provided, use it directly\n+    if args.llm is not None:\n+        if ':' not in args.llm:\n+            print(f\"{Fore.RED}--llm argument must be in provider:model format (e.g., openai:gpt-4){Style.RESET_ALL}\")\n+            sys.exit(1)\n+        model_provider, model_name = args.llm.split(':', 1)\n+        if model_provider.lower() == ModelProvider.OLLAMA.value:\n+            # For Ollama, ensure model is available\n+            if not ensure_ollama_and_model(model_name):\n+                print(f\"{Fore.RED}Cannot proceed without Ollama and the selected model.{Style.RESET_ALL}\")\n+                sys.exit(1)\n+            print(f\"\\nSelected {Fore.CYAN}Ollama{Style.RESET_ALL} model: {Fore.GREEN + Style.BRIGHT}{model_name}{Style.RESET_ALL}\\n\")\n+            model_provider = ModelProvider.OLLAMA.value\n+        else:\n+            print(f\"\\nSelected {Fore.CYAN}{model_provider}{Style.RESET_ALL} model: {Fore.GREEN + Style.BRIGHT}{model_name}{Style.RESET_ALL}\\n\")\n+    elif args.ollama:\n         print(f\"{Fore.CYAN}Using Ollama for local LLM inference.{Style.RESET_ALL}\")\n \n         # Select from Ollama-specific models", "blob_url": "https://github.com/virattt/ai-hedge-fund/blob/60dc3133c3c89158a2c9fb7c80cd4f106dfb5324/src%2Fbacktester.py", "raw_url": "https://github.com/virattt/ai-hedge-fund/raw/60dc3133c3c89158a2c9fb7c80cd4f106dfb5324/src%2Fbacktester.py", "contents_url": "https://api.github.com/repos/virattt/ai-hedge-fund/contents/src%2Fbacktester.py?ref=60dc3133c3c89158a2c9fb7c80cd4f106dfb5324"}, {"filename": "src/main.py", "status": "modified", "additions": 24, "deletions": 3, "changes": 27, "patch": "@@ -145,6 +145,12 @@ def create_workflow(selected_analysts=None):\n     parser.add_argument(\"--end-date\", type=str, help=\"End date (YYYY-MM-DD). Defaults to today\")\n     parser.add_argument(\"--show-reasoning\", action=\"store_true\", help=\"Show reasoning from each agent\")\n     parser.add_argument(\"--show-agent-graph\", action=\"store_true\", help=\"Show the agent graph\")\n+    parser.add_argument(\n+        \"--llm\",\n+        type=str,\n+        default=None,\n+        help=\"Specify LLM as provider:model (e.g., Openai:gpt-4, Ollama:llama3) to override interactive selection\",\n+    )\n     parser.add_argument(\"--ollama\", action=\"store_true\", help=\"Use Ollama for local LLM inference\")\n \n     args = parser.parse_args()\n@@ -176,11 +182,26 @@ def create_workflow(selected_analysts=None):\n         selected_analysts = choices\n         print(f\"\\nSelected analysts: {', '.join(Fore.GREEN + choice.title().replace('_', ' ') + Style.RESET_ALL for choice in choices)}\\n\")\n \n-    # Select LLM model based on whether Ollama is being used\n+    # Select LLM model based on argument or interactive selection\n     model_name = \"\"\n     model_provider = \"\"\n \n-    if args.ollama:\n+    # If command-line LLM is provided, use it directly\n+    if args.llm is not None:\n+        if ':' not in args.llm:\n+            print(f\"{Fore.RED}--llm argument must be in provider:model format (e.g., Openai:gpt-4){Style.RESET_ALL}\")\n+            sys.exit(1)\n+        model_provider, model_name = args.llm.split(':', 1)\n+        if model_provider.lower() == ModelProvider.OLLAMA.value:\n+            # For Ollama, ensure model is available\n+            if not ensure_ollama_and_model(model_name):\n+                print(f\"{Fore.RED}Cannot proceed without Ollama and the selected model.{Style.RESET_ALL}\")\n+                sys.exit(1)\n+            print(f\"\\nSelected {Fore.CYAN}Ollama{Style.RESET_ALL} model: {Fore.GREEN + Style.BRIGHT}{model_name}{Style.RESET_ALL}\\n\")\n+            model_provider = ModelProvider.OLLAMA.value\n+        else:\n+            print(f\"\\nSelected {Fore.CYAN}{model_provider}{Style.RESET_ALL} model: {Fore.GREEN + Style.BRIGHT}{model_name}{Style.RESET_ALL}\\n\")\n+    elif args.ollama:\n         print(f\"{Fore.CYAN}Using Ollama for local LLM inference.{Style.RESET_ALL}\")\n \n         # Select from Ollama-specific models\n@@ -232,7 +253,7 @@ def create_workflow(selected_analysts=None):\n         if not model_choice:\n             print(\"\\n\\nInterrupt received. Exiting...\")\n             sys.exit(0)\n-\n+        \n         model_name, model_provider = model_choice\n \n         # Get model info using the helper function", "blob_url": "https://github.com/virattt/ai-hedge-fund/blob/60dc3133c3c89158a2c9fb7c80cd4f106dfb5324/src%2Fmain.py", "raw_url": "https://github.com/virattt/ai-hedge-fund/raw/60dc3133c3c89158a2c9fb7c80cd4f106dfb5324/src%2Fmain.py", "contents_url": "https://api.github.com/repos/virattt/ai-hedge-fund/contents/src%2Fmain.py?ref=60dc3133c3c89158a2c9fb7c80cd4f106dfb5324"}], "commits_data": [{"sha": "f3a21a57084553621c55fc11ffd9dab683ac59dd", "message": "Added command line argument to choose llm model", "author": "Romamo", "date": "2025-05-22 08:44:25+00:00", "url": "https://github.com/virattt/ai-hedge-fund/commit/f3a21a57084553621c55fc11ffd9dab683ac59dd"}, {"sha": "db3727cb36b95807089bfe943a8cf95da4c1294a", "message": "Removed wrongly added line", "author": "Romamo", "date": "2025-05-22 11:02:39+00:00", "url": "https://github.com/virattt/ai-hedge-fund/commit/db3727cb36b95807089bfe943a8cf95da4c1294a"}, {"sha": "94e3627ac3890dd11d3f3894f019e12cf471c3b9", "message": "Updated readme", "author": "Romamo", "date": "2025-05-22 11:27:47+00:00", "url": "https://github.com/virattt/ai-hedge-fund/commit/94e3627ac3890dd11d3f3894f019e12cf471c3b9"}, {"sha": "60e79c13a2ee4c49c9d0ab4257a932fba4870f9e", "message": "Added --llm argument to main.py too", "author": "Romamo", "date": "2025-05-22 11:42:27+00:00", "url": "https://github.com/virattt/ai-hedge-fund/commit/60e79c13a2ee4c49c9d0ab4257a932fba4870f9e"}, {"sha": "60dc3133c3c89158a2c9fb7c80cd4f106dfb5324", "message": "Added --llm argument to main.py too", "author": "Romamo", "date": "2025-05-22 11:44:36+00:00", "url": "https://github.com/virattt/ai-hedge-fund/commit/60dc3133c3c89158a2c9fb7c80cd4f106dfb5324"}], "reviews": [], "html_url": "https://github.com/virattt/ai-hedge-fund/pull/306", "diff_url": "https://github.com/virattt/ai-hedge-fund/pull/306.diff", "patch_url": "https://github.com/virattt/ai-hedge-fund/pull/306.patch"}, "analysis_duration": 8.833893775939941, "total_issues": 0}, "error": null}, {"id": "705f231b-296c-4727-b9d9-cddc239406dc", "type": "pr", "pr_url": "https://github.com/virattt/ai-hedge-fund/pull/306", "status": "completed", "mode": "deep", "created_at": "2025-07-27T16:21:54.921922", "started_at": "2025-07-27T16:21:55.661360", "completed_at": "2025-07-27T16:22:11.724803", "results": {"error": "Error during PR analysis: Failed to initialize embedding model: Cannot copy out of meta tensor; no data! Please use torch.nn.Module.to_empty() instead of torch.nn.Module.to() when moving module from meta to a different device.", "errors": ["Error during PR analysis: Failed to initialize embedding model: Cannot copy out of meta tensor; no data! Please use torch.nn.Module.to_empty() instead of torch.nn.Module.to() when moving module from meta to a different device."]}, "error": null}, {"id": "705f231b-296c-4727-b9d9-cddc239406dc", "type": "pr", "pr_url": "https://github.com/virattt/ai-hedge-fund/pull/306", "status": "completed", "mode": "deep", "created_at": "2025-07-27T16:21:54.921922", "started_at": "2025-07-27T16:21:55.661360", "completed_at": "2025-07-27T16:22:13.876139", "results": {"error": "Error during PR analysis: Failed to initialize embedding model: Cannot copy out of meta tensor; no data! Please use torch.nn.Module.to_empty() instead of torch.nn.Module.to() when moving module from meta to a different device.", "errors": ["Error during PR analysis: Failed to initialize embedding model: Cannot copy out of meta tensor; no data! Please use torch.nn.Module.to_empty() instead of torch.nn.Module.to() when moving module from meta to a different device."]}, "error": null}, {"id": "c3dea0f8-ba99-463a-8e20-83a3b8fa0745", "type": "pr", "pr_url": "https://github.com/virattt/ai-hedge-fund/pull/306", "status": "completed", "mode": "standard", "created_at": "2025-07-27T16:24:39.518753", "started_at": "2025-07-27T16:24:39.656292", "completed_at": "2025-07-27T16:25:06.919700", "results": {"error": "Error during PR analysis: Failed to initialize embedding model: 1 validation error for HuggingFaceEmbeddings\nclient\n  Extra inputs are not permitted [type=extra_forbidden, input_value=SentenceTransformer(\n  (0...e})\n  (2): Normalize()\n), input_type=SentenceTransformer]\n    For further information visit https://errors.pydantic.dev/2.11/v/extra_forbidden", "errors": ["Error during PR analysis: Failed to initialize embedding model: 1 validation error for HuggingFaceEmbeddings\nclient\n  Extra inputs are not permitted [type=extra_forbidden, input_value=SentenceTransformer(\n  (0...e})\n  (2): Normalize()\n), input_type=SentenceTransformer]\n    For further information visit https://errors.pydantic.dev/2.11/v/extra_forbidden"]}, "error": null}, {"id": "c3dea0f8-ba99-463a-8e20-83a3b8fa0745", "type": "pr", "pr_url": "https://github.com/virattt/ai-hedge-fund/pull/306", "status": "completed", "mode": "standard", "created_at": "2025-07-27T16:24:39.518753", "started_at": "2025-07-27T16:24:39.656292", "completed_at": "2025-07-27T16:25:08.261751", "results": {"error": "Error during PR analysis: Failed to initialize embedding model: 1 validation error for HuggingFaceEmbeddings\nclient\n  Extra inputs are not permitted [type=extra_forbidden, input_value=SentenceTransformer(\n  (0...e})\n  (2): Normalize()\n), input_type=SentenceTransformer]\n    For further information visit https://errors.pydantic.dev/2.11/v/extra_forbidden", "errors": ["Error during PR analysis: Failed to initialize embedding model: 1 validation error for HuggingFaceEmbeddings\nclient\n  Extra inputs are not permitted [type=extra_forbidden, input_value=SentenceTransformer(\n  (0...e})\n  (2): Normalize()\n), input_type=SentenceTransformer]\n    For further information visit https://errors.pydantic.dev/2.11/v/extra_forbidden"]}, "error": null}, {"id": "f7b18657-cff5-45a1-af44-3617eefb1cea", "type": "pr", "pr_url": "https://github.com/virattt/ai-hedge-fund/pull/306", "status": "completed", "mode": "standard", "created_at": "2025-07-27T16:30:03.834088", "started_at": "2025-07-27T16:30:04.696036", "completed_at": "2025-07-27T16:30:39.242862", "results": {"security_issues": [], "quality_issues": [], "logic_issues": [], "decision": {}, "pr_details": {"id": 2536944201, "number": 306, "title": "Argument --llm argument to main.py too", "body": "To specify the LLM provider and model, use the `--llm` argument in the format `Provider:Model` (e.g., `Openai:gpt-4`, `Ollama:llama3`). This will override the interactive model selection.\r\n\r\n```bash\r\n# With Poetry:\r\npoetry run python src/main.py --ticker AAPL,MSFT,NVDA --llm Openai:gpt-4\r\npoetry run python src/main.py --ticker AAPL,MSFT,NVDA --llm Ollama:llama3\r\n\r\n# With Docker (on Linux/Mac):\r\n./run.sh --ticker AAPL,MSFT,NVDA --llm Openai:gpt-4\r\n\r\n# With Docker (on Windows):\r\nrun.bat --ticker AAPL,MSFT,NVDA --llm Openai:gpt-4\r\n```\r\n\r\nIf you do not specify `--llm`, you will be prompted to select a provider and model interactively.\r\n\r\n\r\nREADME also updated", "state": "open", "created_at": "2025-05-22 11:43:33+00:00", "updated_at": "2025-05-22 11:44:42+00:00", "closed_at": null, "merged_at": null, "merge_commit_sha": null, "author": "Romamo", "assignees": [], "reviewers": [], "labels": [], "milestone": null, "base_branch": "main", "head_branch": "argument-llm-main", "base_sha": "ab8ce114e78e967948a3a48fe1206becc540e232", "head_sha": "60dc3133c3c89158a2c9fb7c80cd4f106dfb5324", "mergeable": false, "mergeable_state": "dirty", "merged": false, "comments": 0, "review_comments": 0, "commits": 5, "additions": 64, "deletions": 18, "changed_files": 3, "files": [{"filename": "README.md", "status": "modified", "additions": 17, "deletions": 13, "changes": 30, "patch": "@@ -147,6 +147,22 @@ run.bat --ticker AAPL,MSFT,NVDA main\n **Example Output:**\n <img width=\"992\" alt=\"Screenshot 2025-01-06 at 5 50 17 PM\" src=\"https://github.com/user-attachments/assets/e8ca04bf-9989-4a7d-a8b4-34e04666663b\" />\n \n+To specify the LLM provider and model, use the `--llm` argument in the format `Provider:Model` (e.g., `Openai:gpt-4`, `Ollama:llama3`). This will override the interactive model selection.\n+\n+```bash\n+# With Poetry:\n+poetry run python src/main.py --ticker AAPL,MSFT,NVDA --llm Openai:gpt-4\n+poetry run python src/main.py --ticker AAPL,MSFT,NVDA --llm Ollama:llama3\n+\n+# With Docker (on Linux/Mac):\n+./run.sh --ticker AAPL,MSFT,NVDA --llm Openai:gpt-4\n+\n+# With Docker (on Windows):\n+run.bat --ticker AAPL,MSFT,NVDA --llm Openai:gpt-4\n+```\n+\n+If you do not specify `--llm`, you will be prompted to select a provider and model interactively.\n+\n You can also specify a `--ollama` flag to run the AI hedge fund using local LLMs.\n \n ```bash\n@@ -205,6 +221,7 @@ run.bat --ticker AAPL,MSFT,NVDA backtest\n **Example Output:**\n <img width=\"941\" alt=\"Screenshot 2025-01-06 at 5 47 52 PM\" src=\"https://github.com/user-attachments/assets/00e794ea-8628-44e6-9a84-8f8a31ad3b47\" />\n \n+To specify the LLM provider and model, use the `--llm` argument the same way as for the Hedge Fund.\n \n You can optionally specify the start and end dates to backtest over a specific time period.\n \n@@ -219,19 +236,6 @@ poetry run python src/backtester.py --ticker AAPL,MSFT,NVDA --start-date 2024-01\n run.bat --ticker AAPL,MSFT,NVDA --start-date 2024-01-01 --end-date 2024-03-01 backtest\n ```\n \n-You can also specify a `--ollama` flag to run the backtester using local LLMs.\n-```bash\n-# With Poetry:\n-poetry run python src/backtester.py --ticker AAPL,MSFT,NVDA --ollama\n-\n-# With Docker (on Linux/Mac):\n-./run.sh --ticker AAPL,MSFT,NVDA --ollama backtest\n-\n-# With Docker (on Windows):\n-run.bat --ticker AAPL,MSFT,NVDA --ollama backtest\n-```\n-\n-\n ## Project Structure \n ```\n ai-hedge-fund/", "blob_url": "https://github.com/virattt/ai-hedge-fund/blob/60dc3133c3c89158a2c9fb7c80cd4f106dfb5324/README.md", "raw_url": "https://github.com/virattt/ai-hedge-fund/raw/60dc3133c3c89158a2c9fb7c80cd4f106dfb5324/README.md", "contents_url": "https://api.github.com/repos/virattt/ai-hedge-fund/contents/README.md?ref=60dc3133c3c89158a2c9fb7c80cd4f106dfb5324"}, {"filename": "src/backtester.py", "status": "modified", "additions": 23, "deletions": 2, "changes": 25, "patch": "@@ -651,6 +651,12 @@ def analyze_performance(self):\n         action=\"store_true\",\n         help=\"Use all available analysts (overrides --analysts)\",\n     )\n+    parser.add_argument(\n+        \"--llm\",\n+        type=str,\n+        default=None,\n+        help=\"Specify LLM as provider:model (e.g., Openai:gpt-4, Ollama:llama3) to override interactive selection\",\n+    )\n     parser.add_argument(\"--ollama\", action=\"store_true\", help=\"Use Ollama for local LLM inference\")\n \n     args = parser.parse_args()\n@@ -687,11 +693,26 @@ def analyze_performance(self):\n             selected_analysts = choices\n             print(f\"\\nSelected analysts: \" f\"{', '.join(Fore.GREEN + choice.title().replace('_', ' ') + Style.RESET_ALL for choice in choices)}\")\n \n-    # Select LLM model based on whether Ollama is being used\n+    # Select LLM model based on argument or interactive selection\n     model_name = \"\"\n     model_provider = None\n \n-    if args.ollama:\n+    # If command-line LLM is provided, use it directly\n+    if args.llm is not None:\n+        if ':' not in args.llm:\n+            print(f\"{Fore.RED}--llm argument must be in provider:model format (e.g., openai:gpt-4){Style.RESET_ALL}\")\n+            sys.exit(1)\n+        model_provider, model_name = args.llm.split(':', 1)\n+        if model_provider.lower() == ModelProvider.OLLAMA.value:\n+            # For Ollama, ensure model is available\n+            if not ensure_ollama_and_model(model_name):\n+                print(f\"{Fore.RED}Cannot proceed without Ollama and the selected model.{Style.RESET_ALL}\")\n+                sys.exit(1)\n+            print(f\"\\nSelected {Fore.CYAN}Ollama{Style.RESET_ALL} model: {Fore.GREEN + Style.BRIGHT}{model_name}{Style.RESET_ALL}\\n\")\n+            model_provider = ModelProvider.OLLAMA.value\n+        else:\n+            print(f\"\\nSelected {Fore.CYAN}{model_provider}{Style.RESET_ALL} model: {Fore.GREEN + Style.BRIGHT}{model_name}{Style.RESET_ALL}\\n\")\n+    elif args.ollama:\n         print(f\"{Fore.CYAN}Using Ollama for local LLM inference.{Style.RESET_ALL}\")\n \n         # Select from Ollama-specific models", "blob_url": "https://github.com/virattt/ai-hedge-fund/blob/60dc3133c3c89158a2c9fb7c80cd4f106dfb5324/src%2Fbacktester.py", "raw_url": "https://github.com/virattt/ai-hedge-fund/raw/60dc3133c3c89158a2c9fb7c80cd4f106dfb5324/src%2Fbacktester.py", "contents_url": "https://api.github.com/repos/virattt/ai-hedge-fund/contents/src%2Fbacktester.py?ref=60dc3133c3c89158a2c9fb7c80cd4f106dfb5324"}, {"filename": "src/main.py", "status": "modified", "additions": 24, "deletions": 3, "changes": 27, "patch": "@@ -145,6 +145,12 @@ def create_workflow(selected_analysts=None):\n     parser.add_argument(\"--end-date\", type=str, help=\"End date (YYYY-MM-DD). Defaults to today\")\n     parser.add_argument(\"--show-reasoning\", action=\"store_true\", help=\"Show reasoning from each agent\")\n     parser.add_argument(\"--show-agent-graph\", action=\"store_true\", help=\"Show the agent graph\")\n+    parser.add_argument(\n+        \"--llm\",\n+        type=str,\n+        default=None,\n+        help=\"Specify LLM as provider:model (e.g., Openai:gpt-4, Ollama:llama3) to override interactive selection\",\n+    )\n     parser.add_argument(\"--ollama\", action=\"store_true\", help=\"Use Ollama for local LLM inference\")\n \n     args = parser.parse_args()\n@@ -176,11 +182,26 @@ def create_workflow(selected_analysts=None):\n         selected_analysts = choices\n         print(f\"\\nSelected analysts: {', '.join(Fore.GREEN + choice.title().replace('_', ' ') + Style.RESET_ALL for choice in choices)}\\n\")\n \n-    # Select LLM model based on whether Ollama is being used\n+    # Select LLM model based on argument or interactive selection\n     model_name = \"\"\n     model_provider = \"\"\n \n-    if args.ollama:\n+    # If command-line LLM is provided, use it directly\n+    if args.llm is not None:\n+        if ':' not in args.llm:\n+            print(f\"{Fore.RED}--llm argument must be in provider:model format (e.g., Openai:gpt-4){Style.RESET_ALL}\")\n+            sys.exit(1)\n+        model_provider, model_name = args.llm.split(':', 1)\n+        if model_provider.lower() == ModelProvider.OLLAMA.value:\n+            # For Ollama, ensure model is available\n+            if not ensure_ollama_and_model(model_name):\n+                print(f\"{Fore.RED}Cannot proceed without Ollama and the selected model.{Style.RESET_ALL}\")\n+                sys.exit(1)\n+            print(f\"\\nSelected {Fore.CYAN}Ollama{Style.RESET_ALL} model: {Fore.GREEN + Style.BRIGHT}{model_name}{Style.RESET_ALL}\\n\")\n+            model_provider = ModelProvider.OLLAMA.value\n+        else:\n+            print(f\"\\nSelected {Fore.CYAN}{model_provider}{Style.RESET_ALL} model: {Fore.GREEN + Style.BRIGHT}{model_name}{Style.RESET_ALL}\\n\")\n+    elif args.ollama:\n         print(f\"{Fore.CYAN}Using Ollama for local LLM inference.{Style.RESET_ALL}\")\n \n         # Select from Ollama-specific models\n@@ -232,7 +253,7 @@ def create_workflow(selected_analysts=None):\n         if not model_choice:\n             print(\"\\n\\nInterrupt received. Exiting...\")\n             sys.exit(0)\n-\n+        \n         model_name, model_provider = model_choice\n \n         # Get model info using the helper function", "blob_url": "https://github.com/virattt/ai-hedge-fund/blob/60dc3133c3c89158a2c9fb7c80cd4f106dfb5324/src%2Fmain.py", "raw_url": "https://github.com/virattt/ai-hedge-fund/raw/60dc3133c3c89158a2c9fb7c80cd4f106dfb5324/src%2Fmain.py", "contents_url": "https://api.github.com/repos/virattt/ai-hedge-fund/contents/src%2Fmain.py?ref=60dc3133c3c89158a2c9fb7c80cd4f106dfb5324"}], "commits_data": [{"sha": "f3a21a57084553621c55fc11ffd9dab683ac59dd", "message": "Added command line argument to choose llm model", "author": "Romamo", "date": "2025-05-22 08:44:25+00:00", "url": "https://github.com/virattt/ai-hedge-fund/commit/f3a21a57084553621c55fc11ffd9dab683ac59dd"}, {"sha": "db3727cb36b95807089bfe943a8cf95da4c1294a", "message": "Removed wrongly added line", "author": "Romamo", "date": "2025-05-22 11:02:39+00:00", "url": "https://github.com/virattt/ai-hedge-fund/commit/db3727cb36b95807089bfe943a8cf95da4c1294a"}, {"sha": "94e3627ac3890dd11d3f3894f019e12cf471c3b9", "message": "Updated readme", "author": "Romamo", "date": "2025-05-22 11:27:47+00:00", "url": "https://github.com/virattt/ai-hedge-fund/commit/94e3627ac3890dd11d3f3894f019e12cf471c3b9"}, {"sha": "60e79c13a2ee4c49c9d0ab4257a932fba4870f9e", "message": "Added --llm argument to main.py too", "author": "Romamo", "date": "2025-05-22 11:42:27+00:00", "url": "https://github.com/virattt/ai-hedge-fund/commit/60e79c13a2ee4c49c9d0ab4257a932fba4870f9e"}, {"sha": "60dc3133c3c89158a2c9fb7c80cd4f106dfb5324", "message": "Added --llm argument to main.py too", "author": "Romamo", "date": "2025-05-22 11:44:36+00:00", "url": "https://github.com/virattt/ai-hedge-fund/commit/60dc3133c3c89158a2c9fb7c80cd4f106dfb5324"}], "reviews": [], "html_url": "https://github.com/virattt/ai-hedge-fund/pull/306", "diff_url": "https://github.com/virattt/ai-hedge-fund/pull/306.diff", "patch_url": "https://github.com/virattt/ai-hedge-fund/pull/306.patch"}, "analysis_duration": 7.768210411071777, "total_issues": 0}, "error": null}, {"id": "f7b18657-cff5-45a1-af44-3617eefb1cea", "type": "pr", "pr_url": "https://github.com/virattt/ai-hedge-fund/pull/306", "status": "completed", "mode": "standard", "created_at": "2025-07-27T16:30:03.834088", "started_at": "2025-07-27T16:30:04.696036", "completed_at": "2025-07-27T16:30:42.316155", "results": {"security_issues": [], "quality_issues": [], "logic_issues": [], "decision": {}, "pr_details": {"id": 2536944201, "number": 306, "title": "Argument --llm argument to main.py too", "body": "To specify the LLM provider and model, use the `--llm` argument in the format `Provider:Model` (e.g., `Openai:gpt-4`, `Ollama:llama3`). This will override the interactive model selection.\r\n\r\n```bash\r\n# With Poetry:\r\npoetry run python src/main.py --ticker AAPL,MSFT,NVDA --llm Openai:gpt-4\r\npoetry run python src/main.py --ticker AAPL,MSFT,NVDA --llm Ollama:llama3\r\n\r\n# With Docker (on Linux/Mac):\r\n./run.sh --ticker AAPL,MSFT,NVDA --llm Openai:gpt-4\r\n\r\n# With Docker (on Windows):\r\nrun.bat --ticker AAPL,MSFT,NVDA --llm Openai:gpt-4\r\n```\r\n\r\nIf you do not specify `--llm`, you will be prompted to select a provider and model interactively.\r\n\r\n\r\nREADME also updated", "state": "open", "created_at": "2025-05-22 11:43:33+00:00", "updated_at": "2025-05-22 11:44:42+00:00", "closed_at": null, "merged_at": null, "merge_commit_sha": null, "author": "Romamo", "assignees": [], "reviewers": [], "labels": [], "milestone": null, "base_branch": "main", "head_branch": "argument-llm-main", "base_sha": "ab8ce114e78e967948a3a48fe1206becc540e232", "head_sha": "60dc3133c3c89158a2c9fb7c80cd4f106dfb5324", "mergeable": false, "mergeable_state": "dirty", "merged": false, "comments": 0, "review_comments": 0, "commits": 5, "additions": 64, "deletions": 18, "changed_files": 3, "files": [{"filename": "README.md", "status": "modified", "additions": 17, "deletions": 13, "changes": 30, "patch": "@@ -147,6 +147,22 @@ run.bat --ticker AAPL,MSFT,NVDA main\n **Example Output:**\n <img width=\"992\" alt=\"Screenshot 2025-01-06 at 5 50 17 PM\" src=\"https://github.com/user-attachments/assets/e8ca04bf-9989-4a7d-a8b4-34e04666663b\" />\n \n+To specify the LLM provider and model, use the `--llm` argument in the format `Provider:Model` (e.g., `Openai:gpt-4`, `Ollama:llama3`). This will override the interactive model selection.\n+\n+```bash\n+# With Poetry:\n+poetry run python src/main.py --ticker AAPL,MSFT,NVDA --llm Openai:gpt-4\n+poetry run python src/main.py --ticker AAPL,MSFT,NVDA --llm Ollama:llama3\n+\n+# With Docker (on Linux/Mac):\n+./run.sh --ticker AAPL,MSFT,NVDA --llm Openai:gpt-4\n+\n+# With Docker (on Windows):\n+run.bat --ticker AAPL,MSFT,NVDA --llm Openai:gpt-4\n+```\n+\n+If you do not specify `--llm`, you will be prompted to select a provider and model interactively.\n+\n You can also specify a `--ollama` flag to run the AI hedge fund using local LLMs.\n \n ```bash\n@@ -205,6 +221,7 @@ run.bat --ticker AAPL,MSFT,NVDA backtest\n **Example Output:**\n <img width=\"941\" alt=\"Screenshot 2025-01-06 at 5 47 52 PM\" src=\"https://github.com/user-attachments/assets/00e794ea-8628-44e6-9a84-8f8a31ad3b47\" />\n \n+To specify the LLM provider and model, use the `--llm` argument the same way as for the Hedge Fund.\n \n You can optionally specify the start and end dates to backtest over a specific time period.\n \n@@ -219,19 +236,6 @@ poetry run python src/backtester.py --ticker AAPL,MSFT,NVDA --start-date 2024-01\n run.bat --ticker AAPL,MSFT,NVDA --start-date 2024-01-01 --end-date 2024-03-01 backtest\n ```\n \n-You can also specify a `--ollama` flag to run the backtester using local LLMs.\n-```bash\n-# With Poetry:\n-poetry run python src/backtester.py --ticker AAPL,MSFT,NVDA --ollama\n-\n-# With Docker (on Linux/Mac):\n-./run.sh --ticker AAPL,MSFT,NVDA --ollama backtest\n-\n-# With Docker (on Windows):\n-run.bat --ticker AAPL,MSFT,NVDA --ollama backtest\n-```\n-\n-\n ## Project Structure \n ```\n ai-hedge-fund/", "blob_url": "https://github.com/virattt/ai-hedge-fund/blob/60dc3133c3c89158a2c9fb7c80cd4f106dfb5324/README.md", "raw_url": "https://github.com/virattt/ai-hedge-fund/raw/60dc3133c3c89158a2c9fb7c80cd4f106dfb5324/README.md", "contents_url": "https://api.github.com/repos/virattt/ai-hedge-fund/contents/README.md?ref=60dc3133c3c89158a2c9fb7c80cd4f106dfb5324"}, {"filename": "src/backtester.py", "status": "modified", "additions": 23, "deletions": 2, "changes": 25, "patch": "@@ -651,6 +651,12 @@ def analyze_performance(self):\n         action=\"store_true\",\n         help=\"Use all available analysts (overrides --analysts)\",\n     )\n+    parser.add_argument(\n+        \"--llm\",\n+        type=str,\n+        default=None,\n+        help=\"Specify LLM as provider:model (e.g., Openai:gpt-4, Ollama:llama3) to override interactive selection\",\n+    )\n     parser.add_argument(\"--ollama\", action=\"store_true\", help=\"Use Ollama for local LLM inference\")\n \n     args = parser.parse_args()\n@@ -687,11 +693,26 @@ def analyze_performance(self):\n             selected_analysts = choices\n             print(f\"\\nSelected analysts: \" f\"{', '.join(Fore.GREEN + choice.title().replace('_', ' ') + Style.RESET_ALL for choice in choices)}\")\n \n-    # Select LLM model based on whether Ollama is being used\n+    # Select LLM model based on argument or interactive selection\n     model_name = \"\"\n     model_provider = None\n \n-    if args.ollama:\n+    # If command-line LLM is provided, use it directly\n+    if args.llm is not None:\n+        if ':' not in args.llm:\n+            print(f\"{Fore.RED}--llm argument must be in provider:model format (e.g., openai:gpt-4){Style.RESET_ALL}\")\n+            sys.exit(1)\n+        model_provider, model_name = args.llm.split(':', 1)\n+        if model_provider.lower() == ModelProvider.OLLAMA.value:\n+            # For Ollama, ensure model is available\n+            if not ensure_ollama_and_model(model_name):\n+                print(f\"{Fore.RED}Cannot proceed without Ollama and the selected model.{Style.RESET_ALL}\")\n+                sys.exit(1)\n+            print(f\"\\nSelected {Fore.CYAN}Ollama{Style.RESET_ALL} model: {Fore.GREEN + Style.BRIGHT}{model_name}{Style.RESET_ALL}\\n\")\n+            model_provider = ModelProvider.OLLAMA.value\n+        else:\n+            print(f\"\\nSelected {Fore.CYAN}{model_provider}{Style.RESET_ALL} model: {Fore.GREEN + Style.BRIGHT}{model_name}{Style.RESET_ALL}\\n\")\n+    elif args.ollama:\n         print(f\"{Fore.CYAN}Using Ollama for local LLM inference.{Style.RESET_ALL}\")\n \n         # Select from Ollama-specific models", "blob_url": "https://github.com/virattt/ai-hedge-fund/blob/60dc3133c3c89158a2c9fb7c80cd4f106dfb5324/src%2Fbacktester.py", "raw_url": "https://github.com/virattt/ai-hedge-fund/raw/60dc3133c3c89158a2c9fb7c80cd4f106dfb5324/src%2Fbacktester.py", "contents_url": "https://api.github.com/repos/virattt/ai-hedge-fund/contents/src%2Fbacktester.py?ref=60dc3133c3c89158a2c9fb7c80cd4f106dfb5324"}, {"filename": "src/main.py", "status": "modified", "additions": 24, "deletions": 3, "changes": 27, "patch": "@@ -145,6 +145,12 @@ def create_workflow(selected_analysts=None):\n     parser.add_argument(\"--end-date\", type=str, help=\"End date (YYYY-MM-DD). Defaults to today\")\n     parser.add_argument(\"--show-reasoning\", action=\"store_true\", help=\"Show reasoning from each agent\")\n     parser.add_argument(\"--show-agent-graph\", action=\"store_true\", help=\"Show the agent graph\")\n+    parser.add_argument(\n+        \"--llm\",\n+        type=str,\n+        default=None,\n+        help=\"Specify LLM as provider:model (e.g., Openai:gpt-4, Ollama:llama3) to override interactive selection\",\n+    )\n     parser.add_argument(\"--ollama\", action=\"store_true\", help=\"Use Ollama for local LLM inference\")\n \n     args = parser.parse_args()\n@@ -176,11 +182,26 @@ def create_workflow(selected_analysts=None):\n         selected_analysts = choices\n         print(f\"\\nSelected analysts: {', '.join(Fore.GREEN + choice.title().replace('_', ' ') + Style.RESET_ALL for choice in choices)}\\n\")\n \n-    # Select LLM model based on whether Ollama is being used\n+    # Select LLM model based on argument or interactive selection\n     model_name = \"\"\n     model_provider = \"\"\n \n-    if args.ollama:\n+    # If command-line LLM is provided, use it directly\n+    if args.llm is not None:\n+        if ':' not in args.llm:\n+            print(f\"{Fore.RED}--llm argument must be in provider:model format (e.g., Openai:gpt-4){Style.RESET_ALL}\")\n+            sys.exit(1)\n+        model_provider, model_name = args.llm.split(':', 1)\n+        if model_provider.lower() == ModelProvider.OLLAMA.value:\n+            # For Ollama, ensure model is available\n+            if not ensure_ollama_and_model(model_name):\n+                print(f\"{Fore.RED}Cannot proceed without Ollama and the selected model.{Style.RESET_ALL}\")\n+                sys.exit(1)\n+            print(f\"\\nSelected {Fore.CYAN}Ollama{Style.RESET_ALL} model: {Fore.GREEN + Style.BRIGHT}{model_name}{Style.RESET_ALL}\\n\")\n+            model_provider = ModelProvider.OLLAMA.value\n+        else:\n+            print(f\"\\nSelected {Fore.CYAN}{model_provider}{Style.RESET_ALL} model: {Fore.GREEN + Style.BRIGHT}{model_name}{Style.RESET_ALL}\\n\")\n+    elif args.ollama:\n         print(f\"{Fore.CYAN}Using Ollama for local LLM inference.{Style.RESET_ALL}\")\n \n         # Select from Ollama-specific models\n@@ -232,7 +253,7 @@ def create_workflow(selected_analysts=None):\n         if not model_choice:\n             print(\"\\n\\nInterrupt received. Exiting...\")\n             sys.exit(0)\n-\n+        \n         model_name, model_provider = model_choice\n \n         # Get model info using the helper function", "blob_url": "https://github.com/virattt/ai-hedge-fund/blob/60dc3133c3c89158a2c9fb7c80cd4f106dfb5324/src%2Fmain.py", "raw_url": "https://github.com/virattt/ai-hedge-fund/raw/60dc3133c3c89158a2c9fb7c80cd4f106dfb5324/src%2Fmain.py", "contents_url": "https://api.github.com/repos/virattt/ai-hedge-fund/contents/src%2Fmain.py?ref=60dc3133c3c89158a2c9fb7c80cd4f106dfb5324"}], "commits_data": [{"sha": "f3a21a57084553621c55fc11ffd9dab683ac59dd", "message": "Added command line argument to choose llm model", "author": "Romamo", "date": "2025-05-22 08:44:25+00:00", "url": "https://github.com/virattt/ai-hedge-fund/commit/f3a21a57084553621c55fc11ffd9dab683ac59dd"}, {"sha": "db3727cb36b95807089bfe943a8cf95da4c1294a", "message": "Removed wrongly added line", "author": "Romamo", "date": "2025-05-22 11:02:39+00:00", "url": "https://github.com/virattt/ai-hedge-fund/commit/db3727cb36b95807089bfe943a8cf95da4c1294a"}, {"sha": "94e3627ac3890dd11d3f3894f019e12cf471c3b9", "message": "Updated readme", "author": "Romamo", "date": "2025-05-22 11:27:47+00:00", "url": "https://github.com/virattt/ai-hedge-fund/commit/94e3627ac3890dd11d3f3894f019e12cf471c3b9"}, {"sha": "60e79c13a2ee4c49c9d0ab4257a932fba4870f9e", "message": "Added --llm argument to main.py too", "author": "Romamo", "date": "2025-05-22 11:42:27+00:00", "url": "https://github.com/virattt/ai-hedge-fund/commit/60e79c13a2ee4c49c9d0ab4257a932fba4870f9e"}, {"sha": "60dc3133c3c89158a2c9fb7c80cd4f106dfb5324", "message": "Added --llm argument to main.py too", "author": "Romamo", "date": "2025-05-22 11:44:36+00:00", "url": "https://github.com/virattt/ai-hedge-fund/commit/60dc3133c3c89158a2c9fb7c80cd4f106dfb5324"}], "reviews": [], "html_url": "https://github.com/virattt/ai-hedge-fund/pull/306", "diff_url": "https://github.com/virattt/ai-hedge-fund/pull/306.diff", "patch_url": "https://github.com/virattt/ai-hedge-fund/pull/306.patch"}, "analysis_duration": 10.434433937072754, "total_issues": 0}, "error": null}, {"id": "45ca6b29-e9c7-4234-b565-f9e221be84d5", "type": "security", "code_snippets": [{"file_path": "auth.py", "content": "import os\nimport sqlite3\n\nADMIN_PASSWORD = os.getenv(\"ADMIN_PASSWORD\", \"superSecret123!\")\n\ndef login(username, password):\n    if password == ADMIN_PASSWORD:\n        return True\n    return False\n\ndef get_user_data(user_id):\n    connection = sqlite3.connect(\"app.db\")\n    cursor = connection.cursor()\n    cursor.execute(\"SELECT * FROM users WHERE id = ?\", (user_id,))\n    result = cursor.fetchone()\n    connection.close()\n \u00a0\u00a0\u00a0return\u00a0result\n", "language": "python"}], "status": "completed", "created_at": "2025-07-27T16:33:34.403245", "started_at": "2025-07-27T16:33:35.517563", "completed_at": "2025-07-27T16:33:37.324385", "results": {"security_issues": [{"type": "Hardcoded passwords/secrets/API keys", "severity": "critical", "description": "The ADMIN_PASSWORD is either hardcoded or retrieved from an environment variable with a fallback to a hardcoded value.  This is a critical vulnerability as it allows attackers to gain admin access if they can access the environment variables or the code itself.", "line": 2, "file": "auth.py", "confidence": 1.0}, {"type": "SQL injection", "severity": "critical", "description": "The get_user_data function is vulnerable to SQL injection.  User-supplied input (user_id) is directly incorporated into the SQL query without proper sanitization or parameterization. An attacker could inject malicious SQL code to retrieve sensitive data or modify the database.", "line": 14, "file": "auth.py", "confidence": 1.0}, {"type": "Authentication bypass", "severity": "critical", "description": "The login function only checks if the provided password matches the ADMIN_PASSWORD. There's no user verification, allowing anyone who knows the admin password to gain full access.  This is a critical vulnerability.", "line": 6, "file": "auth.py", "confidence": 1.0}], "total_issues": 3, "severity_breakdown": {"critical": 3, "high": 0, "medium": 0, "low": 0}, "decision": {"decision": "BLOCK", "risk_level": "critical", "summary": "Found 3 critical security issues", "recommendations": ["Fix critical security issues immediately", "Review security best practices"]}, "errors": [], "analysis_method": "agent_system"}, "error": null}, {"id": "45ca6b29-e9c7-4234-b565-f9e221be84d5", "type": "security", "code_snippets": [{"file_path": "auth.py", "content": "import os\nimport sqlite3\n\nADMIN_PASSWORD = os.getenv(\"ADMIN_PASSWORD\", \"superSecret123!\")\n\ndef login(username, password):\n    if password == ADMIN_PASSWORD:\n        return True\n    return False\n\ndef get_user_data(user_id):\n    connection = sqlite3.connect(\"app.db\")\n    cursor = connection.cursor()\n    cursor.execute(\"SELECT * FROM users WHERE id = ?\", (user_id,))\n    result = cursor.fetchone()\n    connection.close()\n \u00a0\u00a0\u00a0return\u00a0result\n", "language": "python"}], "status": "completed", "created_at": "2025-07-27T16:33:34.403245", "started_at": "2025-07-27T16:33:35.517563", "completed_at": "2025-07-27T16:33:39.149444", "results": {"security_issues": [{"type": "Hardcoded passwords/secrets/API keys", "severity": "critical", "description": "The ADMIN_PASSWORD is either hardcoded or retrieved from an environment variable with a fallback to a hardcoded value.  This is a critical vulnerability as it allows attackers to gain admin access if they can access the environment variables or the code itself.", "line": 2, "file": "auth.py", "confidence": 1.0}, {"type": "SQL injection", "severity": "critical", "description": "The get_user_data function is vulnerable to SQL injection.  User-supplied input (user_id) is directly incorporated into the SQL query without proper sanitization or parameterization. An attacker could inject malicious SQL code to retrieve sensitive data or modify the database.", "line": 14, "file": "auth.py", "confidence": 1.0}, {"type": "Authentication bypass", "severity": "critical", "description": "The login function only checks if the provided password matches the ADMIN_PASSWORD. There's no user verification.  An attacker who knows the ADMIN_PASSWORD gains full access.", "line": 6, "file": "auth.py", "confidence": 1.0}, {"type": "Missing input validation", "severity": "medium", "description": "The get_user_data function does not validate the user_id input.  This could lead to unexpected behavior or errors if the input is not a valid integer or if it's formatted in a way that could cause issues with the database query.", "line": 14, "file": "auth.py", "confidence": 0.9}], "total_issues": 4, "severity_breakdown": {"critical": 3, "high": 0, "medium": 1, "low": 0}, "decision": {"decision": "BLOCK", "risk_level": "critical", "summary": "Found 3 critical security issues", "recommendations": ["Fix critical security issues immediately", "Review security best practices"]}, "errors": [], "analysis_method": "agent_system"}, "error": null}, {"id": "893084b7-0f16-43e5-902e-db0e9586d5a8", "type": "pr", "pr_url": "https://github.com/virattt/ai-hedge-fund/pull/306", "status": "completed", "mode": "standard", "created_at": "2025-07-27T17:13:58.456109", "started_at": "2025-07-27T17:13:59.462423", "completed_at": "2025-07-27T17:14:31.096252", "results": {"error": "Error during PR analysis: Failed to initialize embedding model: Cannot copy out of meta tensor; no data! Please use torch.nn.Module.to_empty() instead of torch.nn.Module.to() when moving module from meta to a different device.", "errors": ["Error during PR analysis: Failed to initialize embedding model: Cannot copy out of meta tensor; no data! Please use torch.nn.Module.to_empty() instead of torch.nn.Module.to() when moving module from meta to a different device."]}, "error": null}, {"id": "893084b7-0f16-43e5-902e-db0e9586d5a8", "type": "pr", "pr_url": "https://github.com/virattt/ai-hedge-fund/pull/306", "status": "completed", "mode": "standard", "created_at": "2025-07-27T17:13:58.456109", "started_at": "2025-07-27T17:13:59.462423", "completed_at": "2025-07-27T17:14:31.189943", "results": {"error": "Error during PR analysis: Failed to initialize embedding model: Cannot copy out of meta tensor; no data! Please use torch.nn.Module.to_empty() instead of torch.nn.Module.to() when moving module from meta to a different device.", "errors": ["Error during PR analysis: Failed to initialize embedding model: Cannot copy out of meta tensor; no data! Please use torch.nn.Module.to_empty() instead of torch.nn.Module.to() when moving module from meta to a different device."]}, "error": null}, {"id": "4c9ecca1-d56b-4b3f-9aeb-360073559f0c", "type": "pr", "pr_url": "https://github.com/virattt/ai-hedge-fund/pull/306", "status": "completed", "mode": "standard", "created_at": "2025-07-27T17:21:57.111156", "started_at": "2025-07-27T17:21:57.352958", "completed_at": "2025-07-27T17:22:32.089760", "results": {"error": "Error during PR analysis: Failed to initialize embedding model: Cannot copy out of meta tensor; no data! Please use torch.nn.Module.to_empty() instead of torch.nn.Module.to() when moving module from meta to a different device.", "errors": ["Error during PR analysis: Failed to initialize embedding model: Cannot copy out of meta tensor; no data! Please use torch.nn.Module.to_empty() instead of torch.nn.Module.to() when moving module from meta to a different device."]}, "error": null}, {"id": "4c9ecca1-d56b-4b3f-9aeb-360073559f0c", "type": "pr", "pr_url": "https://github.com/virattt/ai-hedge-fund/pull/306", "status": "completed", "mode": "standard", "created_at": "2025-07-27T17:21:57.111156", "started_at": "2025-07-27T17:21:57.352958", "completed_at": "2025-07-27T17:22:32.505201", "results": {"error": "Error during PR analysis: Failed to initialize embedding model: Cannot copy out of meta tensor; no data! Please use torch.nn.Module.to_empty() instead of torch.nn.Module.to() when moving module from meta to a different device.", "errors": ["Error during PR analysis: Failed to initialize embedding model: Cannot copy out of meta tensor; no data! Please use torch.nn.Module.to_empty() instead of torch.nn.Module.to() when moving module from meta to a different device."]}, "error": null}, {"id": "94a061d7-4176-49a5-b72d-fe9eaafcb3fa", "type": "pr", "pr_url": "https://github.com/virattt/ai-hedge-fund/pull/306", "status": "completed", "mode": "standard", "created_at": "2025-07-27T17:33:09.676875", "started_at": "2025-07-27T17:33:10.944821", "completed_at": "2025-07-27T17:33:32.591810", "results": {"error": "Error during PR analysis: Failed to initialize embedding model: Cannot copy out of meta tensor; no data! Please use torch.nn.Module.to_empty() instead of torch.nn.Module.to() when moving module from meta to a different device.", "errors": ["Error during PR analysis: Failed to initialize embedding model: Cannot copy out of meta tensor; no data! Please use torch.nn.Module.to_empty() instead of torch.nn.Module.to() when moving module from meta to a different device."]}, "error": null}, {"id": "94a061d7-4176-49a5-b72d-fe9eaafcb3fa", "type": "pr", "pr_url": "https://github.com/virattt/ai-hedge-fund/pull/306", "status": "completed", "mode": "standard", "created_at": "2025-07-27T17:33:09.676875", "started_at": "2025-07-27T17:33:10.944821", "completed_at": "2025-07-27T17:33:43.643649", "results": {"security_issues": [], "quality_issues": [], "logic_issues": [], "decision": {}, "pr_details": {"id": 2536944201, "number": 306, "title": "Argument --llm argument to main.py too", "body": "To specify the LLM provider and model, use the `--llm` argument in the format `Provider:Model` (e.g., `Openai:gpt-4`, `Ollama:llama3`). This will override the interactive model selection.\r\n\r\n```bash\r\n# With Poetry:\r\npoetry run python src/main.py --ticker AAPL,MSFT,NVDA --llm Openai:gpt-4\r\npoetry run python src/main.py --ticker AAPL,MSFT,NVDA --llm Ollama:llama3\r\n\r\n# With Docker (on Linux/Mac):\r\n./run.sh --ticker AAPL,MSFT,NVDA --llm Openai:gpt-4\r\n\r\n# With Docker (on Windows):\r\nrun.bat --ticker AAPL,MSFT,NVDA --llm Openai:gpt-4\r\n```\r\n\r\nIf you do not specify `--llm`, you will be prompted to select a provider and model interactively.\r\n\r\n\r\nREADME also updated", "state": "open", "created_at": "2025-05-22 11:43:33+00:00", "updated_at": "2025-05-22 11:44:42+00:00", "closed_at": null, "merged_at": null, "merge_commit_sha": null, "author": "Romamo", "assignees": [], "reviewers": [], "labels": [], "milestone": null, "base_branch": "main", "head_branch": "argument-llm-main", "base_sha": "ab8ce114e78e967948a3a48fe1206becc540e232", "head_sha": "60dc3133c3c89158a2c9fb7c80cd4f106dfb5324", "mergeable": false, "mergeable_state": "dirty", "merged": false, "comments": 0, "review_comments": 0, "commits": 5, "additions": 64, "deletions": 18, "changed_files": 3, "files": [{"filename": "README.md", "status": "modified", "additions": 17, "deletions": 13, "changes": 30, "patch": "@@ -147,6 +147,22 @@ run.bat --ticker AAPL,MSFT,NVDA main\n **Example Output:**\n <img width=\"992\" alt=\"Screenshot 2025-01-06 at 5 50 17 PM\" src=\"https://github.com/user-attachments/assets/e8ca04bf-9989-4a7d-a8b4-34e04666663b\" />\n \n+To specify the LLM provider and model, use the `--llm` argument in the format `Provider:Model` (e.g., `Openai:gpt-4`, `Ollama:llama3`). This will override the interactive model selection.\n+\n+```bash\n+# With Poetry:\n+poetry run python src/main.py --ticker AAPL,MSFT,NVDA --llm Openai:gpt-4\n+poetry run python src/main.py --ticker AAPL,MSFT,NVDA --llm Ollama:llama3\n+\n+# With Docker (on Linux/Mac):\n+./run.sh --ticker AAPL,MSFT,NVDA --llm Openai:gpt-4\n+\n+# With Docker (on Windows):\n+run.bat --ticker AAPL,MSFT,NVDA --llm Openai:gpt-4\n+```\n+\n+If you do not specify `--llm`, you will be prompted to select a provider and model interactively.\n+\n You can also specify a `--ollama` flag to run the AI hedge fund using local LLMs.\n \n ```bash\n@@ -205,6 +221,7 @@ run.bat --ticker AAPL,MSFT,NVDA backtest\n **Example Output:**\n <img width=\"941\" alt=\"Screenshot 2025-01-06 at 5 47 52 PM\" src=\"https://github.com/user-attachments/assets/00e794ea-8628-44e6-9a84-8f8a31ad3b47\" />\n \n+To specify the LLM provider and model, use the `--llm` argument the same way as for the Hedge Fund.\n \n You can optionally specify the start and end dates to backtest over a specific time period.\n \n@@ -219,19 +236,6 @@ poetry run python src/backtester.py --ticker AAPL,MSFT,NVDA --start-date 2024-01\n run.bat --ticker AAPL,MSFT,NVDA --start-date 2024-01-01 --end-date 2024-03-01 backtest\n ```\n \n-You can also specify a `--ollama` flag to run the backtester using local LLMs.\n-```bash\n-# With Poetry:\n-poetry run python src/backtester.py --ticker AAPL,MSFT,NVDA --ollama\n-\n-# With Docker (on Linux/Mac):\n-./run.sh --ticker AAPL,MSFT,NVDA --ollama backtest\n-\n-# With Docker (on Windows):\n-run.bat --ticker AAPL,MSFT,NVDA --ollama backtest\n-```\n-\n-\n ## Project Structure \n ```\n ai-hedge-fund/", "blob_url": "https://github.com/virattt/ai-hedge-fund/blob/60dc3133c3c89158a2c9fb7c80cd4f106dfb5324/README.md", "raw_url": "https://github.com/virattt/ai-hedge-fund/raw/60dc3133c3c89158a2c9fb7c80cd4f106dfb5324/README.md", "contents_url": "https://api.github.com/repos/virattt/ai-hedge-fund/contents/README.md?ref=60dc3133c3c89158a2c9fb7c80cd4f106dfb5324"}, {"filename": "src/backtester.py", "status": "modified", "additions": 23, "deletions": 2, "changes": 25, "patch": "@@ -651,6 +651,12 @@ def analyze_performance(self):\n         action=\"store_true\",\n         help=\"Use all available analysts (overrides --analysts)\",\n     )\n+    parser.add_argument(\n+        \"--llm\",\n+        type=str,\n+        default=None,\n+        help=\"Specify LLM as provider:model (e.g., Openai:gpt-4, Ollama:llama3) to override interactive selection\",\n+    )\n     parser.add_argument(\"--ollama\", action=\"store_true\", help=\"Use Ollama for local LLM inference\")\n \n     args = parser.parse_args()\n@@ -687,11 +693,26 @@ def analyze_performance(self):\n             selected_analysts = choices\n             print(f\"\\nSelected analysts: \" f\"{', '.join(Fore.GREEN + choice.title().replace('_', ' ') + Style.RESET_ALL for choice in choices)}\")\n \n-    # Select LLM model based on whether Ollama is being used\n+    # Select LLM model based on argument or interactive selection\n     model_name = \"\"\n     model_provider = None\n \n-    if args.ollama:\n+    # If command-line LLM is provided, use it directly\n+    if args.llm is not None:\n+        if ':' not in args.llm:\n+            print(f\"{Fore.RED}--llm argument must be in provider:model format (e.g., openai:gpt-4){Style.RESET_ALL}\")\n+            sys.exit(1)\n+        model_provider, model_name = args.llm.split(':', 1)\n+        if model_provider.lower() == ModelProvider.OLLAMA.value:\n+            # For Ollama, ensure model is available\n+            if not ensure_ollama_and_model(model_name):\n+                print(f\"{Fore.RED}Cannot proceed without Ollama and the selected model.{Style.RESET_ALL}\")\n+                sys.exit(1)\n+            print(f\"\\nSelected {Fore.CYAN}Ollama{Style.RESET_ALL} model: {Fore.GREEN + Style.BRIGHT}{model_name}{Style.RESET_ALL}\\n\")\n+            model_provider = ModelProvider.OLLAMA.value\n+        else:\n+            print(f\"\\nSelected {Fore.CYAN}{model_provider}{Style.RESET_ALL} model: {Fore.GREEN + Style.BRIGHT}{model_name}{Style.RESET_ALL}\\n\")\n+    elif args.ollama:\n         print(f\"{Fore.CYAN}Using Ollama for local LLM inference.{Style.RESET_ALL}\")\n \n         # Select from Ollama-specific models", "blob_url": "https://github.com/virattt/ai-hedge-fund/blob/60dc3133c3c89158a2c9fb7c80cd4f106dfb5324/src%2Fbacktester.py", "raw_url": "https://github.com/virattt/ai-hedge-fund/raw/60dc3133c3c89158a2c9fb7c80cd4f106dfb5324/src%2Fbacktester.py", "contents_url": "https://api.github.com/repos/virattt/ai-hedge-fund/contents/src%2Fbacktester.py?ref=60dc3133c3c89158a2c9fb7c80cd4f106dfb5324"}, {"filename": "src/main.py", "status": "modified", "additions": 24, "deletions": 3, "changes": 27, "patch": "@@ -145,6 +145,12 @@ def create_workflow(selected_analysts=None):\n     parser.add_argument(\"--end-date\", type=str, help=\"End date (YYYY-MM-DD). Defaults to today\")\n     parser.add_argument(\"--show-reasoning\", action=\"store_true\", help=\"Show reasoning from each agent\")\n     parser.add_argument(\"--show-agent-graph\", action=\"store_true\", help=\"Show the agent graph\")\n+    parser.add_argument(\n+        \"--llm\",\n+        type=str,\n+        default=None,\n+        help=\"Specify LLM as provider:model (e.g., Openai:gpt-4, Ollama:llama3) to override interactive selection\",\n+    )\n     parser.add_argument(\"--ollama\", action=\"store_true\", help=\"Use Ollama for local LLM inference\")\n \n     args = parser.parse_args()\n@@ -176,11 +182,26 @@ def create_workflow(selected_analysts=None):\n         selected_analysts = choices\n         print(f\"\\nSelected analysts: {', '.join(Fore.GREEN + choice.title().replace('_', ' ') + Style.RESET_ALL for choice in choices)}\\n\")\n \n-    # Select LLM model based on whether Ollama is being used\n+    # Select LLM model based on argument or interactive selection\n     model_name = \"\"\n     model_provider = \"\"\n \n-    if args.ollama:\n+    # If command-line LLM is provided, use it directly\n+    if args.llm is not None:\n+        if ':' not in args.llm:\n+            print(f\"{Fore.RED}--llm argument must be in provider:model format (e.g., Openai:gpt-4){Style.RESET_ALL}\")\n+            sys.exit(1)\n+        model_provider, model_name = args.llm.split(':', 1)\n+        if model_provider.lower() == ModelProvider.OLLAMA.value:\n+            # For Ollama, ensure model is available\n+            if not ensure_ollama_and_model(model_name):\n+                print(f\"{Fore.RED}Cannot proceed without Ollama and the selected model.{Style.RESET_ALL}\")\n+                sys.exit(1)\n+            print(f\"\\nSelected {Fore.CYAN}Ollama{Style.RESET_ALL} model: {Fore.GREEN + Style.BRIGHT}{model_name}{Style.RESET_ALL}\\n\")\n+            model_provider = ModelProvider.OLLAMA.value\n+        else:\n+            print(f\"\\nSelected {Fore.CYAN}{model_provider}{Style.RESET_ALL} model: {Fore.GREEN + Style.BRIGHT}{model_name}{Style.RESET_ALL}\\n\")\n+    elif args.ollama:\n         print(f\"{Fore.CYAN}Using Ollama for local LLM inference.{Style.RESET_ALL}\")\n \n         # Select from Ollama-specific models\n@@ -232,7 +253,7 @@ def create_workflow(selected_analysts=None):\n         if not model_choice:\n             print(\"\\n\\nInterrupt received. Exiting...\")\n             sys.exit(0)\n-\n+        \n         model_name, model_provider = model_choice\n \n         # Get model info using the helper function", "blob_url": "https://github.com/virattt/ai-hedge-fund/blob/60dc3133c3c89158a2c9fb7c80cd4f106dfb5324/src%2Fmain.py", "raw_url": "https://github.com/virattt/ai-hedge-fund/raw/60dc3133c3c89158a2c9fb7c80cd4f106dfb5324/src%2Fmain.py", "contents_url": "https://api.github.com/repos/virattt/ai-hedge-fund/contents/src%2Fmain.py?ref=60dc3133c3c89158a2c9fb7c80cd4f106dfb5324"}], "commits_data": [{"sha": "f3a21a57084553621c55fc11ffd9dab683ac59dd", "message": "Added command line argument to choose llm model", "author": "Romamo", "date": "2025-05-22 08:44:25+00:00", "url": "https://github.com/virattt/ai-hedge-fund/commit/f3a21a57084553621c55fc11ffd9dab683ac59dd"}, {"sha": "db3727cb36b95807089bfe943a8cf95da4c1294a", "message": "Removed wrongly added line", "author": "Romamo", "date": "2025-05-22 11:02:39+00:00", "url": "https://github.com/virattt/ai-hedge-fund/commit/db3727cb36b95807089bfe943a8cf95da4c1294a"}, {"sha": "94e3627ac3890dd11d3f3894f019e12cf471c3b9", "message": "Updated readme", "author": "Romamo", "date": "2025-05-22 11:27:47+00:00", "url": "https://github.com/virattt/ai-hedge-fund/commit/94e3627ac3890dd11d3f3894f019e12cf471c3b9"}, {"sha": "60e79c13a2ee4c49c9d0ab4257a932fba4870f9e", "message": "Added --llm argument to main.py too", "author": "Romamo", "date": "2025-05-22 11:42:27+00:00", "url": "https://github.com/virattt/ai-hedge-fund/commit/60e79c13a2ee4c49c9d0ab4257a932fba4870f9e"}, {"sha": "60dc3133c3c89158a2c9fb7c80cd4f106dfb5324", "message": "Added --llm argument to main.py too", "author": "Romamo", "date": "2025-05-22 11:44:36+00:00", "url": "https://github.com/virattt/ai-hedge-fund/commit/60dc3133c3c89158a2c9fb7c80cd4f106dfb5324"}], "reviews": [], "html_url": "https://github.com/virattt/ai-hedge-fund/pull/306", "diff_url": "https://github.com/virattt/ai-hedge-fund/pull/306.diff", "patch_url": "https://github.com/virattt/ai-hedge-fund/pull/306.patch"}, "analysis_duration": 10.231552600860596, "total_issues": 0}, "error": null}, {"id": "2c643fda-7b80-4e83-90b2-440f2a0e0988", "type": "pr", "pr_url": "https://github.com/virattt/ai-hedge-fund/pull/306", "status": "completed", "mode": "standard", "created_at": "2025-07-27T17:40:34.397676", "started_at": "2025-07-27T17:40:35.372674", "completed_at": "2025-07-27T17:42:25.107959", "results": {"security_issues": [], "quality_issues": [], "logic_issues": [], "decision": {}, "pr_details": {"id": 2536944201, "number": 306, "title": "Argument --llm argument to main.py too", "body": "To specify the LLM provider and model, use the `--llm` argument in the format `Provider:Model` (e.g., `Openai:gpt-4`, `Ollama:llama3`). This will override the interactive model selection.\r\n\r\n```bash\r\n# With Poetry:\r\npoetry run python src/main.py --ticker AAPL,MSFT,NVDA --llm Openai:gpt-4\r\npoetry run python src/main.py --ticker AAPL,MSFT,NVDA --llm Ollama:llama3\r\n\r\n# With Docker (on Linux/Mac):\r\n./run.sh --ticker AAPL,MSFT,NVDA --llm Openai:gpt-4\r\n\r\n# With Docker (on Windows):\r\nrun.bat --ticker AAPL,MSFT,NVDA --llm Openai:gpt-4\r\n```\r\n\r\nIf you do not specify `--llm`, you will be prompted to select a provider and model interactively.\r\n\r\n\r\nREADME also updated", "state": "open", "created_at": "2025-05-22 11:43:33+00:00", "updated_at": "2025-05-22 11:44:42+00:00", "closed_at": null, "merged_at": null, "merge_commit_sha": null, "author": "Romamo", "assignees": [], "reviewers": [], "labels": [], "milestone": null, "base_branch": "main", "head_branch": "argument-llm-main", "base_sha": "ab8ce114e78e967948a3a48fe1206becc540e232", "head_sha": "60dc3133c3c89158a2c9fb7c80cd4f106dfb5324", "mergeable": false, "mergeable_state": "dirty", "merged": false, "comments": 0, "review_comments": 0, "commits": 5, "additions": 64, "deletions": 18, "changed_files": 3, "files": [{"filename": "README.md", "status": "modified", "additions": 17, "deletions": 13, "changes": 30, "patch": "@@ -147,6 +147,22 @@ run.bat --ticker AAPL,MSFT,NVDA main\n **Example Output:**\n <img width=\"992\" alt=\"Screenshot 2025-01-06 at 5 50 17 PM\" src=\"https://github.com/user-attachments/assets/e8ca04bf-9989-4a7d-a8b4-34e04666663b\" />\n \n+To specify the LLM provider and model, use the `--llm` argument in the format `Provider:Model` (e.g., `Openai:gpt-4`, `Ollama:llama3`). This will override the interactive model selection.\n+\n+```bash\n+# With Poetry:\n+poetry run python src/main.py --ticker AAPL,MSFT,NVDA --llm Openai:gpt-4\n+poetry run python src/main.py --ticker AAPL,MSFT,NVDA --llm Ollama:llama3\n+\n+# With Docker (on Linux/Mac):\n+./run.sh --ticker AAPL,MSFT,NVDA --llm Openai:gpt-4\n+\n+# With Docker (on Windows):\n+run.bat --ticker AAPL,MSFT,NVDA --llm Openai:gpt-4\n+```\n+\n+If you do not specify `--llm`, you will be prompted to select a provider and model interactively.\n+\n You can also specify a `--ollama` flag to run the AI hedge fund using local LLMs.\n \n ```bash\n@@ -205,6 +221,7 @@ run.bat --ticker AAPL,MSFT,NVDA backtest\n **Example Output:**\n <img width=\"941\" alt=\"Screenshot 2025-01-06 at 5 47 52 PM\" src=\"https://github.com/user-attachments/assets/00e794ea-8628-44e6-9a84-8f8a31ad3b47\" />\n \n+To specify the LLM provider and model, use the `--llm` argument the same way as for the Hedge Fund.\n \n You can optionally specify the start and end dates to backtest over a specific time period.\n \n@@ -219,19 +236,6 @@ poetry run python src/backtester.py --ticker AAPL,MSFT,NVDA --start-date 2024-01\n run.bat --ticker AAPL,MSFT,NVDA --start-date 2024-01-01 --end-date 2024-03-01 backtest\n ```\n \n-You can also specify a `--ollama` flag to run the backtester using local LLMs.\n-```bash\n-# With Poetry:\n-poetry run python src/backtester.py --ticker AAPL,MSFT,NVDA --ollama\n-\n-# With Docker (on Linux/Mac):\n-./run.sh --ticker AAPL,MSFT,NVDA --ollama backtest\n-\n-# With Docker (on Windows):\n-run.bat --ticker AAPL,MSFT,NVDA --ollama backtest\n-```\n-\n-\n ## Project Structure \n ```\n ai-hedge-fund/", "blob_url": "https://github.com/virattt/ai-hedge-fund/blob/60dc3133c3c89158a2c9fb7c80cd4f106dfb5324/README.md", "raw_url": "https://github.com/virattt/ai-hedge-fund/raw/60dc3133c3c89158a2c9fb7c80cd4f106dfb5324/README.md", "contents_url": "https://api.github.com/repos/virattt/ai-hedge-fund/contents/README.md?ref=60dc3133c3c89158a2c9fb7c80cd4f106dfb5324"}, {"filename": "src/backtester.py", "status": "modified", "additions": 23, "deletions": 2, "changes": 25, "patch": "@@ -651,6 +651,12 @@ def analyze_performance(self):\n         action=\"store_true\",\n         help=\"Use all available analysts (overrides --analysts)\",\n     )\n+    parser.add_argument(\n+        \"--llm\",\n+        type=str,\n+        default=None,\n+        help=\"Specify LLM as provider:model (e.g., Openai:gpt-4, Ollama:llama3) to override interactive selection\",\n+    )\n     parser.add_argument(\"--ollama\", action=\"store_true\", help=\"Use Ollama for local LLM inference\")\n \n     args = parser.parse_args()\n@@ -687,11 +693,26 @@ def analyze_performance(self):\n             selected_analysts = choices\n             print(f\"\\nSelected analysts: \" f\"{', '.join(Fore.GREEN + choice.title().replace('_', ' ') + Style.RESET_ALL for choice in choices)}\")\n \n-    # Select LLM model based on whether Ollama is being used\n+    # Select LLM model based on argument or interactive selection\n     model_name = \"\"\n     model_provider = None\n \n-    if args.ollama:\n+    # If command-line LLM is provided, use it directly\n+    if args.llm is not None:\n+        if ':' not in args.llm:\n+            print(f\"{Fore.RED}--llm argument must be in provider:model format (e.g., openai:gpt-4){Style.RESET_ALL}\")\n+            sys.exit(1)\n+        model_provider, model_name = args.llm.split(':', 1)\n+        if model_provider.lower() == ModelProvider.OLLAMA.value:\n+            # For Ollama, ensure model is available\n+            if not ensure_ollama_and_model(model_name):\n+                print(f\"{Fore.RED}Cannot proceed without Ollama and the selected model.{Style.RESET_ALL}\")\n+                sys.exit(1)\n+            print(f\"\\nSelected {Fore.CYAN}Ollama{Style.RESET_ALL} model: {Fore.GREEN + Style.BRIGHT}{model_name}{Style.RESET_ALL}\\n\")\n+            model_provider = ModelProvider.OLLAMA.value\n+        else:\n+            print(f\"\\nSelected {Fore.CYAN}{model_provider}{Style.RESET_ALL} model: {Fore.GREEN + Style.BRIGHT}{model_name}{Style.RESET_ALL}\\n\")\n+    elif args.ollama:\n         print(f\"{Fore.CYAN}Using Ollama for local LLM inference.{Style.RESET_ALL}\")\n \n         # Select from Ollama-specific models", "blob_url": "https://github.com/virattt/ai-hedge-fund/blob/60dc3133c3c89158a2c9fb7c80cd4f106dfb5324/src%2Fbacktester.py", "raw_url": "https://github.com/virattt/ai-hedge-fund/raw/60dc3133c3c89158a2c9fb7c80cd4f106dfb5324/src%2Fbacktester.py", "contents_url": "https://api.github.com/repos/virattt/ai-hedge-fund/contents/src%2Fbacktester.py?ref=60dc3133c3c89158a2c9fb7c80cd4f106dfb5324"}, {"filename": "src/main.py", "status": "modified", "additions": 24, "deletions": 3, "changes": 27, "patch": "@@ -145,6 +145,12 @@ def create_workflow(selected_analysts=None):\n     parser.add_argument(\"--end-date\", type=str, help=\"End date (YYYY-MM-DD). Defaults to today\")\n     parser.add_argument(\"--show-reasoning\", action=\"store_true\", help=\"Show reasoning from each agent\")\n     parser.add_argument(\"--show-agent-graph\", action=\"store_true\", help=\"Show the agent graph\")\n+    parser.add_argument(\n+        \"--llm\",\n+        type=str,\n+        default=None,\n+        help=\"Specify LLM as provider:model (e.g., Openai:gpt-4, Ollama:llama3) to override interactive selection\",\n+    )\n     parser.add_argument(\"--ollama\", action=\"store_true\", help=\"Use Ollama for local LLM inference\")\n \n     args = parser.parse_args()\n@@ -176,11 +182,26 @@ def create_workflow(selected_analysts=None):\n         selected_analysts = choices\n         print(f\"\\nSelected analysts: {', '.join(Fore.GREEN + choice.title().replace('_', ' ') + Style.RESET_ALL for choice in choices)}\\n\")\n \n-    # Select LLM model based on whether Ollama is being used\n+    # Select LLM model based on argument or interactive selection\n     model_name = \"\"\n     model_provider = \"\"\n \n-    if args.ollama:\n+    # If command-line LLM is provided, use it directly\n+    if args.llm is not None:\n+        if ':' not in args.llm:\n+            print(f\"{Fore.RED}--llm argument must be in provider:model format (e.g., Openai:gpt-4){Style.RESET_ALL}\")\n+            sys.exit(1)\n+        model_provider, model_name = args.llm.split(':', 1)\n+        if model_provider.lower() == ModelProvider.OLLAMA.value:\n+            # For Ollama, ensure model is available\n+            if not ensure_ollama_and_model(model_name):\n+                print(f\"{Fore.RED}Cannot proceed without Ollama and the selected model.{Style.RESET_ALL}\")\n+                sys.exit(1)\n+            print(f\"\\nSelected {Fore.CYAN}Ollama{Style.RESET_ALL} model: {Fore.GREEN + Style.BRIGHT}{model_name}{Style.RESET_ALL}\\n\")\n+            model_provider = ModelProvider.OLLAMA.value\n+        else:\n+            print(f\"\\nSelected {Fore.CYAN}{model_provider}{Style.RESET_ALL} model: {Fore.GREEN + Style.BRIGHT}{model_name}{Style.RESET_ALL}\\n\")\n+    elif args.ollama:\n         print(f\"{Fore.CYAN}Using Ollama for local LLM inference.{Style.RESET_ALL}\")\n \n         # Select from Ollama-specific models\n@@ -232,7 +253,7 @@ def create_workflow(selected_analysts=None):\n         if not model_choice:\n             print(\"\\n\\nInterrupt received. Exiting...\")\n             sys.exit(0)\n-\n+        \n         model_name, model_provider = model_choice\n \n         # Get model info using the helper function", "blob_url": "https://github.com/virattt/ai-hedge-fund/blob/60dc3133c3c89158a2c9fb7c80cd4f106dfb5324/src%2Fmain.py", "raw_url": "https://github.com/virattt/ai-hedge-fund/raw/60dc3133c3c89158a2c9fb7c80cd4f106dfb5324/src%2Fmain.py", "contents_url": "https://api.github.com/repos/virattt/ai-hedge-fund/contents/src%2Fmain.py?ref=60dc3133c3c89158a2c9fb7c80cd4f106dfb5324"}], "commits_data": [{"sha": "f3a21a57084553621c55fc11ffd9dab683ac59dd", "message": "Added command line argument to choose llm model", "author": "Romamo", "date": "2025-05-22 08:44:25+00:00", "url": "https://github.com/virattt/ai-hedge-fund/commit/f3a21a57084553621c55fc11ffd9dab683ac59dd"}, {"sha": "db3727cb36b95807089bfe943a8cf95da4c1294a", "message": "Removed wrongly added line", "author": "Romamo", "date": "2025-05-22 11:02:39+00:00", "url": "https://github.com/virattt/ai-hedge-fund/commit/db3727cb36b95807089bfe943a8cf95da4c1294a"}, {"sha": "94e3627ac3890dd11d3f3894f019e12cf471c3b9", "message": "Updated readme", "author": "Romamo", "date": "2025-05-22 11:27:47+00:00", "url": "https://github.com/virattt/ai-hedge-fund/commit/94e3627ac3890dd11d3f3894f019e12cf471c3b9"}, {"sha": "60e79c13a2ee4c49c9d0ab4257a932fba4870f9e", "message": "Added --llm argument to main.py too", "author": "Romamo", "date": "2025-05-22 11:42:27+00:00", "url": "https://github.com/virattt/ai-hedge-fund/commit/60e79c13a2ee4c49c9d0ab4257a932fba4870f9e"}, {"sha": "60dc3133c3c89158a2c9fb7c80cd4f106dfb5324", "message": "Added --llm argument to main.py too", "author": "Romamo", "date": "2025-05-22 11:44:36+00:00", "url": "https://github.com/virattt/ai-hedge-fund/commit/60dc3133c3c89158a2c9fb7c80cd4f106dfb5324"}], "reviews": [], "html_url": "https://github.com/virattt/ai-hedge-fund/pull/306", "diff_url": "https://github.com/virattt/ai-hedge-fund/pull/306.diff", "patch_url": "https://github.com/virattt/ai-hedge-fund/pull/306.patch"}, "analysis_duration": 7.6877524852752686, "total_issues": 0}, "error": null}, {"id": "2c643fda-7b80-4e83-90b2-440f2a0e0988", "type": "pr", "pr_url": "https://github.com/virattt/ai-hedge-fund/pull/306", "status": "completed", "mode": "standard", "created_at": "2025-07-27T17:40:34.397676", "started_at": "2025-07-27T17:40:35.372674", "completed_at": "2025-07-27T17:42:26.294480", "results": {"security_issues": [], "quality_issues": [], "logic_issues": [], "decision": {}, "pr_details": {"id": 2536944201, "number": 306, "title": "Argument --llm argument to main.py too", "body": "To specify the LLM provider and model, use the `--llm` argument in the format `Provider:Model` (e.g., `Openai:gpt-4`, `Ollama:llama3`). This will override the interactive model selection.\r\n\r\n```bash\r\n# With Poetry:\r\npoetry run python src/main.py --ticker AAPL,MSFT,NVDA --llm Openai:gpt-4\r\npoetry run python src/main.py --ticker AAPL,MSFT,NVDA --llm Ollama:llama3\r\n\r\n# With Docker (on Linux/Mac):\r\n./run.sh --ticker AAPL,MSFT,NVDA --llm Openai:gpt-4\r\n\r\n# With Docker (on Windows):\r\nrun.bat --ticker AAPL,MSFT,NVDA --llm Openai:gpt-4\r\n```\r\n\r\nIf you do not specify `--llm`, you will be prompted to select a provider and model interactively.\r\n\r\n\r\nREADME also updated", "state": "open", "created_at": "2025-05-22 11:43:33+00:00", "updated_at": "2025-05-22 11:44:42+00:00", "closed_at": null, "merged_at": null, "merge_commit_sha": null, "author": "Romamo", "assignees": [], "reviewers": [], "labels": [], "milestone": null, "base_branch": "main", "head_branch": "argument-llm-main", "base_sha": "ab8ce114e78e967948a3a48fe1206becc540e232", "head_sha": "60dc3133c3c89158a2c9fb7c80cd4f106dfb5324", "mergeable": false, "mergeable_state": "dirty", "merged": false, "comments": 0, "review_comments": 0, "commits": 5, "additions": 64, "deletions": 18, "changed_files": 3, "files": [{"filename": "README.md", "status": "modified", "additions": 17, "deletions": 13, "changes": 30, "patch": "@@ -147,6 +147,22 @@ run.bat --ticker AAPL,MSFT,NVDA main\n **Example Output:**\n <img width=\"992\" alt=\"Screenshot 2025-01-06 at 5 50 17 PM\" src=\"https://github.com/user-attachments/assets/e8ca04bf-9989-4a7d-a8b4-34e04666663b\" />\n \n+To specify the LLM provider and model, use the `--llm` argument in the format `Provider:Model` (e.g., `Openai:gpt-4`, `Ollama:llama3`). This will override the interactive model selection.\n+\n+```bash\n+# With Poetry:\n+poetry run python src/main.py --ticker AAPL,MSFT,NVDA --llm Openai:gpt-4\n+poetry run python src/main.py --ticker AAPL,MSFT,NVDA --llm Ollama:llama3\n+\n+# With Docker (on Linux/Mac):\n+./run.sh --ticker AAPL,MSFT,NVDA --llm Openai:gpt-4\n+\n+# With Docker (on Windows):\n+run.bat --ticker AAPL,MSFT,NVDA --llm Openai:gpt-4\n+```\n+\n+If you do not specify `--llm`, you will be prompted to select a provider and model interactively.\n+\n You can also specify a `--ollama` flag to run the AI hedge fund using local LLMs.\n \n ```bash\n@@ -205,6 +221,7 @@ run.bat --ticker AAPL,MSFT,NVDA backtest\n **Example Output:**\n <img width=\"941\" alt=\"Screenshot 2025-01-06 at 5 47 52 PM\" src=\"https://github.com/user-attachments/assets/00e794ea-8628-44e6-9a84-8f8a31ad3b47\" />\n \n+To specify the LLM provider and model, use the `--llm` argument the same way as for the Hedge Fund.\n \n You can optionally specify the start and end dates to backtest over a specific time period.\n \n@@ -219,19 +236,6 @@ poetry run python src/backtester.py --ticker AAPL,MSFT,NVDA --start-date 2024-01\n run.bat --ticker AAPL,MSFT,NVDA --start-date 2024-01-01 --end-date 2024-03-01 backtest\n ```\n \n-You can also specify a `--ollama` flag to run the backtester using local LLMs.\n-```bash\n-# With Poetry:\n-poetry run python src/backtester.py --ticker AAPL,MSFT,NVDA --ollama\n-\n-# With Docker (on Linux/Mac):\n-./run.sh --ticker AAPL,MSFT,NVDA --ollama backtest\n-\n-# With Docker (on Windows):\n-run.bat --ticker AAPL,MSFT,NVDA --ollama backtest\n-```\n-\n-\n ## Project Structure \n ```\n ai-hedge-fund/", "blob_url": "https://github.com/virattt/ai-hedge-fund/blob/60dc3133c3c89158a2c9fb7c80cd4f106dfb5324/README.md", "raw_url": "https://github.com/virattt/ai-hedge-fund/raw/60dc3133c3c89158a2c9fb7c80cd4f106dfb5324/README.md", "contents_url": "https://api.github.com/repos/virattt/ai-hedge-fund/contents/README.md?ref=60dc3133c3c89158a2c9fb7c80cd4f106dfb5324"}, {"filename": "src/backtester.py", "status": "modified", "additions": 23, "deletions": 2, "changes": 25, "patch": "@@ -651,6 +651,12 @@ def analyze_performance(self):\n         action=\"store_true\",\n         help=\"Use all available analysts (overrides --analysts)\",\n     )\n+    parser.add_argument(\n+        \"--llm\",\n+        type=str,\n+        default=None,\n+        help=\"Specify LLM as provider:model (e.g., Openai:gpt-4, Ollama:llama3) to override interactive selection\",\n+    )\n     parser.add_argument(\"--ollama\", action=\"store_true\", help=\"Use Ollama for local LLM inference\")\n \n     args = parser.parse_args()\n@@ -687,11 +693,26 @@ def analyze_performance(self):\n             selected_analysts = choices\n             print(f\"\\nSelected analysts: \" f\"{', '.join(Fore.GREEN + choice.title().replace('_', ' ') + Style.RESET_ALL for choice in choices)}\")\n \n-    # Select LLM model based on whether Ollama is being used\n+    # Select LLM model based on argument or interactive selection\n     model_name = \"\"\n     model_provider = None\n \n-    if args.ollama:\n+    # If command-line LLM is provided, use it directly\n+    if args.llm is not None:\n+        if ':' not in args.llm:\n+            print(f\"{Fore.RED}--llm argument must be in provider:model format (e.g., openai:gpt-4){Style.RESET_ALL}\")\n+            sys.exit(1)\n+        model_provider, model_name = args.llm.split(':', 1)\n+        if model_provider.lower() == ModelProvider.OLLAMA.value:\n+            # For Ollama, ensure model is available\n+            if not ensure_ollama_and_model(model_name):\n+                print(f\"{Fore.RED}Cannot proceed without Ollama and the selected model.{Style.RESET_ALL}\")\n+                sys.exit(1)\n+            print(f\"\\nSelected {Fore.CYAN}Ollama{Style.RESET_ALL} model: {Fore.GREEN + Style.BRIGHT}{model_name}{Style.RESET_ALL}\\n\")\n+            model_provider = ModelProvider.OLLAMA.value\n+        else:\n+            print(f\"\\nSelected {Fore.CYAN}{model_provider}{Style.RESET_ALL} model: {Fore.GREEN + Style.BRIGHT}{model_name}{Style.RESET_ALL}\\n\")\n+    elif args.ollama:\n         print(f\"{Fore.CYAN}Using Ollama for local LLM inference.{Style.RESET_ALL}\")\n \n         # Select from Ollama-specific models", "blob_url": "https://github.com/virattt/ai-hedge-fund/blob/60dc3133c3c89158a2c9fb7c80cd4f106dfb5324/src%2Fbacktester.py", "raw_url": "https://github.com/virattt/ai-hedge-fund/raw/60dc3133c3c89158a2c9fb7c80cd4f106dfb5324/src%2Fbacktester.py", "contents_url": "https://api.github.com/repos/virattt/ai-hedge-fund/contents/src%2Fbacktester.py?ref=60dc3133c3c89158a2c9fb7c80cd4f106dfb5324"}, {"filename": "src/main.py", "status": "modified", "additions": 24, "deletions": 3, "changes": 27, "patch": "@@ -145,6 +145,12 @@ def create_workflow(selected_analysts=None):\n     parser.add_argument(\"--end-date\", type=str, help=\"End date (YYYY-MM-DD). Defaults to today\")\n     parser.add_argument(\"--show-reasoning\", action=\"store_true\", help=\"Show reasoning from each agent\")\n     parser.add_argument(\"--show-agent-graph\", action=\"store_true\", help=\"Show the agent graph\")\n+    parser.add_argument(\n+        \"--llm\",\n+        type=str,\n+        default=None,\n+        help=\"Specify LLM as provider:model (e.g., Openai:gpt-4, Ollama:llama3) to override interactive selection\",\n+    )\n     parser.add_argument(\"--ollama\", action=\"store_true\", help=\"Use Ollama for local LLM inference\")\n \n     args = parser.parse_args()\n@@ -176,11 +182,26 @@ def create_workflow(selected_analysts=None):\n         selected_analysts = choices\n         print(f\"\\nSelected analysts: {', '.join(Fore.GREEN + choice.title().replace('_', ' ') + Style.RESET_ALL for choice in choices)}\\n\")\n \n-    # Select LLM model based on whether Ollama is being used\n+    # Select LLM model based on argument or interactive selection\n     model_name = \"\"\n     model_provider = \"\"\n \n-    if args.ollama:\n+    # If command-line LLM is provided, use it directly\n+    if args.llm is not None:\n+        if ':' not in args.llm:\n+            print(f\"{Fore.RED}--llm argument must be in provider:model format (e.g., Openai:gpt-4){Style.RESET_ALL}\")\n+            sys.exit(1)\n+        model_provider, model_name = args.llm.split(':', 1)\n+        if model_provider.lower() == ModelProvider.OLLAMA.value:\n+            # For Ollama, ensure model is available\n+            if not ensure_ollama_and_model(model_name):\n+                print(f\"{Fore.RED}Cannot proceed without Ollama and the selected model.{Style.RESET_ALL}\")\n+                sys.exit(1)\n+            print(f\"\\nSelected {Fore.CYAN}Ollama{Style.RESET_ALL} model: {Fore.GREEN + Style.BRIGHT}{model_name}{Style.RESET_ALL}\\n\")\n+            model_provider = ModelProvider.OLLAMA.value\n+        else:\n+            print(f\"\\nSelected {Fore.CYAN}{model_provider}{Style.RESET_ALL} model: {Fore.GREEN + Style.BRIGHT}{model_name}{Style.RESET_ALL}\\n\")\n+    elif args.ollama:\n         print(f\"{Fore.CYAN}Using Ollama for local LLM inference.{Style.RESET_ALL}\")\n \n         # Select from Ollama-specific models\n@@ -232,7 +253,7 @@ def create_workflow(selected_analysts=None):\n         if not model_choice:\n             print(\"\\n\\nInterrupt received. Exiting...\")\n             sys.exit(0)\n-\n+        \n         model_name, model_provider = model_choice\n \n         # Get model info using the helper function", "blob_url": "https://github.com/virattt/ai-hedge-fund/blob/60dc3133c3c89158a2c9fb7c80cd4f106dfb5324/src%2Fmain.py", "raw_url": "https://github.com/virattt/ai-hedge-fund/raw/60dc3133c3c89158a2c9fb7c80cd4f106dfb5324/src%2Fmain.py", "contents_url": "https://api.github.com/repos/virattt/ai-hedge-fund/contents/src%2Fmain.py?ref=60dc3133c3c89158a2c9fb7c80cd4f106dfb5324"}], "commits_data": [{"sha": "f3a21a57084553621c55fc11ffd9dab683ac59dd", "message": "Added command line argument to choose llm model", "author": "Romamo", "date": "2025-05-22 08:44:25+00:00", "url": "https://github.com/virattt/ai-hedge-fund/commit/f3a21a57084553621c55fc11ffd9dab683ac59dd"}, {"sha": "db3727cb36b95807089bfe943a8cf95da4c1294a", "message": "Removed wrongly added line", "author": "Romamo", "date": "2025-05-22 11:02:39+00:00", "url": "https://github.com/virattt/ai-hedge-fund/commit/db3727cb36b95807089bfe943a8cf95da4c1294a"}, {"sha": "94e3627ac3890dd11d3f3894f019e12cf471c3b9", "message": "Updated readme", "author": "Romamo", "date": "2025-05-22 11:27:47+00:00", "url": "https://github.com/virattt/ai-hedge-fund/commit/94e3627ac3890dd11d3f3894f019e12cf471c3b9"}, {"sha": "60e79c13a2ee4c49c9d0ab4257a932fba4870f9e", "message": "Added --llm argument to main.py too", "author": "Romamo", "date": "2025-05-22 11:42:27+00:00", "url": "https://github.com/virattt/ai-hedge-fund/commit/60e79c13a2ee4c49c9d0ab4257a932fba4870f9e"}, {"sha": "60dc3133c3c89158a2c9fb7c80cd4f106dfb5324", "message": "Added --llm argument to main.py too", "author": "Romamo", "date": "2025-05-22 11:44:36+00:00", "url": "https://github.com/virattt/ai-hedge-fund/commit/60dc3133c3c89158a2c9fb7c80cd4f106dfb5324"}], "reviews": [], "html_url": "https://github.com/virattt/ai-hedge-fund/pull/306", "diff_url": "https://github.com/virattt/ai-hedge-fund/pull/306.diff", "patch_url": "https://github.com/virattt/ai-hedge-fund/pull/306.patch"}, "analysis_duration": 9.362927913665771, "total_issues": 0}, "error": null}, {"id": "5cf697b0-80aa-4623-84de-9145879b5738", "type": "security", "code_snippets": [{"file_path": "auth.py", "content": "import os\nimport sqlite3\n\nADMIN_PASSWORD = os.getenv(\"ADMIN_PASSWORD\", \"superSecret123!\")\n\ndef login(username, password):\n    if password == ADMIN_PASSWORD:\n        return True\n    return False\n\ndef get_user_data(user_id):\n    connection = sqlite3.connect(\"app.db\")\n    cursor = connection.cursor()\n    cursor.execute(\"SELECT * FROM users WHERE id = ?\", (user_id,))\n    result = cursor.fetchone()\n    connection.close()\n \u00a0\u00a0\u00a0return\u00a0result", "language": "python"}], "status": "completed", "created_at": "2025-07-27T17:43:36.029281", "started_at": "2025-07-27T17:43:36.520703", "completed_at": "2025-07-27T17:43:39.134617", "results": {"security_issues": [{"type": "Hardcoded passwords/secrets/API keys", "severity": "critical", "description": "The ADMIN_PASSWORD is either hardcoded or retrieved from an environment variable with a fallback to a hardcoded value.  This is a critical vulnerability as it allows attackers to gain admin access if they can access the environment variables or the code itself.", "line": 2, "file": "auth.py", "confidence": 1.0}, {"type": "SQL injection", "severity": "critical", "description": "The get_user_data function is vulnerable to SQL injection.  User-supplied input (user_id) is directly incorporated into the SQL query without proper sanitization or parameterization. An attacker could inject malicious SQL code to retrieve sensitive data or modify the database.", "line": 12, "file": "auth.py", "confidence": 1.0}, {"type": "Authentication bypass", "severity": "critical", "description": "The login function only checks if the provided password matches the ADMIN_PASSWORD. There's no user verification, allowing anyone with knowledge of the ADMIN_PASSWORD to gain admin access.  This bypasses any intended authentication mechanism.", "line": 6, "file": "auth.py", "confidence": 1.0}], "total_issues": 3, "severity_breakdown": {"critical": 3, "high": 0, "medium": 0, "low": 0}, "decision": {"decision": "BLOCK", "risk_level": "critical", "summary": "Found 3 critical security issues", "recommendations": ["Fix critical security issues immediately", "Review security best practices"]}, "errors": [], "analysis_method": "agent_system"}, "error": null}, {"id": "5cf697b0-80aa-4623-84de-9145879b5738", "type": "security", "code_snippets": [{"file_path": "auth.py", "content": "import os\nimport sqlite3\n\nADMIN_PASSWORD = os.getenv(\"ADMIN_PASSWORD\", \"superSecret123!\")\n\ndef login(username, password):\n    if password == ADMIN_PASSWORD:\n        return True\n    return False\n\ndef get_user_data(user_id):\n    connection = sqlite3.connect(\"app.db\")\n    cursor = connection.cursor()\n    cursor.execute(\"SELECT * FROM users WHERE id = ?\", (user_id,))\n    result = cursor.fetchone()\n    connection.close()\n \u00a0\u00a0\u00a0return\u00a0result", "language": "python"}], "status": "completed", "created_at": "2025-07-27T17:43:36.029281", "started_at": "2025-07-27T17:43:36.520703", "completed_at": "2025-07-27T17:43:40.143694", "results": {"security_issues": [{"type": "Hardcoded passwords/secrets/API keys", "severity": "critical", "description": "The ADMIN_PASSWORD is either hardcoded or retrieved from an environment variable with a fallback to a hardcoded value.  This is a critical vulnerability as it allows attackers to gain administrator access if they can access the environment variables or the source code.", "line": 2, "file": "auth.py", "confidence": 1.0}, {"type": "SQL injection", "severity": "critical", "description": "The get_user_data function is vulnerable to SQL injection.  User-supplied input (user_id) is directly incorporated into the SQL query without proper sanitization or parameterization. An attacker could inject malicious SQL code to retrieve sensitive data or modify the database.", "line": 12, "file": "auth.py", "confidence": 1.0}, {"type": "Authentication bypass", "severity": "critical", "description": "The login function only checks if the provided password matches the ADMIN_PASSWORD. There's no user verification.  An attacker who knows the ADMIN_PASSWORD gains full access.", "line": 6, "file": "auth.py", "confidence": 1.0}], "total_issues": 3, "severity_breakdown": {"critical": 3, "high": 0, "medium": 0, "low": 0}, "decision": {"decision": "BLOCK", "risk_level": "critical", "summary": "Found 3 critical security issues", "recommendations": ["Fix critical security issues immediately", "Review security best practices"]}, "errors": [], "analysis_method": "agent_system"}, "error": null}]}